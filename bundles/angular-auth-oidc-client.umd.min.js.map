{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../lib/node_modules/src/util/tryCatch.ts","../lib/node_modules/src/Subscription.ts","../lib/node_modules/src/util/pipe.ts","../lib/node_modules/src/operators/bufferTime.ts","../lib/node_modules/src/observable/PromiseObservable.ts","../lib/node_modules/src/observable/IteratorObservable.ts","../lib/node_modules/src/operators/debounceTime.ts","../lib/node_modules/src/util/Set.ts","../lib/node_modules/src/operators/sampleTime.ts","../lib/node_modules/src/operators/throttleTime.ts","../lib/node_modules/src/operators/windowTime.ts","../lib/tmp/module/services/oidc-array-helper.service.ts","../lib/node_modules/src/util/root.ts","../lib/tmp/module/models/authorization-result.enum.ts","../lib/node_modules/src/util/isFunction.ts","../lib/node_modules/src/util/isArray.ts","../lib/node_modules/src/util/isObject.ts","../lib/node_modules/src/util/errorObject.ts","../lib/node_modules/src/util/UnsubscriptionError.ts","../lib/node_modules/src/Observer.ts","../lib/node_modules/src/symbol/rxSubscriber.ts","../lib/node_modules/src/Subscriber.ts","../lib/node_modules/src/util/toSubscriber.ts","../lib/node_modules/src/symbol/observable.ts","../lib/node_modules/src/util/noop.ts","../lib/node_modules/src/Observable.ts","../lib/node_modules/src/util/ObjectUnsubscribedError.ts","../lib/node_modules/src/SubjectSubscription.ts","../lib/node_modules/src/Subject.ts","../lib/node_modules/src/BehaviorSubject.ts","../lib/node_modules/src/util/isNumeric.ts","../lib/node_modules/src/scheduler/Action.ts","../lib/node_modules/src/scheduler/AsyncAction.ts","../lib/node_modules/src/Scheduler.ts","../lib/node_modules/src/scheduler/AsyncScheduler.ts","../lib/node_modules/src/scheduler/async.ts","../lib/node_modules/src/util/isScheduler.ts","../lib/node_modules/src/util/isDate.ts","../lib/node_modules/src/observable/TimerObservable.ts","../lib/node_modules/src/observable/timer.ts","../lib/node_modules/src/OuterSubscriber.ts","../lib/node_modules/src/util/isArrayLike.ts","../lib/node_modules/src/util/isPromise.ts","../lib/node_modules/src/symbol/iterator.ts","../lib/node_modules/src/InnerSubscriber.ts","../lib/node_modules/src/util/subscribeToResult.ts","../lib/node_modules/src/operators/audit.ts","../lib/node_modules/src/operators/buffer.ts","../lib/node_modules/src/operators/bufferCount.ts","../lib/node_modules/src/operators/bufferToggle.ts","../lib/node_modules/src/operators/bufferWhen.ts","../lib/node_modules/src/operators/catchError.ts","../lib/node_modules/src/observable/ScalarObservable.ts","../lib/node_modules/src/observable/EmptyObservable.ts","../lib/node_modules/src/observable/ArrayObservable.ts","../lib/node_modules/src/operators/combineLatest.ts","../lib/node_modules/src/observable/ArrayLikeObservable.ts","../lib/node_modules/src/Notification.ts","../lib/node_modules/src/operators/observeOn.ts","../lib/node_modules/src/observable/FromObservable.ts","../lib/node_modules/src/operators/mergeMap.ts","../lib/node_modules/src/operators/count.ts","../lib/node_modules/src/operators/debounce.ts","../lib/node_modules/src/operators/defaultIfEmpty.ts","../lib/node_modules/src/operators/delay.ts","../lib/node_modules/src/operators/delayWhen.ts","../lib/node_modules/src/operators/dematerialize.ts","../lib/node_modules/src/operators/distinct.ts","../lib/node_modules/src/operators/distinctUntilChanged.ts","../lib/node_modules/src/util/ArgumentOutOfRangeError.ts","../lib/node_modules/src/operators/elementAt.ts","../lib/node_modules/src/operators/every.ts","../lib/node_modules/src/operators/exhaust.ts","../lib/node_modules/src/operators/exhaustMap.ts","../lib/node_modules/src/operators/expand.ts","../lib/node_modules/src/operators/filter.ts","../lib/node_modules/src/operators/finalize.ts","../lib/node_modules/src/operators/find.ts","../lib/node_modules/src/util/EmptyError.ts","../lib/node_modules/src/operators/first.ts","../lib/node_modules/src/util/MapPolyfill.ts","../lib/node_modules/src/util/Map.ts","../lib/node_modules/src/util/FastMap.ts","../lib/node_modules/src/operators/groupBy.ts","../lib/node_modules/src/operators/ignoreElements.ts","../lib/node_modules/src/operators/isEmpty.ts","../lib/node_modules/src/operators/last.ts","../lib/node_modules/src/operators/map.ts","../lib/node_modules/src/operators/mapTo.ts","../lib/node_modules/src/operators/materialize.ts","../lib/node_modules/src/operators/scan.ts","../lib/node_modules/src/operators/takeLast.ts","../lib/node_modules/src/operators/mergeMapTo.ts","../lib/node_modules/src/operators/mergeScan.ts","../lib/node_modules/src/operators/refCount.ts","../lib/node_modules/src/observable/ConnectableObservable.ts","../lib/node_modules/src/operators/multicast.ts","../lib/node_modules/src/operators/onErrorResumeNext.ts","../lib/node_modules/src/operators/pairwise.ts","../lib/node_modules/src/operators/pluck.ts","../lib/node_modules/src/AsyncSubject.ts","../lib/node_modules/src/scheduler/QueueAction.ts","../lib/node_modules/src/scheduler/queue.ts","../lib/node_modules/src/scheduler/QueueScheduler.ts","../lib/node_modules/src/ReplaySubject.ts","../lib/node_modules/src/observable/race.ts","../lib/node_modules/src/operators/repeat.ts","../lib/node_modules/src/operators/repeatWhen.ts","../lib/node_modules/src/operators/retry.ts","../lib/node_modules/src/operators/retryWhen.ts","../lib/node_modules/src/operators/sample.ts","../lib/node_modules/src/operators/sequenceEqual.ts","../lib/node_modules/src/operators/single.ts","../lib/node_modules/src/operators/skip.ts","../lib/node_modules/src/operators/skipLast.ts","../lib/node_modules/src/operators/skipUntil.ts","../lib/node_modules/src/operators/skipWhile.ts","../lib/node_modules/src/operators/switchMap.ts","../lib/node_modules/src/operators/switchMapTo.ts","../lib/node_modules/src/operators/take.ts","../lib/node_modules/src/operators/takeUntil.ts","../lib/node_modules/src/operators/takeWhile.ts","../lib/node_modules/src/operators/tap.ts","../lib/node_modules/src/operators/throttle.ts","../lib/node_modules/src/operators/timeInterval.ts","../lib/node_modules/src/util/TimeoutError.ts","../lib/node_modules/src/operators/timeout.ts","../lib/node_modules/src/operators/timeoutWith.ts","../lib/node_modules/src/operators/window.ts","../lib/node_modules/src/operators/windowCount.ts","../lib/node_modules/src/operators/windowToggle.ts","../lib/node_modules/src/operators/windowWhen.ts","../lib/node_modules/src/operators/withLatestFrom.ts","../lib/node_modules/src/operators/zip.ts","../lib/tmp/module/models/validate-state-result.model.ts","../lib/tmp/module/modules/auth.configuration.ts","../lib/tmp/module/services/oidc.security.storage.ts","../lib/tmp/module/services/oidc.security.common.ts","../lib/tmp/module/services/oidc-token-helper.service.ts","../lib/tmp/module/services/oidc.logger.service.ts","../lib/tmp/module/services/oidc.security.validation.ts","../lib/tmp/module/services/oidc-security-state-validation.service.ts","../lib/tmp/module/services/oidc.security.check-session.ts","../lib/tmp/module/services/oidc.security.silent-renew.ts","../lib/tmp/module/services/oidc-data.service.ts","../lib/tmp/module/services/oidc.security.user-service.ts","../lib/tmp/module/services/uri-encoder.ts","../lib/tmp/module/services/oidc.security.service.ts","../lib/tmp/module/services/oidc.security.config.service.ts","../lib/tmp/module/models/auth.well-known-endpoints.ts","../lib/tmp/index.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ArrayHelperService {\n    constructor() {}\n\n    arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export enum AuthorizationResult {\n    authorized = 1,\n    forbidden = 2,\n    unauthorized = 3\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any\n    ) {}\n}\n","import { Injectable } from '@angular/core';\n\nexport class DefaultConfiguration {\n    stsServer = 'https://localhost:44318';\n    redirect_url = 'https://localhost:44311';\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n    // or if it contains additional audiences not trusted by the Client.\n    client_id = 'angularclient';\n    response_type = 'id_token token';\n    // For some oidc, we require resource identifier to be provided along with the request.\n    resource = '';\n    scope = 'openid email profile';\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\n    hd_param = '';\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\n    start_checksession = false;\n    silent_renew = true;\n    silent_renew_offset_in_seconds = 0;\n    post_login_route = '/';\n    // HTTP 403\n    forbidden_route = '/forbidden';\n    // HTTP 401\n    unauthorized_route = '/unauthorized';\n    auto_userinfo = true;\n    auto_clean_state_after_authentication: true;\n    trigger_authorization_result_event: false;\n    log_console_warning_active = true;\n    log_console_debug_active = false;\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    max_id_token_iat_offset_allowed_in_seconds = 3;\n\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\n}\n\nexport class OpenIDImplicitFlowConfiguration {\n    stsServer: string;\n    redirect_url: string;\n    client_id: string;\n    response_type: string;\n    resource: string;\n    scope: string;\n    hd_param: string;\n    post_logout_redirect_uri: string;\n    start_checksession: boolean;\n    silent_renew: boolean;\n    silent_renew_offset_in_seconds: number;\n    post_login_route: string;\n    forbidden_route: string;\n    unauthorized_route: string;\n    auto_userinfo: boolean;\n    auto_clean_state_after_authentication: boolean;\n    trigger_authorization_result_event: boolean;\n    log_console_warning_active: boolean;\n    log_console_debug_active: boolean;\n    max_id_token_iat_offset_allowed_in_seconds: number;\n    storage: any;\n}\n\n@Injectable()\nexport class AuthConfiguration {\n    private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration;\n\n    constructor(private defaultConfig: DefaultConfiguration) {}\n\n    get stsServer(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.stsServer ||\n            this.defaultConfig.stsServer\n        );\n    }\n\n    get redirect_url(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.redirect_url ||\n            this.defaultConfig.redirect_url\n        );\n    }\n\n    get client_id(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.client_id ||\n            this.defaultConfig.client_id\n        );\n    }\n\n    get response_type(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.response_type ||\n            this.defaultConfig.response_type\n        );\n    }\n\n    get resource(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.resource ||\n            this.defaultConfig.resource\n        );\n    }\n\n    get scope(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.scope ||\n            this.defaultConfig.scope\n        );\n    }\n\n    get hd_param(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.hd_param ||\n            this.defaultConfig.hd_param\n        );\n    }\n\n    get post_logout_redirect_uri(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.post_logout_redirect_uri ||\n            this.defaultConfig.post_logout_redirect_uri\n        );\n    }\n\n    get start_checksession(): boolean {\n        return this.openIDImplicitFlowConfiguration.start_checksession !==\n            undefined\n            ? this.openIDImplicitFlowConfiguration.start_checksession\n            : this.defaultConfig.start_checksession;\n    }\n\n    get silent_renew(): boolean {\n        return this.openIDImplicitFlowConfiguration.silent_renew !== undefined\n            ? this.openIDImplicitFlowConfiguration.silent_renew\n            : this.defaultConfig.silent_renew;\n    }\n\n    get silent_renew_offset_in_seconds(): number {\n        return (\n            this.openIDImplicitFlowConfiguration\n                .silent_renew_offset_in_seconds ||\n            this.defaultConfig.silent_renew_offset_in_seconds\n        );\n    }\n\n    get post_login_route(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.post_login_route ||\n            this.defaultConfig.post_login_route\n        );\n    }\n\n    get forbidden_route(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.forbidden_route ||\n            this.defaultConfig.forbidden_route\n        );\n    }\n\n    get unauthorized_route(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.unauthorized_route ||\n            this.defaultConfig.unauthorized_route\n        );\n    }\n\n    get auto_userinfo(): boolean {\n        return this.openIDImplicitFlowConfiguration.auto_userinfo !== undefined\n            ? this.openIDImplicitFlowConfiguration.auto_userinfo\n            : this.defaultConfig.auto_userinfo;\n    }\n\n    get auto_clean_state_after_authentication(): boolean {\n        return this.openIDImplicitFlowConfiguration\n            .auto_clean_state_after_authentication !== undefined\n            ? this.openIDImplicitFlowConfiguration\n                  .auto_clean_state_after_authentication\n            : this.defaultConfig.auto_clean_state_after_authentication;\n    }\n\n    get trigger_authorization_result_event(): boolean {\n        return this.openIDImplicitFlowConfiguration\n            .trigger_authorization_result_event !== undefined\n            ? this.openIDImplicitFlowConfiguration\n                  .trigger_authorization_result_event\n            : this.defaultConfig.trigger_authorization_result_event;\n    }\n\n    get log_console_warning_active(): boolean {\n        return this.openIDImplicitFlowConfiguration\n            .log_console_warning_active !== undefined\n            ? this.openIDImplicitFlowConfiguration.log_console_warning_active\n            : this.defaultConfig.log_console_warning_active;\n    }\n\n    get log_console_debug_active(): boolean {\n        return this.openIDImplicitFlowConfiguration.log_console_debug_active !==\n            undefined\n            ? this.openIDImplicitFlowConfiguration.log_console_debug_active\n            : this.defaultConfig.log_console_debug_active;\n    }\n\n    get max_id_token_iat_offset_allowed_in_seconds(): number {\n        return (\n            this.openIDImplicitFlowConfiguration\n                .max_id_token_iat_offset_allowed_in_seconds ||\n            this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds\n        );\n    }\n\n    get storage(): any {\n        return this.openIDImplicitFlowConfiguration.storage || this.defaultConfig.storage;\n    }\n\n    init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @param key\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param key\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityStorage } from './oidc.security.storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class OidcSecurityCommon {\n    private storage_auth_result = 'authorizationResult';\n\n    public get authResult(): any {\n        return this.retrieve(this.storage_auth_result);\n    }\n\n    public set authResult(value: any) {\n        this.store(this.storage_auth_result, value);\n    }\n\n    private storage_access_token = 'authorizationData';\n\n    public get accessToken(): string {\n        return this.retrieve(this.storage_access_token) || '';\n    }\n\n    public set accessToken(value: string) {\n        this.store(this.storage_access_token, value);\n    }\n\n    private storage_id_token = 'authorizationDataIdToken';\n\n    public get idToken(): string {\n        return this.retrieve(this.storage_id_token) || '';\n    }\n\n    public set idToken(value: string) {\n        this.store(this.storage_id_token, value);\n    }\n\n    private storage_is_authorized = '_isAuthorized';\n\n    public get isAuthorized(): boolean | undefined {\n        return this.retrieve(this.storage_is_authorized);\n    }\n\n    public set isAuthorized(value: boolean | undefined) {\n        this.store(this.storage_is_authorized, value);\n    }\n\n    private storage_user_data = 'userData';\n\n    public get userData(): any {\n        return this.retrieve(this.storage_user_data);\n    }\n\n    public set userData(value: any) {\n        this.store(this.storage_user_data, value);\n    }\n\n    private storage_auth_nonce = 'authNonce';\n\n    public get authNonce(): string {\n        return this.retrieve(this.storage_auth_nonce) || '';\n    }\n\n    public set authNonce(value: string) {\n        this.store(this.storage_auth_nonce, value);\n    }\n\n    private storage_auth_state_control = 'authStateControl';\n\n    public get authStateControl(): string {\n        return this.retrieve(this.storage_auth_state_control) || '';\n    }\n\n    public set authStateControl(value: string) {\n        this.store(this.storage_auth_state_control, value);\n    }\n\n    private storage_session_state = 'session_state';\n\n    public get sessionState(): any {\n        return this.retrieve(this.storage_session_state);\n    }\n\n    public set sessionState(value: any) {\n        this.store(this.storage_session_state, value);\n    }\n\n    private storage_silent_renew_running = 'storage_silent_renew_running';\n\n    public get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storage_silent_renew_running) || '';\n    }\n\n    public set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storage_silent_renew_running, value);\n    }\n\n    private storage_custom_request_params = 'storage_custom_request_params';\n\n    public get customRequestParams(): {\n        [key: string]: string | number | boolean;\n    } {\n        return this.retrieve(this.storage_custom_request_params);\n    }\n\n    public set customRequestParams(value: {\n        [key: string]: string | number | boolean;\n    }) {\n        this.store(this.storage_custom_request_params, value);\n    }\n\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\n\n    setupModule() {}\n\n    private retrieve(key: string): any {\n        return this.oidcSecurityStorage.read(key);\n    }\n\n    private store(key: string, value: any) {\n        this.oidcSecurityStorage.write(key, value);\n    }\n\n    resetStorageData(isRenewProcess: boolean) {\n        if (!isRenewProcess) {\n            this.store(this.storage_auth_result, '');\n            this.store(this.storage_session_state, '');\n            this.store(this.storage_silent_renew_running, '');\n            this.store(this.storage_is_authorized, false);\n            this.store(this.storage_access_token, '');\n            this.store(this.storage_id_token, '');\n            this.store(this.storage_user_data, '');\n        }\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storage_access_token);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storage_id_token);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TokenHelperService {\n    constructor() {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getPayloadFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[1];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getHeaderFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[0];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getSignatureFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[2];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    urlBase64Decode(str: string) {\n        let output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        return window.atob(output);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private authConfiguration: AuthConfiguration) {}\n\n    logError(message: any) {\n        console.error(message);\n    }\n\n    logWarning(message: any) {\n        if (this.authConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.authConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\nimport { ArrayHelperService } from './oidc-array-helper.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\n\n@Injectable()\nexport class OidcSecurityValidation {\n    constructor(\n        private arrayHelperService: ArrayHelperService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    validate_id_token_exp_not_expired(\n        decoded_id_token: string,\n        offsetSeconds?: number\n    ): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(\n            decoded_id_token\n        );\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        // Token not expired?\n        return (\n            tokenExpirationDate.valueOf() >\n            new Date().valueOf() + offsetSeconds * 1000\n        );\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\n    // in UTC until the date/ time.\n    validate_required_id_token(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'iss is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'sub is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'aud is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'exp is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'iat is missing, this is required in the id_token'\n            );\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validate_id_token_iat_max_offset(\n        dataIdToken: any,\n        max_offset_allowed_in_seconds: number\n    ): boolean {\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\n\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\n\n        if (dateTime_iat_id_token == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' +\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\n                ' < ' +\n                max_offset_allowed_in_seconds * 1000\n        );\n        return (\n            new Date().valueOf() - dateTime_iat_id_token.valueOf() <\n            max_offset_allowed_in_seconds * 1000\n        );\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\n        if (dataIdToken.nonce !== local_nonce) {\n            this.loggerService.logDebug(\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\n                    dataIdToken.nonce +\n                    ' local_nonce:' +\n                    local_nonce\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    validate_id_token_iss(\n        dataIdToken: any,\n        authWellKnownEndpoints_issuer: any\n    ): boolean {\n        if (\n            (dataIdToken.iss as string) !==\n            (authWellKnownEndpoints_issuer as string)\n        ) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                    dataIdToken.iss +\n                    ' authWellKnownEndpoints issuer:' +\n                    authWellKnownEndpoints_issuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\n        if (dataIdToken.aud instanceof Array) {\n            const result = this.arrayHelperService.arraysEqual(\n                dataIdToken.aud,\n                aud\n            );\n\n            if (!result) {\n                this.loggerService.logDebug(\n                    'Validate_id_token_aud  array failed, dataIdToken.aud: ' +\n                        dataIdToken.aud +\n                        ' client_id:' +\n                        aud\n                );\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug(\n                'Validate_id_token_aud failed, dataIdToken.aud: ' +\n                    dataIdToken.aud +\n                    ' client_id:' +\n                    aud\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\n        if ((state as string) !== (local_state as string)) {\n            this.loggerService.logDebug(\n                'ValidateStateFromHashCallback failed, state: ' +\n                    state +\n                    ' local_state:' +\n                    local_state\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    validate_userdata_sub_id_token(\n        id_token_sub: any,\n        userdata_sub: any\n    ): boolean {\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\n            this.loggerService.logDebug(\n                'validate_userdata_sub_id_token failed, id_token_sub: ' +\n                    id_token_sub +\n                    ' userdata_sub:' +\n                    userdata_sub\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const header_data = this.tokenHelperService.getHeaderFromToken(\n            id_token,\n            false\n        );\n\n        if (\n            Object.keys(header_data).length === 0 &&\n            header_data.constructor === Object\n        ) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = header_data.kid;\n        const alg = header_data.alg;\n\n        if ('RS256' !== (alg as string)) {\n            this.loggerService.logWarning('Only RS256 supported');\n            return false;\n        }\n\n        let isValid = false;\n\n        if (!header_data.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if (\n                    (key.kty as string) === 'RSA' &&\n                    (key.use as string) === 'sig'\n                ) {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning(\n                    'no keys found, incorrect Signature, validation failed for id_token'\n                );\n                return false;\n            } else if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning(\n                    'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri'\n                );\n                return false;\n            } else {\n                for (const key of jwtkeys.keys) {\n                    if (\n                        (key.kty as string) === 'RSA' &&\n                        (key.use as string) === 'sig'\n                    ) {\n                        const publickey = KEYUTIL.getKey(key);\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\n                            'RS256'\n                        ]);\n                        if (!isValid) {\n                            this.loggerService.logWarning(\n                                'incorrect Signature, validation failed for id_token'\n                            );\n                        }\n                        return isValid;\n                    }\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\n                        'RS256'\n                    ]);\n                    if (!isValid) {\n                        this.loggerService.logWarning(\n                            'incorrect Signature, validation failed for id_token'\n                        );\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    config_validate_response_type(response_type: string): boolean {\n        if (\n            response_type === 'id_token token' ||\n            response_type === 'id_token'\n        ) {\n            return true;\n        }\n\n        this.loggerService.logWarning(\n            'module configure incorrect, invalid response_type:' + response_type\n        );\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validate_id_token_at_hash(access_token: any, at_hash: any): boolean {\n        this.loggerService.logDebug('From the server:' + at_hash);\n        const testdata = this.generate_at_hash('' + access_token);\n        this.loggerService.logDebug(\n            'client validation not decoded:' + testdata\n        );\n        if (testdata === (at_hash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generate_at_hash(\n                '' + decodeURIComponent(access_token)\n            );\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (at_hash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generate_at_hash(access_token: any): string {\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n@Injectable()\nexport class StateValidationService {\n    private authWellKnownEndpoints: AuthWellKnownEndpoints;\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult('', '', false, {});\n        if (\n            !this.oidcSecurityValidation.validateStateFromHashCallback(\n                result.state,\n                this.oidcSecurityCommon.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(\n            toReturn.id_token,\n            false\n        );\n\n        if (\n            !this.oidcSecurityValidation.validate_signature_id_token(\n                toReturn.id_token,\n                jwtKeys\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Signature validation failed id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_nonce(\n                toReturn.decoded_id_token,\n                this.oidcSecurityCommon.authNonce\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_required_id_token(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration\n                    .max_id_token_iat_offset_allowed_in_seconds\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iss(\n                toReturn.decoded_id_token,\n                this.authWellKnownEndpoints.issuer\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_aud(\n                toReturn.decoded_id_token,\n                this.authConfiguration.client_id\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_exp_not_expired(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.handleSuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect at_hash'\n            );\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug(\n            'AuthorizedCallback token(s) validated, continue'\n        );\n    }\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { timer } from 'rxjs/observable/timer';\nimport { pluck, take, timeInterval } from 'rxjs/operators';\nimport { Observer } from 'rxjs/Observer';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class OidcSecurityCheckSession {\n    private sessionIframe: any;\n    private iframeMessageEvent: any;\n    private authWellKnownEndpoints: AuthWellKnownEndpoints;\n\n    @Output()\n    onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\n\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    doesSessionExist(): boolean {\n        let existsparent;\n        try {\n            const parentdoc = window.parent.document;\n            if (!parentdoc) {\n                throw new Error('Unaccessible');\n            }\n\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\n        } catch (e) {\n            // not accessible\n        }\n        const exists = window.document.getElementById(\n            'myiFrameForCheckSession'\n        );\n        if (existsparent) {\n            this.sessionIframe = existsparent;\n        } else if (exists) {\n            this.sessionIframe = exists;\n        }\n\n        if (existsparent || exists) {\n            return true;\n        }\n\n        return false;\n    }\n\n    init() {\n        this.sessionIframe = window.document.createElement('iframe');\n        this.sessionIframe.id = 'myiFrameForCheckSession';\n        this.loggerService.logDebug(this.sessionIframe);\n        this.sessionIframe.style.display = 'none';\n        window.document.body.appendChild(this.sessionIframe);\n        this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\n\n        this.iframeMessageEvent = this.messageHandler.bind(this);\n        window.addEventListener('message', this.iframeMessageEvent, false);\n\n        return Observable.create((observer: Observer<any>) => {\n            this.sessionIframe.onload = () => {\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n\n    pollServerSession(clientId: any) {\n        const source = timer(3000, 3000).pipe(\n            timeInterval(),\n            pluck('interval'),\n            take(10000)\n        );\n\n        source.subscribe(\n            () => {\n                if (this.sessionIframe && clientId) {\n                    this.loggerService.logDebug(this.sessionIframe);\n                    const session_state = this.oidcSecurityCommon.sessionState;\n                    if (session_state) {\n                        this.sessionIframe.contentWindow.postMessage(\n                            clientId + ' ' + session_state,\n                            this.authConfiguration.stsServer\n                        );\n                    }\n                } else {\n                    this.loggerService.logWarning(\n                        'OidcSecurityCheckSession pollServerSession sessionIframe does not exist'\n                    );\n                    this.loggerService.logDebug(clientId);\n                    this.loggerService.logDebug(this.sessionIframe);\n                    // this.init();\n                }\n            },\n            (err: any) => {\n                this.loggerService.logError('pollServerSession error: ' + err);\n            },\n            () => {\n                this.loggerService.logDebug(\n                    'checksession pollServerSession completed'\n                );\n            }\n        );\n    }\n\n    private messageHandler(e: any) {\n        if (\n            this.sessionIframe &&\n            e.origin === this.authConfiguration.stsServer &&\n            e.source === this.sessionIframe.contentWindow\n        ) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning(\n                    'error from checksession messageHandler'\n                );\n            } else if (e.data === 'changed') {\n                this.onCheckSessionChanged.emit();\n            } else {\n                this.loggerService.logDebug(\n                    e.data + ' from checksession messageHandler'\n                );\n            }\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class OidcSecuritySilentRenew {\n private sessionIframe: any;\n private sessionIframeLogout: any;\n private _checkForIFrameLogoutSrc: any;\n\n constructor(private loggerService: LoggerService) {}\n\n logout(url: string) {\n  this.sessionIframeLogout = window.document.createElement('iframe');\n  this.sessionIframeLogout.id = 'myiFrameForSilentLogout';\n  this.sessionIframeLogout.style.display = 'none';\n  window.document.body.appendChild(this.sessionIframeLogout);\n  this.sessionIframeLogout.src = url;\n  this._checkForIFrameLogoutSrc = window.setInterval(() => {\n    this.logoutIFrameCleanUp();\n  }, 2000);\n  return Observable.create((observer: Observer<any>) => {\n   this.sessionIframeLogout.onload = () => {\n    observer.next(this.sessionIframeLogout);\n    observer.complete();\n   };\n  });\n }\n\n logoutIFrameCleanUp() {\n  this.sessionIframeLogout.src = '';\n  window.clearInterval(this._checkForIFrameLogoutSrc);\n  this._checkForIFrameLogoutSrc = null;\n  this.sessionIframeLogout = null;\n }\n\n removeiFrameForSilentLogout() {\n  console.log(this.sessionIframeLogout);\n }\n\n initRenew() {\n  let existsparent;\n  try {\n   const parentdoc = window.parent.document;\n   if (!parentdoc) {\n    throw new Error('Unaccessible');\n   }\n\n   existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\n  } catch (e) {\n   // not accessible\n  }\n  const exists = window.document.getElementById('myiFrameForSilentRenew');\n  if (existsparent) {\n   this.sessionIframe = existsparent;\n  } else if (exists) {\n   this.sessionIframe = exists;\n  }\n\n  if (!exists && !existsparent) {\n   this.sessionIframe = window.document.createElement('iframe');\n   this.sessionIframe.id = 'myiFrameForSilentRenew';\n   this.loggerService.logDebug(this.sessionIframe);\n   this.sessionIframe.style.display = 'none';\n\n   window.document.body.appendChild(this.sessionIframe);\n  }\n }\n\n // TODO The return type of this method is never used. Is it needed?\n startRenew(url: string) {\n  let existsparent;\n  try {\n   const parentdoc = window.parent.document;\n   if (!parentdoc) {\n    throw new Error('Unaccessible');\n   }\n\n   existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\n  } catch (e) {\n   // not accessible\n  }\n  const exists = window.document.getElementById('myiFrameForSilentRenew');\n  if (existsparent) {\n   this.sessionIframe = existsparent;\n  } else if (exists) {\n   this.sessionIframe = exists;\n  }\n\n  this.loggerService.logDebug('startRenew for URL:' + url);\n  this.sessionIframe.src = url;\n\n  return Observable.create((observer: Observer<any>) => {\n   this.sessionIframe.onload = () => {\n    observer.next(this);\n    observer.complete();\n   };\n  });\n }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        const headers = new HttpHeaders({'Accept': 'application/json'});\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        const headers = new HttpHeaders({'Accept': 'application/json', 'Authorization': 'Bearer ' + decodeURIComponent(token)});\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        const headers = new HttpHeaders({'Accept': 'application/json'});\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcDataService } from './oidc-data.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n@Injectable()\nexport class OidcSecurityUserService {\n    private userData: any = '';\n    private authWellKnownEndpoints: AuthWellKnownEndpoints;\n\n    constructor(\n        private oidcDataService: OidcDataService,\n        private oidcSecurityCommon: OidcSecurityCommon,\n    ) { }\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    initUserData() {\n        return this.getIdentityUserData().pipe(\n            map((data: any) => (this.userData = data))\n        );\n    }\n\n    getUserData(): any {\n        if (!this.userData) {\n            throw Error('UserData is not set!');\n        }\n\n        return this.userData;\n    }\n\n    setUserData(value: any): void {\n        this.userData = value;\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.oidcSecurityCommon.getAccessToken();\n\n        return this.oidcDataService.getIdentityUserData(\n            this.authWellKnownEndpoints.userinfo_endpoint,\n            token\n        );\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { HttpParams } from '@angular/common/http';\nimport { Inject, PLATFORM_ID } from '@angular/core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { timer } from 'rxjs/observable/timer';\nimport { catchError, pluck, take, timeInterval } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { AuthorizationResult } from '../models/authorization-result.enum';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport {\n  AuthConfiguration,\n  OpenIDImplicitFlowConfiguration\n} from '../modules/auth.configuration';\nimport { StateValidationService } from './oidc-security-state-validation.service';\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './oidc.security.user-service';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { UriEncoder } from './uri-encoder';\nimport { OidcDataService } from './oidc-data.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n@Injectable()\nexport class OidcSecurityService {\n  @Output() onModuleSetup = new EventEmitter<boolean>();\n  @Output() onAuthorizationResult = new EventEmitter<AuthorizationResult>();\n  @Output() onCheckSessionChanged = new EventEmitter<boolean>();\n\n  checkSessionChanged: boolean;\n  moduleSetup = false;\n  private authWellKnownEndpoints: AuthWellKnownEndpoints;\n  private _isAuthorized = new BehaviorSubject<boolean>(false);\n  private _isAuthorizedValue: boolean;\n\n  private _isLoading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  private _isLoadingValue: boolean;\n\n  private lastUserData: any;\n  private _userData = new BehaviorSubject<any>('');\n\n  private authWellKnownEndpointsLoaded = false;\n  private runTokenValidationRunning: boolean;\n\n  private CheckForPopupClosedInterval: number;\n  private _checkForPopupClosedTimer: any;\n  private _popup: any;\n  private _popupFor: string;\n  private authenticationScheme: string;\n  private loginMethod: string;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private oidcDataService: OidcDataService,\n    private stateValidationService: StateValidationService,\n    private authConfiguration: AuthConfiguration,\n    private router: Router,\n    private oidcSecurityCheckSession: OidcSecurityCheckSession,\n    private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\n    private oidcSecurityUserService: OidcSecurityUserService,\n    private oidcSecurityCommon: OidcSecurityCommon,\n    private oidcSecurityValidation: OidcSecurityValidation,\n    private tokenHelperService: TokenHelperService,\n    private loggerService: LoggerService,\n    private httpClient: HttpClient\n  ) {}\n\n  setupModule(\n    openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration,\n    authWellKnownEndpoints: AuthWellKnownEndpoints\n  ): void {\n    this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    this.authConfiguration.init(openIDImplicitFlowConfiguration);\n    this.stateValidationService.setupModule(authWellKnownEndpoints);\n    this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\n    this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\n\n    this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\n      this.loggerService.logDebug('onCheckSessionChanged');\n      this.checkSessionChanged = true;\n      this.onCheckSessionChanged.emit(\n        this.checkSessionChanged\n      );\n    });\n\n    this._userData.subscribe(() => {\n      this.onUserDataChanged();\n    });\n\n    const userData = this.oidcSecurityCommon.userData;\n    if (userData) {\n      this.setUserData(userData);\n    }\n\n    const isAuthorized = this.oidcSecurityCommon.isAuthorized;\n    if (isAuthorized) {\n      this.loggerService.logDebug('IsAuthorized setup module');\n      this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\n      if (this.oidcSecurityValidation.isTokenExpired(\n          this.oidcSecurityCommon.idToken,\n          this.authConfiguration.silent_renew_offset_in_seconds)\n      ) {\n        this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\n      } else {\n        this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\n        this.setIsAuthorized(isAuthorized);\n        this.runTokenValidation();\n      }\n    }\n\n    this.loggerService.logDebug(\n      'STS server: ' + this.authConfiguration.stsServer\n    );\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.moduleSetup = true;\n      this.onModuleSetup.emit();\n\n      if (this.authConfiguration.silent_renew) {\n        this.oidcSecuritySilentRenew.initRenew();\n      }\n\n      if (\n        this.authConfiguration.start_checksession &&\n        !this.oidcSecurityCheckSession.doesSessionExist()\n      ) {\n        this.oidcSecurityCheckSession.init().subscribe(() => {\n          this.oidcSecurityCheckSession.pollServerSession(\n            this.authConfiguration.client_id\n          );\n        });\n      }\n    } else {\n      this.moduleSetup = true;\n      this.onModuleSetup.emit();\n    }\n  }\n\n  getUserData(): Observable<any> {\n    return this._userData.asObservable();\n  }\n\n  getIsAuthorized(): Observable<boolean> {\n    return this._isAuthorized.asObservable();\n  }\n\n  getToken(): string {\n    if (!this._isAuthorizedValue) {\n      return '';\n    }\n\n    const token = this.oidcSecurityCommon.getAccessToken();\n    return decodeURIComponent(token);\n  }\n\n  getIdToken(): string {\n    if (!this._isAuthorizedValue) {\n      return '';\n    }\n\n    const token = this.oidcSecurityCommon.getIdToken();\n    return decodeURIComponent(token);\n  }\n\n  getPayloadFromIdToken(encode = false): any {\n    const token = this.getIdToken();\n    return this.tokenHelperService.getPayloadFromToken(token, encode);\n  }\n\n  setState(state: string): void {\n    this.oidcSecurityCommon.authStateControl = state;\n  }\n\n  getState(): string {\n    return this.oidcSecurityCommon.authStateControl;\n  }\n\n  setCustomRequestParameters(params: {\n    [key: string]: string | number | boolean;\n  }) {\n    this.oidcSecurityCommon.customRequestParams = params;\n  }\n\n  popup_cleanup() {\n    window.clearInterval(this._checkForPopupClosedTimer);\n    this._checkForPopupClosedTimer = null;\n    this._popup = null;\n  }\n\n  _checkForPopupClosed() {\n    try {\n      if (this._popup.location.href !== 'about:blank' && this._popup.location.href !== undefined) {\n        let a = this._popup.location.href.split('/');\n        a = a[(a.length - 1)];\n        if (a !== 'login') {\n          this._popup.close();\n          if (!this._popup || this._popup.closed) {\n            const hash = this._popup.location.hash.substr(1);\n            this.authorizedCallback(hash);\n            this.popup_cleanup();\n          }\n        } else {\n          if (!this._popup || this._popup.closed) {\n            this.popup_cleanup();\n          } else {\n            this._popupFor = 'afterRegistration';\n            this.authorize(this.authenticationScheme, this.loginMethod);\n          }\n        }\n      }\n    } catch (err) {\n      // do nothing\n    }\n  }\n\n  _checkForLogoutPopupClosed() {\n    try {\n      if (this._popup.location.href !== 'about:blank') {\n        this._popup.close();\n        if (!this._popup || this._popup.closed) {\n          this.popup_cleanup();\n        }\n      }\n    } catch (err) {\n\n    }\n  }\n\n  popup_login(url: string, title: string, w: number, h: number) {\n    let options: string;\n    this.CheckForPopupClosedInterval = 2000;\n\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : 0;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : 0;\n\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n\n    const left = ((width / 2) - (w / 2)) + dualScreenLeft;\n    const top = ((height / 2) - (h / 2)) + dualScreenTop;\n\n    options += 'toolbar=no,location=no,directories=no,status=no';\n    options += ',menubar=no,scrollbars=no,resizable=no,copyhistory=no';\n\n    options += ',width='  + w;\n    options += ',height=' + h;\n    options += ',top='  + top;\n    options += ',left='   + left;\n\n    this._popup = window.open(url, title, options);\n    this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), this.CheckForPopupClosedInterval);\n  }\n\n  authorize(authenticationScheme: string = 'local', loginMethod: string = 'redirect') {\n    this.authenticationScheme = authenticationScheme;\n    this.loginMethod = loginMethod;\n    if (this.authWellKnownEndpoints) {\n      this.authWellKnownEndpointsLoaded = true;\n    }\n\n    if (!this.authWellKnownEndpointsLoaded) {\n      this.loggerService.logError(\n        'Well known endpoints must be loaded before user can login!'\n      );\n      return;\n    }\n\n    if (\n      !this.oidcSecurityValidation.config_validate_response_type(\n        this.authConfiguration.response_type\n      )\n    ) {\n      // invalid response_type\n      return;\n    }\n\n    this.resetAuthorizationData(false);\n\n    this.loggerService.logDebug('BEGIN Authorize, no auth data');\n\n    let state = this.oidcSecurityCommon.authStateControl;\n    if (!state) {\n      state = Date.now() + '' + Math.random();\n      this.oidcSecurityCommon.authStateControl = state;\n    }\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    this.oidcSecurityCommon.authNonce = nonce;\n    this.loggerService.logDebug(\n      'AuthorizedController created. local state: ' +\n        this.oidcSecurityCommon.authStateControl\n    );\n\n    let url = this.createAuthorizeUrl(\n      nonce,\n      state,\n      this.authWellKnownEndpoints.authorization_endpoint\n    );\n    url = url + '&authenticationScheme=' + authenticationScheme;\n\n    if (loginMethod === 'popup') {\n      if (this._popupFor === 'afterRegistration') {\n        this._popup.location.href = url;\n      } else {\n        this.popup_login(url, 'QPONS\\' AUTHORIZATION PAGE', 800, 800);\n      }\n    } else {\n      window.location.href = url;\n    }\n  }\n\n  authorizedCallback(hash?: string) {\n    this.setIsLoading(true);\n    const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n    const isRenewProcess = silentRenew === 'running';\n\n    this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n    this.resetAuthorizationData(isRenewProcess);\n\n    hash = hash || window.location.hash.substr(1);\n\n    const result: any = hash\n      .split('&')\n      .reduce(function(resultData: any, item: string) {\n        const parts = item.split('=');\n        resultData[parts[0]] = parts[1];\n        return resultData;\n      }, {});\n\n    this.oidcSecurityCommon.authResult = result;\n    this.loggerService.logDebug(result);\n    this.loggerService.logDebug(\n      'authorizedCallback created, begin token validation'\n    );\n\n    this.getSigningKeys().subscribe((jwtKeys: any) => {\n      const validationResult = this.getValidatedStateResult(\n        result,\n        jwtKeys\n      );\n\n      if (validationResult.authResponseIsValid) {\n        this.setAuthorizationData(\n          validationResult.access_token,\n          validationResult.id_token\n        );\n        this.oidcSecurityCommon.silentRenewRunning = '';\n\n        if (this.authConfiguration.auto_userinfo) {\n          this.getUserinfo(\n            isRenewProcess,\n            result,\n            validationResult.id_token,\n            validationResult.decoded_id_token\n          ).subscribe((response: any) => {\n            this.setIsLoading(false);\n            if (response) {\n              this.onAuthorizationResult.emit(AuthorizationResult.authorized);\n              if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                this.router.navigate([\n                  this.authConfiguration.post_login_route\n                ]);\n              }\n            } else {\n              this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n              if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                this.router.navigate([\n                  this.authConfiguration.unauthorized_route\n                ]);\n              }\n            }\n          });\n        } else {\n          this.setIsLoading(false);\n          if (!isRenewProcess) {\n            // userData is set to the id_token decoded, auto get user data set to false\n            this.oidcSecurityUserService.setUserData(\n              validationResult.decoded_id_token\n            );\n            this.setUserData(\n              this.oidcSecurityUserService.getUserData()\n            );\n            this.runTokenValidation();\n          }\n\n          this.onAuthorizationResult.emit(AuthorizationResult.authorized);\n          if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n            this.router.navigate([\n              this.authConfiguration.post_login_route\n            ]);\n          }\n        }\n      } else {\n        this.setIsLoading(false);\n        // something went wrong\n        this.loggerService.logWarning(\n          'authorizedCallback, token(s) validation failed, resetting'\n        );\n        this.loggerService.logWarning(window.location.hash);\n        this.resetAuthorizationData(false);\n        this.oidcSecurityCommon.silentRenewRunning = '';\n\n        this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n          this.router.navigate([\n            this.authConfiguration.unauthorized_route\n          ]);\n        }\n      }\n    });\n  }\n\n  getUserinfo(\n    isRenewProcess = false,\n    result?: any,\n    id_token?: any,\n    decoded_id_token?: any\n  ): Observable<boolean> {\n    result = result ? result : this.oidcSecurityCommon.authResult;\n    id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\n    decoded_id_token = decoded_id_token\n      ? decoded_id_token\n      : this.tokenHelperService.getPayloadFromToken(id_token, false);\n\n    return new Observable<boolean>((observer: any) => {\n      // flow id_token token\n      if (this.authConfiguration.response_type === 'id_token token') {\n        if (isRenewProcess) {\n          this.oidcSecurityCommon.sessionState = result.session_state;\n          observer.next(true);\n          observer.complete();\n        } else {\n          this.oidcSecurityUserService\n            .initUserData()\n            .subscribe(() => {\n              this.loggerService.logDebug(\n                'authorizedCallback id_token token flow'\n              );\n\n              const userData = this.oidcSecurityUserService.getUserData();\n\n              if (\n                this.oidcSecurityValidation.validate_userdata_sub_id_token(\n                  decoded_id_token.sub,\n                  userData.sub\n                )\n              ) {\n                this.setUserData(userData);\n                this.loggerService.logDebug(\n                  this.oidcSecurityCommon.accessToken\n                );\n                this.loggerService.logDebug(\n                  this.oidcSecurityUserService.getUserData()\n                );\n\n                this.oidcSecurityCommon.sessionState =\n                  result.session_state;\n\n                this.runTokenValidation();\n                observer.next(true);\n              } else {\n                // something went wrong, userdata sub does not match that from id_token\n                this.loggerService.logWarning(\n                  'authorizedCallback, User data sub does not match sub in id_token'\n                );\n                this.loggerService.logDebug(\n                  'authorizedCallback, token(s) validation failed, resetting'\n                );\n                this.resetAuthorizationData(false);\n                observer.next(false);\n              }\n              observer.complete();\n            });\n        }\n      } else {\n        // flow id_token\n        this.loggerService.logDebug('authorizedCallback id_token flow');\n        this.loggerService.logDebug(\n          this.oidcSecurityCommon.accessToken\n        );\n\n        // userData is set to the id_token decoded. No access_token.\n        this.oidcSecurityUserService.setUserData(decoded_id_token);\n        this.setUserData(this.oidcSecurityUserService.getUserData());\n\n        this.oidcSecurityCommon.sessionState = result.session_state;\n\n        if (!isRenewProcess) {\n          this.runTokenValidation();\n        }\n\n        observer.next(true);\n        observer.complete();\n      }\n    });\n  }\n\n  async logoff() {\n    // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\n    this.loggerService.logDebug('BEGIN Authorize, no auth data');\n\n    if (this.authWellKnownEndpoints.end_session_endpoint) {\n      const end_session_endpoint = this.authWellKnownEndpoints\n        .end_session_endpoint;\n      const id_token_hint = this.oidcSecurityCommon.idToken;\n      const url = this.createEndSessionUrl(\n        end_session_endpoint,\n        id_token_hint\n      );\n\n      this.resetAuthorizationData(false);\n\n      if (\n        this.authConfiguration.start_checksession &&\n        this.checkSessionChanged\n      ) {\n        this.loggerService.logDebug(\n          'only local login cleaned up, server session has changed'\n        );\n      } else {\n        // window.location.href = url;\n        await this.oidcSecuritySilentRenew.logout(url);\n        this.oidcSecuritySilentRenew.removeiFrameForSilentLogout();\n      }\n    } else {\n      this.resetAuthorizationData(false);\n      this.loggerService.logDebug(\n        'only local login cleaned up, no end_session_endpoint'\n      );\n    }\n  }\n\n  refreshSession() {\n    this.loggerService.logDebug('BEGIN refresh session Authorize');\n\n    let state = this.oidcSecurityCommon.authStateControl;\n    if (state === '' || state === null) {\n      state = Date.now() + '' + Math.random();\n      this.oidcSecurityCommon.authStateControl = state;\n    }\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    this.oidcSecurityCommon.authNonce = nonce;\n    this.loggerService.logDebug(\n      'RefreshSession created. adding myautostate: ' +\n        this.oidcSecurityCommon.authStateControl\n    );\n\n    const url = this.createAuthorizeUrl(\n      nonce,\n      state,\n      this.authWellKnownEndpoints.authorization_endpoint,\n      'none'\n    );\n\n    this.oidcSecurityCommon.silentRenewRunning = 'running';\n    this.oidcSecuritySilentRenew.startRenew(url);\n  }\n\n  handleError(error: any) {\n    this.loggerService.logError(error);\n    if (error.status === 403 || error.status === '403') {\n      if (this.authConfiguration.trigger_authorization_result_event) {\n        this.onAuthorizationResult.emit(\n          AuthorizationResult.unauthorized\n        );\n      } else {\n        this.router.navigate([this.authConfiguration.forbidden_route]);\n      }\n    } else if (error.status === 401 || error.status === '401') {\n      const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n\n      this.resetAuthorizationData(!!silentRenew);\n\n      if (this.authConfiguration.trigger_authorization_result_event) {\n        this.onAuthorizationResult.emit(\n          AuthorizationResult.unauthorized\n        );\n      } else {\n        this.router.navigate([\n          this.authConfiguration.unauthorized_route\n        ]);\n      }\n    }\n  }\n\n  private getValidatedStateResult(\n    result: any,\n    jwtKeys: JwtKeys\n  ): ValidateStateResult {\n    if (result.error) {\n      return new ValidateStateResult('', '', false, {});\n    }\n\n    return this.stateValidationService.validateState(result, jwtKeys);\n  }\n\n  private setUserData(userData: any): void {\n    this.oidcSecurityCommon.userData = userData;\n    this._userData.next(userData);\n  }\n\n  private setIsAuthorized(isAuthorized: boolean): void {\n    this._isAuthorizedValue = isAuthorized;\n    this._isAuthorized.next(isAuthorized);\n  }\n\n  private setAuthorizationData(access_token: any, id_token: any) {\n    if (this.oidcSecurityCommon.accessToken !== '') {\n      this.oidcSecurityCommon.accessToken = '';\n    }\n\n    this.loggerService.logDebug(access_token);\n    this.loggerService.logDebug(id_token);\n    this.loggerService.logDebug('storing to storage, getting the roles');\n    this.oidcSecurityCommon.accessToken = access_token;\n    this.oidcSecurityCommon.idToken = id_token;\n    this.setIsAuthorized(true);\n    this.oidcSecurityCommon.isAuthorized = true;\n  }\n\n  getIsLoading(): Observable<boolean> {\n    return this._isLoading.asObservable();\n  }\n\n  private setIsLoading(isAuthorized: boolean) {\n    this._isLoadingValue = isAuthorized;\n    this._isLoading.next(isAuthorized);\n  }\n\n  private createAuthorizeUrl(\n    nonce: string,\n    state: string,\n    authorization_endpoint: string,\n    prompt?: string\n  ): string {\n    const urlParts = authorization_endpoint.split('?');\n    const authorizationUrl = urlParts[0];\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder()\n    });\n    params = params.set('client_id', this.authConfiguration.client_id);\n    params = params.append(\n      'redirect_uri',\n      this.authConfiguration.redirect_url\n    );\n    params = params.append(\n      'response_type',\n      this.authConfiguration.response_type\n    );\n    params = params.append('scope', this.authConfiguration.scope);\n    params = params.append('nonce', nonce);\n    params = params.append('state', state);\n\n    if (prompt) {\n      params = params.append('prompt', prompt);\n    }\n\n    if (this.authConfiguration.hd_param) {\n      params = params.append('hd', this.authConfiguration.hd_param);\n    }\n\n    const customParams = Object.assign(\n      {},\n      this.oidcSecurityCommon.customRequestParams\n    );\n\n    Object.keys(customParams).forEach(key => {\n      params = params.append(key, customParams[key].toString());\n    });\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  private createEndSessionUrl(\n    end_session_endpoint: string,\n    id_token_hint: string\n  ) {\n    const urlParts = end_session_endpoint.split('?');\n\n    const authorizationEndsessionUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder()\n    });\n    params = params.set('id_token_hint', id_token_hint);\n    params = params.append(\n      'post_logout_redirect_uri',\n      this.authConfiguration.post_logout_redirect_uri\n    );\n\n    return `${authorizationEndsessionUrl}?${params}`;\n  }\n\n  private resetAuthorizationData(isRenewProcess: boolean) {\n    if (!isRenewProcess) {\n      if (this.authConfiguration.auto_userinfo) {\n        // Clear user data. Fixes #97.\n        this.setUserData('');\n      }\n      this.setIsAuthorized(false);\n      this.oidcSecurityCommon.resetStorageData(isRenewProcess);\n      this.checkSessionChanged = false;\n    }\n  }\n\n  private onUserDataChanged() {\n    this.loggerService.logDebug(\n      `onUserDataChanged: last = ${this.lastUserData}, new = ${\n        this._userData.value\n      }`\n    );\n\n    if (this.lastUserData && !this._userData.value) {\n      this.loggerService.logDebug('onUserDataChanged: Logout detected.');\n      // TODO should we have an action here\n    }\n    this.lastUserData = this._userData.value;\n  }\n\n  private getSigningKeys(): Observable<JwtKeys> {\n    this.loggerService.logDebug(\n      'jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri\n    );\n    return this.oidcDataService\n      .get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\n      .pipe(catchError(this.handleErrorGetSigningKeys));\n  }\n\n  private handleErrorGetSigningKeys(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      const body = error.json() || {};\n      const err = JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    console.error(errMsg);\n    return Observable.throw(errMsg);\n  }\n\n  private runTokenValidation() {\n    if (this.runTokenValidationRunning) {\n      return;\n    }\n    this.runTokenValidationRunning = true;\n\n    const source = timer(5000, 3000).pipe(\n      timeInterval(),\n      pluck('interval'),\n      take(10000)\n    );\n\n    source.subscribe(\n      () => {\n        if (this._userData.value && (this.oidcSecurityCommon.silentRenewRunning !== 'running') && this.getIdToken()) {\n          if (this.oidcSecurityValidation.isTokenExpired(\n              this.oidcSecurityCommon.idToken,\n              this.authConfiguration.silent_renew_offset_in_seconds\n            )\n          ) {\n            this.loggerService.logDebug(\n              'IsAuthorized: id_token isTokenExpired, start silent renew if active'\n            );\n\n            if (this.authConfiguration.silent_renew) {\n              this.refreshSession();\n            } else {\n              this.resetAuthorizationData(false);\n            }\n          }\n        }\n      },\n      (err: any) => {\n        this.loggerService.logError('Error: ' + err);\n      },\n      () => {\n        this.loggerService.logDebug('Completed');\n      }\n    );\n  }\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\n\n@Injectable()\nexport class OidcConfigService {\n    @Output() onConfigurationLoaded = new EventEmitter<boolean>();\n    clientConfiguration: any;\n    wellKnownEndpoints: any;\n\n    constructor() {}\n\n    async load(configUrl: string) {\n        const response = await fetch(configUrl);\n        this.clientConfiguration = await response.json()\n        await this.load_using_stsServer(this.clientConfiguration.stsServer);\n    }\n\n    async load_using_stsServer(stsServer: string) {\n        const response = await fetch(`${stsServer}/.well-known/openid-configuration`);\n        this.wellKnownEndpoints = await response.json()\n        this.onConfigurationLoaded.emit();\n    }\n\n    async load_using_custom_stsServer(stsServer: string) {\n        const response = await fetch(stsServer);\n        this.wellKnownEndpoints = await response.json()\n        this.onConfigurationLoaded.emit();\n    }\n}\n","export class AuthWellKnownEndpoints {\n\n    issuer: string;\n    jwks_uri: string;\n    authorization_endpoint: string;\n    token_endpoint: string;\n    userinfo_endpoint: string;\n    end_session_endpoint: string;\n    check_session_iframe: string;\n    revocation_endpoint: string;\n    introspection_endpoint: string;\n\n    public setWellKnownEndpoints(data: any) {\n        this.issuer = data.issuer;\n        this.jwks_uri = data.jwks_uri;\n        this.authorization_endpoint = data.authorization_endpoint;\n        this.token_endpoint = data.token_endpoint;\n        this.userinfo_endpoint = data.userinfo_endpoint;\n\n        if (data.end_session_endpoint) {\n            this.end_session_endpoint = data.end_session_endpoint;\n        }\n\n        if (data.check_session_iframe) {\n            this.check_session_iframe = data.check_session_iframe;\n        }\n\n        if (data.revocation_endpoint) {\n            this.revocation_endpoint = data.revocation_endpoint;\n        }\n\n        if (data.introspection_endpoint) {\n            this.introspection_endpoint = data.introspection_endpoint;\n        }\n    }\n}\n","/**\n * Provides a single interface for the angular-auth-oidc-client Module to be used in other modules\n * \n * @file index\n * @author Matthew Aaron Raymer <matthew.raymer@anomalistdesign.com>\n * @license UNLICENSED\n * @copyright Qpons 2017\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { ArrayHelperService } from './module/services/oidc-array-helper.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpModule, RequestOptions, Http, XHRBackend, BaseRequestOptions } from '@angular/http';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\nimport { OidcSecurityService } from './module/services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration, OpenIDImplicitFlowConfiguration } from './module/modules/auth.configuration';\nimport { OidcSecurityValidation } from './module/services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from './module/services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from './module/services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './module/services/oidc.security.user-service';\nimport { OidcSecurityCommon } from './module/services/oidc.security.common';\nimport {\n  OidcSecurityStorage,\n  BrowserStorage\n} from './module/services/oidc.security.storage';\nimport { StateValidationService } from './module/services/oidc-security-state-validation.service';\nimport { OidcDataService } from './module/services/oidc-data.service';\nimport { TokenHelperService } from './module/services/oidc-token-helper.service';\nimport { LoggerService } from './module/services/oidc.logger.service';\nimport { OidcConfigService } from './module/services/oidc.security.config.service';\nimport { AuthWellKnownEndpoints } from './module/models/auth.well-known-endpoints';\n\n/**\n * Dependencies\n * \n * @export\n */\nexport { ArrayHelperService } from './module/services/oidc-array-helper.service';\nexport { NgModule, ModuleWithProviders } from '@angular/core';\n\nexport { OidcSecurityService } from './module/services/oidc.security.service';\nexport { AuthConfiguration, DefaultConfiguration, OpenIDImplicitFlowConfiguration } from './module/modules/auth.configuration';\nexport { OidcSecurityValidation } from './module/services/oidc.security.validation';\nexport { OidcSecurityCheckSession } from './module/services/oidc.security.check-session';\nexport { OidcSecuritySilentRenew } from './module/services/oidc.security.silent-renew';\nexport { OidcSecurityUserService } from './module/services/oidc.security.user-service';\nexport { OidcSecurityCommon } from './module/services/oidc.security.common';\nexport {\n  OidcSecurityStorage,\n  BrowserStorage\n} from './module/services/oidc.security.storage';\nexport { StateValidationService } from './module/services/oidc-security-state-validation.service';\nexport { OidcDataService } from './module/services/oidc-data.service';\nexport { TokenHelperService } from './module/services/oidc-token-helper.service';\nexport { LoggerService } from './module/services/oidc.logger.service';\nexport { OidcConfigService } from './module/services/oidc.security.config.service';\nexport { AuthWellKnownEndpoints } from './module/models/auth.well-known-endpoints';\n\n/**\n * AAOC Module\n * \n * @export\n * @class AuthModule\n */\n@NgModule({\n  imports: [\n    HttpModule,\n    HttpClientModule\n  ],\n  exports: [],\n  declarations: []\n})\nexport class AuthModule {\n  static forRoot(token: Token = {}): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        OidcConfigService,\n        OidcSecurityService,\n        OidcSecurityValidation,\n        OidcSecurityCheckSession,\n        OidcSecuritySilentRenew,\n        OidcSecurityUserService,\n        OidcSecurityCommon,\n        AuthConfiguration,\n        TokenHelperService,\n        LoggerService,\n        DefaultConfiguration,\n        ArrayHelperService,\n        AuthWellKnownEndpoints,\n        OidcDataService,\n        StateValidationService,\n        {\n          provide: OidcSecurityStorage,\n          useClass: token.storage || BrowserStorage\n        }\n      ]\n    };\n  }\n}\n\n/**\n * Interface for Type<T>\n * \n * @export\n * @interface Type\n * @extends {Function}\n * @template T \n */\nexport interface Type<T> extends Function {\n  new (...args: any[]): T;\n}\n\n/**\n * Interface for Token\n * \n * @export\n * @interface Token\n */\nexport interface Token {\n  storage?: Type<any>;\n}\n"],"names":["tryCatchTarget","apply","this","arguments","e","errorObject_1","errors","reduce","errs","err","concat","UnsubscriptionError_1","fns","length","input","prev","fn","noop_1","state","subscriber","prevContext","context","closeContext","closed","openContext","closeAction","schedule","bufferTimeSpan","scheduler","add","dispatchBufferClose","bufferCreationInterval","arg","next","value","complete","error","o","len","isNaN","root_1","isFinite","numberIsFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","debouncedNext","MinimalSet","has","_values","push","indexOf","Object","period","notifyNext","clearThrottle","windowTimeSpan","window","closeWindow","openWindow","windowCreationInterval","action","subscription","timeSpanState","dispatchWindowClose","remove","ArrayHelperService","arr1","arr2","i","Injectable","__window","__self","self","WorkerGlobalScope","_root","global","Error","AuthorizationResult","x","Array","isArray","tryCatcher","_super","call","map","toString","join","name","stack","message","__extends","unsubscribe","_unsubscribe","Subscription","hasErrors","_parent","_parents","_subscriptions","index","isFunction_1","tryCatch_1","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","Symbol","exports","for","destinationOrNext","destination","Observer_1","Subscriber","syncErrorThrowable","SafeSubscriber","rxSubscriber_1","isStopped","_next","_error","_complete","Subscription_1","_parentSubscriber","observerOrNext","create","bind","_context","__tryOrSetError","__tryOrUnsub","syncErrorValue","syncErrorThrown","wrappedComplete","_this","nextOrObserver","Subscriber_1","$$observable","observable","getSymbolObservable","_i","pipeFromArray","subscribe","_subscribe","Observable","operator","source","sink","toSubscriber_1","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","operations","pipe_1","subject","SubjectSubscription","observers","subscriberIndex","Subject","SubjectSubscriber","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","hasError","thrownError","SubjectSubscription_1","Observable_1","_value","BehaviorSubject","getValue","Subject_1","val","parseFloat","work","Action","delay","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","_execute","errored","errorValue","undefined","actions","Action_1","SchedulerAction","now","Scheduler","Date","AsyncScheduler","active","execute","shift","Scheduler_1","AsyncScheduler_1","AsyncAction_1","dueTime","isNumeric_1","Number","isScheduler_1","async_1","isDate_1","TimerObservable","initialDelay","dispatch","OuterSubscriber","outerValue","innerValue","outerIndex","innerIndex","innerSub","then","root","iterator","Set_1","Map_1","keys","getOwnPropertyNames","prototype","key","symbolIteratorPonyfill","InnerSubscriber","notifyError","notifyComplete","outerSubscriber","result","InnerSubscriber_1","_isScalar","isArrayLike_1","isPromise_1","setTimeout","iterator_1","item","done","obs","TypeError","msg","durationSelector","AuditOperator","AuditSubscriber","hasValue","throttled","duration","innerSubscription","subscribeToResult_1","OuterSubscriber_1","closingNotifier","BufferOperator","BufferSubscriber","buffer","bufferSize","startBufferEvery","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","BufferCountOperator","buffers","count","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","timespanOnly","timeSpanOnlyState","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferCreation","filledBufferContext","contexts","onBufferFull","Context","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","selector","CatchOperator","caught","lift","CatchSubscriber","err2","_unsubscribeAndRecycle","ScalarObservable","EmptyObservable","array","ArrayObservable","pop","ScalarObservable_1","EmptyObservable_1","none","project","CombineLatestOperator","CombineLatestSubscriber","values","observables","toRespond","unused","oldVal","_tryProject","promise","PromiseObservable","dispatchNext","dispatchError","obj","StringIterator","ArrayIterator","getIterator","IteratorObservable","return","str","idx","charAt","arr","toLength","pow","arrayLike","ArrayLikeObservable","kind","Notification","observer","observe","do","of","throw","undefinedValueNotification","completeNotification","ObserveOnOperator","ObserveOnSubscriber","notification","ObserveOnMessage","scheduleMessage","Notification_1","createNext","createError","createComplete","ish","FromObservable","ArrayObservable_1","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","resultSelector","concurrent","POSITIVE_INFINITY","MergeMapOperator","MergeMapSubscriber","_tryNext","_innerSub","hasCompleted","_notifyResultSelector","predicate","CountOperator","CountSubscriber","_tryPredicate","DebounceOperator","DebounceSubscriber","emitValue","durationSubscription","DebounceTimeOperator","DebounceTimeSubscriber","clearDebounce","lastValue","debouncedSubscription","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","DelayOperator","DelaySubscriber","queue","time","delay_1","max","DelayMessage","_schedule","scheduleNotification","delayDurationSelector","DelayWhenOperator","DelayWhenSubscriber","removeSubscription","tryComplete","delayNotifier","tryDelay","completed","subscriptionIdx","delayNotifierSubscriptions","notifierSubscription","subscriptionDelay","SubscriptionDelayObservable","SubscriptionDelaySubscriber","subscribeToSource","sourceSubscribed","DeMaterializeOperator","DeMaterializeSubscriber","Set","minimalSetImpl","keySelector","flushes","DistinctOperator","DistinctSubscriber","clear","_useKeySelector","_finalizeNext","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","y","hasKey","Boolean","ArgumentOutOfRangeError_1","ElementAtOperator","ElementAtSubscriber","thisArg","EveryOperator","EverySubscriber","everyValueMatch","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandOperator","ExpandSubscriber","subscribeToProjection","FilterOperator","FilterSubscriber","callback","FinallyOperator","FinallySubscriber","yieldIndex","FindValueOperator","FindValueSubscriber","FirstOperator","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","_emitted","EmptyError_1","MapPolyfill","_keys","size","cb","Map","MapPolyfill_1","FastMap","hasOwnProperty","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","_group","groups","FastMap_1","element","group","get","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","forEach","delete","attemptedToUnsubscribe","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsOperator","IgnoreElementsSubscriber","IsEmptyOperator","IsEmptySubscriber","LastOperator","LastSubscriber","MapOperator","MapSubscriber","MapToOperator","MapToSubscriber","MaterializeOperator","MaterializeSubscriber","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","total","TakeLastOperator","TakeLastSubscriber","ring","MergeMapToOperator","MergeMapToSubscriber","MergeScanOperator","MergeScanSubscriber","acc","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","subjectFactory","ConnectableObservable","getSubject","_subject","_isComplete","ConnectableSubscriber","refCount_1","MulticastOperator","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","PairwiseOperator","PairwiseSubscriber","hasPrev","properties","map_1","props","currentProp","p","plucker","AsyncSubject","hasNext","QueueAction","QueueAction_1","windowTime","_bufferSize","_windowTime","ReplaySubject","_getNow","_events","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","RaceOperator","RaceSubscriber","hasFirst","RepeatOperator","RepeatSubscriber","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetryOperator","RetrySubscriber","RetryWhenOperator","RetryWhenSubscriber","SampleOperator","sampleSubscriber","SampleSubscriber","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualCompareToSubscriber","_oneComplete","_b","emit","_a","checkValues","a","b","areEqual","nextB","SingleOperator","SingleSubscriber","seenValue","singleValue","applySingleValue","SkipOperator","SkipSubscriber","_skipCount","SkipLastOperator","SkipLastSubscriber","_ring","skipCount","_count","currentIndex","oldValue","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","TakeOperator","TakeSubscriber","TakeUntilOperator","TakeUntilSubscriber","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","DoOperator","DoSubscriber","safeSubscriber","leading","trailing","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeOperator","ThrottleTimeSubscriber","TimeIntervalOperator","interval","TimeIntervalSubscriber","lastTime","span","TimeInterval","waitFor","absoluteTimeout","errorInstance","TimeoutOperator","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","prevWindow","newWindow","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","window_1","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromOperator","WithLatestFromSubscriber","found","args","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","shouldComplete","nextResult","isComplete","notifyInactive","checkIterators","ValidateStateResult","access_token","id_token","authResponseIsValid","decoded_id_token","DefaultConfiguration","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","defaultConfig","AuthConfiguration","openIDImplicitFlowConfiguration","stsServer","redirect_url","client_id","response_type","resource","scope","hd_param","post_logout_redirect_uri","start_checksession","silent_renew","silent_renew_offset_in_seconds","post_login_route","forbidden_route","unauthorized_route","auto_userinfo","auto_clean_state_after_authentication","trigger_authorization_result_event","log_console_warning_active","log_console_debug_active","max_id_token_iat_offset_allowed_in_seconds","storage","authConfiguration","hasStorage","BrowserStorage","JSON","parse","getItem","setItem","stringify","oidcSecurityStorage","OidcSecurityCommon","retrieve","storage_auth_result","store","storage_access_token","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_auth_state_control","storage_session_state","storage_silent_renew_running","storage_custom_request_params","read","write","isRenewProcess","OidcSecurityStorage","TokenHelperService","dataIdToken","date","setUTCSeconds","exp","token","encode","data","encoded","split","urlBase64Decode","output","replace","atob","LoggerService","console","warn","log","arrayHelperService","tokenHelperService","loggerService","OidcSecurityValidation","offsetSeconds","decoded","getPayloadFromToken","validate_id_token_exp_not_expired","tokenExpirationDate","getTokenExpirationDate","valueOf","validated","logWarning","max_offset_allowed_in_seconds","dateTime_iat_id_token","iat","logDebug","local_nonce","nonce","authWellKnownEndpoints_issuer","iss","aud","arraysEqual","local_state","id_token_sub","userdata_sub","jwtkeys","header_data","getHeaderFromToken","constructor","kid","alg","isValid","_e","_d","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","kty","use","_c","at_hash","testdata","generate_at_hash","testValue","decodeURIComponent","hash","crypto","Util","hashString","first128bits","substr","hextob64u","oidcSecurityCommon","oidcSecurityValidation","StateValidationService","authWellKnownEndpoints","assign","jwtKeys","toReturn","validateStateFromHashCallback","authStateControl","validate_signature_id_token","validate_id_token_nonce","authNonce","validate_required_id_token","validate_id_token_iat_max_offset","validate_id_token_iss","issuer","validate_id_token_aud","handleSuccessfulValidation","validate_id_token_at_hash","EventEmitter","OidcSecurityCheckSession","existsparent","parentdoc","document","getElementById","exists","sessionIframe","createElement","style","display","body","appendChild","src","check_session_iframe","iframeMessageEvent","messageHandler","addEventListener","onload","clientId","timer","pipe","timeInterval","pluck","take","session_state","sessionState","contentWindow","postMessage","logError","origin","onCheckSessionChanged","Output","OidcSecuritySilentRenew","url","sessionIframeLogout","_checkForIFrameLogoutSrc","logoutIFrameCleanUp","httpClient","OidcDataService","headers","HttpHeaders","Accept","Authorization","HttpClient","oidcDataService","OidcSecurityUserService","getIdentityUserData","userData","getAccessToken","userinfo_endpoint","UriEncoder","encodeURIComponent","platformId","stateValidationService","router","oidcSecurityCheckSession","oidcSecuritySilentRenew","oidcSecurityUserService","OidcSecurityService","init","setupModule","checkSessionChanged","_userData","onUserDataChanged","setUserData","isAuthorized","idToken","isTokenExpired","setIsAuthorized","runTokenValidation","isPlatformBrowser","moduleSetup","onModuleSetup","initRenew","doesSessionExist","pollServerSession","asObservable","_isAuthorized","_isAuthorizedValue","getIdToken","params","customRequestParams","_checkForPopupClosedTimer","_popup","location","href","close","authorizedCallback","popup_cleanup","_popupFor","authorize","authenticationScheme","loginMethod","title","w","h","options","CheckForPopupClosedInterval","dualScreenLeft","screenLeft","dualScreenTop","screenTop","width","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","height","open","_checkForPopupClosed","authWellKnownEndpointsLoaded","config_validate_response_type","resetAuthorizationData","random","createAuthorizeUrl","authorization_endpoint","popup_login","setIsLoading","silentRenewRunning","resultData","parts","authResult","getSigningKeys","validationResult","getValidatedStateResult","setAuthorizationData","getUserinfo","response","onAuthorizationResult","authorized","navigate","unauthorized","getUserData","initUserData","validate_userdata_sub_id_token","accessToken","end_session_endpoint","id_token_hint","createEndSessionUrl","logout","removeiFrameForSilentLogout","startRenew","status","silentRenew","validateState","_isLoading","_isLoadingValue","prompt","urlParts","authorizationUrl","HttpParams","fromString","encoder","append","customParams","authorizationEndsessionUrl","resetStorageData","lastUserData","jwks_uri","catchError","handleErrorGetSigningKeys","errMsg","Response","json","statusText","runTokenValidationRunning","refreshSession","Inject","PLATFORM_ID","Router","OidcConfigService","configUrl","fetch","clientConfiguration","load_using_stsServer","wellKnownEndpoints","onConfigurationLoaded","AuthWellKnownEndpoints","token_endpoint","revocation_endpoint","introspection_endpoint","AuthModule","ngModule","providers","provide","useClass","NgModule","imports","HttpModule","HttpClientModule","declarations"],"mappings":"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"}