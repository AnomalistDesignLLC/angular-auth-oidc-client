{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../lib/node_modules/src/util/tryCatch.ts","../lib/node_modules/src/Subscription.ts","../lib/node_modules/src/util/pipe.ts","../lib/node_modules/src/observable/BoundCallbackObservable.ts","../lib/node_modules/src/observable/BoundNodeCallbackObservable.ts","../lib/node_modules/src/observable/PromiseObservable.ts","../lib/node_modules/src/observable/IteratorObservable.ts","../lib/node_modules/src/operators/merge.ts","../lib/node_modules/src/observable/PairsObservable.ts","../lib/node_modules/src/operators/zip.ts","../lib/node_modules/src/observable/dom/AjaxObservable.ts","../lib/node_modules/src/util/assign.ts","../lib/node_modules/src/operators/bufferTime.ts","../lib/node_modules/src/operators/debounceTime.ts","../lib/node_modules/src/util/Set.ts","../lib/node_modules/src/operators/sampleTime.ts","../lib/node_modules/src/operators/share.ts","../lib/node_modules/src/operators/throttleTime.ts","../lib/node_modules/src/operators/toArray.ts","../lib/node_modules/src/operators/windowTime.ts","../lib/node_modules/src/util/root.ts","../lib/node_modules/src/util/isFunction.ts","../lib/node_modules/src/util/isArray.ts","../lib/node_modules/src/util/isObject.ts","../lib/node_modules/src/util/errorObject.ts","../lib/node_modules/src/util/UnsubscriptionError.ts","../lib/node_modules/src/Observer.ts","../lib/node_modules/src/symbol/rxSubscriber.ts","../lib/node_modules/src/Subscriber.ts","../lib/node_modules/src/util/toSubscriber.ts","../lib/node_modules/src/symbol/observable.ts","../lib/node_modules/src/util/noop.ts","../lib/node_modules/src/Observable.ts","../lib/node_modules/src/util/ObjectUnsubscribedError.ts","../lib/node_modules/src/SubjectSubscription.ts","../lib/node_modules/src/Subject.ts","../lib/node_modules/src/AsyncSubject.ts","../lib/node_modules/src/observable/bindCallback.ts","../lib/node_modules/src/add/observable/bindCallback.ts","../lib/node_modules/src/observable/bindNodeCallback.ts","../lib/node_modules/src/add/observable/bindNodeCallback.ts","../lib/node_modules/src/util/isScheduler.ts","../lib/node_modules/src/observable/ScalarObservable.ts","../lib/node_modules/src/observable/EmptyObservable.ts","../lib/node_modules/src/observable/ArrayObservable.ts","../lib/node_modules/src/OuterSubscriber.ts","../lib/node_modules/src/util/isArrayLike.ts","../lib/node_modules/src/util/isPromise.ts","../lib/node_modules/src/symbol/iterator.ts","../lib/node_modules/src/InnerSubscriber.ts","../lib/node_modules/src/util/subscribeToResult.ts","../lib/node_modules/src/operators/combineLatest.ts","../lib/node_modules/src/observable/combineLatest.ts","../lib/node_modules/src/add/observable/combineLatest.ts","../lib/node_modules/src/observable/of.ts","../lib/node_modules/src/observable/ArrayLikeObservable.ts","../lib/node_modules/src/Notification.ts","../lib/node_modules/src/operators/observeOn.ts","../lib/node_modules/src/observable/FromObservable.ts","../lib/node_modules/src/observable/from.ts","../lib/node_modules/src/operators/mergeMap.ts","../lib/node_modules/src/util/identity.ts","../lib/node_modules/src/operators/mergeAll.ts","../lib/node_modules/src/operators/concatAll.ts","../lib/node_modules/src/observable/concat.ts","../lib/node_modules/src/add/observable/concat.ts","../lib/node_modules/src/observable/DeferObservable.ts","../lib/node_modules/src/observable/defer.ts","../lib/node_modules/src/add/observable/defer.ts","../lib/node_modules/src/observable/empty.ts","../lib/node_modules/src/add/observable/empty.ts","../lib/node_modules/src/observable/ForkJoinObservable.ts","../lib/node_modules/src/observable/forkJoin.ts","../lib/node_modules/src/add/observable/forkJoin.ts","../lib/node_modules/src/add/observable/from.ts","../lib/node_modules/src/observable/FromEventObservable.ts","../lib/node_modules/src/observable/fromEvent.ts","../lib/node_modules/src/add/observable/fromEvent.ts","../lib/node_modules/src/observable/FromEventPatternObservable.ts","../lib/node_modules/src/observable/fromEventPattern.ts","../lib/node_modules/src/add/observable/fromEventPattern.ts","../lib/node_modules/src/observable/fromPromise.ts","../lib/node_modules/src/add/observable/fromPromise.ts","../lib/node_modules/src/observable/GenerateObservable.ts","../lib/node_modules/src/observable/generate.ts","../lib/node_modules/src/add/observable/generate.ts","../lib/node_modules/src/observable/IfObservable.ts","../lib/node_modules/src/observable/if.ts","../lib/node_modules/src/add/observable/if.ts","../lib/node_modules/src/util/isNumeric.ts","../lib/node_modules/src/scheduler/Action.ts","../lib/node_modules/src/scheduler/AsyncAction.ts","../lib/node_modules/src/Scheduler.ts","../lib/node_modules/src/scheduler/AsyncScheduler.ts","../lib/node_modules/src/scheduler/async.ts","../lib/node_modules/src/observable/IntervalObservable.ts","../lib/node_modules/src/observable/interval.ts","../lib/node_modules/src/add/observable/interval.ts","../lib/node_modules/src/operator/merge.ts","../lib/node_modules/src/observable/merge.ts","../lib/node_modules/src/add/observable/merge.ts","../lib/node_modules/src/observable/race.ts","../lib/node_modules/src/add/observable/race.ts","../lib/node_modules/src/observable/NeverObservable.ts","../lib/node_modules/src/observable/never.ts","../lib/node_modules/src/add/observable/never.ts","../lib/node_modules/src/add/observable/of.ts","../lib/node_modules/src/operators/onErrorResumeNext.ts","../lib/node_modules/src/observable/onErrorResumeNext.ts","../lib/node_modules/src/add/observable/onErrorResumeNext.ts","../lib/node_modules/src/observable/pairs.ts","../lib/node_modules/src/add/observable/pairs.ts","../lib/node_modules/src/observable/RangeObservable.ts","../lib/node_modules/src/observable/range.ts","../lib/node_modules/src/add/observable/range.ts","../lib/node_modules/src/observable/UsingObservable.ts","../lib/node_modules/src/observable/using.ts","../lib/node_modules/src/add/observable/using.ts","../lib/node_modules/src/observable/ErrorObservable.ts","../lib/node_modules/src/observable/throw.ts","../lib/node_modules/src/add/observable/throw.ts","../lib/node_modules/src/util/isDate.ts","../lib/node_modules/src/observable/TimerObservable.ts","../lib/node_modules/src/observable/timer.ts","../lib/node_modules/src/add/observable/timer.ts","../lib/node_modules/src/observable/zip.ts","../lib/node_modules/src/add/observable/zip.ts","../lib/node_modules/src/operators/map.ts","../lib/node_modules/src/observable/dom/ajax.ts","../lib/node_modules/src/add/observable/dom/ajax.ts","../lib/node_modules/src/scheduler/QueueAction.ts","../lib/node_modules/src/scheduler/queue.ts","../lib/node_modules/src/scheduler/QueueScheduler.ts","../lib/node_modules/src/ReplaySubject.ts","../lib/node_modules/src/observable/dom/WebSocketSubject.ts","../lib/node_modules/src/observable/dom/webSocket.ts","../lib/node_modules/src/add/observable/dom/webSocket.ts","../lib/node_modules/src/operators/buffer.ts","../lib/node_modules/src/operator/buffer.ts","../lib/node_modules/src/add/operator/buffer.ts","../lib/node_modules/src/operators/bufferCount.ts","../lib/node_modules/src/operator/bufferCount.ts","../lib/node_modules/src/add/operator/bufferCount.ts","../lib/node_modules/src/operator/bufferTime.ts","../lib/node_modules/src/add/operator/bufferTime.ts","../lib/node_modules/src/operators/bufferToggle.ts","../lib/node_modules/src/operator/bufferToggle.ts","../lib/node_modules/src/add/operator/bufferToggle.ts","../lib/node_modules/src/operators/bufferWhen.ts","../lib/node_modules/src/operator/bufferWhen.ts","../lib/node_modules/src/add/operator/bufferWhen.ts","../lib/node_modules/src/operators/catchError.ts","../lib/node_modules/src/operator/catch.ts","../lib/node_modules/src/add/operator/catch.ts","../lib/node_modules/src/operators/combineAll.ts","../lib/node_modules/src/operator/combineAll.ts","../lib/node_modules/src/add/operator/combineAll.ts","../lib/node_modules/src/operator/combineLatest.ts","../lib/node_modules/src/add/operator/combineLatest.ts","../lib/node_modules/src/operators/concat.ts","../lib/node_modules/src/operator/concat.ts","../lib/node_modules/src/add/operator/concat.ts","../lib/node_modules/src/operator/concatAll.ts","../lib/node_modules/src/add/operator/concatAll.ts","../lib/node_modules/src/operators/concatMap.ts","../lib/node_modules/src/operator/concatMap.ts","../lib/node_modules/src/add/operator/concatMap.ts","../lib/node_modules/src/operators/concatMapTo.ts","../lib/node_modules/src/operator/concatMapTo.ts","../lib/node_modules/src/add/operator/concatMapTo.ts","../lib/node_modules/src/operators/count.ts","../lib/node_modules/src/operator/count.ts","../lib/node_modules/src/add/operator/count.ts","../lib/node_modules/src/operators/dematerialize.ts","../lib/node_modules/src/operator/dematerialize.ts","../lib/node_modules/src/add/operator/dematerialize.ts","../lib/node_modules/src/operators/debounce.ts","../lib/node_modules/src/operator/debounce.ts","../lib/node_modules/src/add/operator/debounce.ts","../lib/node_modules/src/operator/debounceTime.ts","../lib/node_modules/src/add/operator/debounceTime.ts","../lib/node_modules/src/operators/defaultIfEmpty.ts","../lib/node_modules/src/operator/defaultIfEmpty.ts","../lib/node_modules/src/add/operator/defaultIfEmpty.ts","../lib/node_modules/src/operators/delay.ts","../lib/node_modules/src/operator/delay.ts","../lib/node_modules/src/add/operator/delay.ts","../lib/node_modules/src/operators/delayWhen.ts","../lib/node_modules/src/operator/delayWhen.ts","../lib/node_modules/src/add/operator/delayWhen.ts","../lib/node_modules/src/operators/distinct.ts","../lib/node_modules/src/operator/distinct.ts","../lib/node_modules/src/add/operator/distinct.ts","../lib/node_modules/src/operators/distinctUntilChanged.ts","../lib/node_modules/src/operator/distinctUntilChanged.ts","../lib/node_modules/src/add/operator/distinctUntilChanged.ts","../lib/node_modules/src/operators/distinctUntilKeyChanged.ts","../lib/node_modules/src/operator/distinctUntilKeyChanged.ts","../lib/node_modules/src/add/operator/distinctUntilKeyChanged.ts","../lib/node_modules/src/operators/tap.ts","../lib/node_modules/src/operator/do.ts","../lib/node_modules/src/add/operator/do.ts","../lib/node_modules/src/operators/exhaust.ts","../lib/node_modules/src/operator/exhaust.ts","../lib/node_modules/src/add/operator/exhaust.ts","../lib/node_modules/src/operators/exhaustMap.ts","../lib/node_modules/src/operator/exhaustMap.ts","../lib/node_modules/src/add/operator/exhaustMap.ts","../lib/node_modules/src/operators/expand.ts","../lib/node_modules/src/operator/expand.ts","../lib/node_modules/src/add/operator/expand.ts","../lib/node_modules/src/util/ArgumentOutOfRangeError.ts","../lib/node_modules/src/operators/elementAt.ts","../lib/node_modules/src/operator/elementAt.ts","../lib/node_modules/src/add/operator/elementAt.ts","../lib/node_modules/src/operators/filter.ts","../lib/node_modules/src/operator/filter.ts","../lib/node_modules/src/add/operator/filter.ts","../lib/node_modules/src/operators/finalize.ts","../lib/node_modules/src/operator/finally.ts","../lib/node_modules/src/add/operator/finally.ts","../lib/node_modules/src/operators/find.ts","../lib/node_modules/src/operator/find.ts","../lib/node_modules/src/add/operator/find.ts","../lib/node_modules/src/operators/findIndex.ts","../lib/node_modules/src/operator/findIndex.ts","../lib/node_modules/src/add/operator/findIndex.ts","../lib/node_modules/src/util/EmptyError.ts","../lib/node_modules/src/operators/first.ts","../lib/node_modules/src/operator/first.ts","../lib/node_modules/src/add/operator/first.ts","../lib/node_modules/src/util/MapPolyfill.ts","../lib/node_modules/src/util/Map.ts","../lib/node_modules/src/util/FastMap.ts","../lib/node_modules/src/operators/groupBy.ts","../lib/node_modules/src/operator/groupBy.ts","../lib/node_modules/src/add/operator/groupBy.ts","../lib/node_modules/src/operators/ignoreElements.ts","../lib/node_modules/src/operator/ignoreElements.ts","../lib/node_modules/src/add/operator/ignoreElements.ts","../lib/node_modules/src/operators/isEmpty.ts","../lib/node_modules/src/operator/isEmpty.ts","../lib/node_modules/src/add/operator/isEmpty.ts","../lib/node_modules/src/operators/audit.ts","../lib/node_modules/src/operator/audit.ts","../lib/node_modules/src/add/operator/audit.ts","../lib/node_modules/src/operators/auditTime.ts","../lib/node_modules/src/operator/auditTime.ts","../lib/node_modules/src/add/operator/auditTime.ts","../lib/node_modules/src/operators/last.ts","../lib/node_modules/src/operator/last.ts","../lib/node_modules/src/add/operator/last.ts","../lib/node_modules/src/operator/let.ts","../lib/node_modules/src/add/operator/let.ts","../lib/node_modules/src/operators/every.ts","../lib/node_modules/src/operator/every.ts","../lib/node_modules/src/add/operator/every.ts","../lib/node_modules/src/operator/map.ts","../lib/node_modules/src/add/operator/map.ts","../lib/node_modules/src/operators/mapTo.ts","../lib/node_modules/src/operator/mapTo.ts","../lib/node_modules/src/add/operator/mapTo.ts","../lib/node_modules/src/operators/materialize.ts","../lib/node_modules/src/operator/materialize.ts","../lib/node_modules/src/add/operator/materialize.ts","../lib/node_modules/src/operators/scan.ts","../lib/node_modules/src/operators/takeLast.ts","../lib/node_modules/src/operators/reduce.ts","../lib/node_modules/src/operators/max.ts","../lib/node_modules/src/operator/max.ts","../lib/node_modules/src/add/operator/max.ts","../lib/node_modules/src/add/operator/merge.ts","../lib/node_modules/src/operator/mergeAll.ts","../lib/node_modules/src/add/operator/mergeAll.ts","../lib/node_modules/src/operator/mergeMap.ts","../lib/node_modules/src/add/operator/mergeMap.ts","../lib/node_modules/src/operators/mergeMapTo.ts","../lib/node_modules/src/operator/mergeMapTo.ts","../lib/node_modules/src/add/operator/mergeMapTo.ts","../lib/node_modules/src/operators/mergeScan.ts","../lib/node_modules/src/operator/mergeScan.ts","../lib/node_modules/src/add/operator/mergeScan.ts","../lib/node_modules/src/operators/min.ts","../lib/node_modules/src/operator/min.ts","../lib/node_modules/src/add/operator/min.ts","../lib/node_modules/src/operators/refCount.ts","../lib/node_modules/src/observable/ConnectableObservable.ts","../lib/node_modules/src/operators/multicast.ts","../lib/node_modules/src/operator/multicast.ts","../lib/node_modules/src/add/operator/multicast.ts","../lib/node_modules/src/operator/observeOn.ts","../lib/node_modules/src/add/operator/observeOn.ts","../lib/node_modules/src/operator/onErrorResumeNext.ts","../lib/node_modules/src/add/operator/onErrorResumeNext.ts","../lib/node_modules/src/operators/pairwise.ts","../lib/node_modules/src/operator/pairwise.ts","../lib/node_modules/src/add/operator/pairwise.ts","../lib/node_modules/src/util/not.ts","../lib/node_modules/src/operators/partition.ts","../lib/node_modules/src/operator/partition.ts","../lib/node_modules/src/add/operator/partition.ts","../lib/node_modules/src/operators/pluck.ts","../lib/node_modules/src/operator/pluck.ts","../lib/node_modules/src/add/operator/pluck.ts","../lib/node_modules/src/operators/publish.ts","../lib/node_modules/src/operator/publish.ts","../lib/node_modules/src/add/operator/publish.ts","../lib/node_modules/src/BehaviorSubject.ts","../lib/node_modules/src/operators/publishBehavior.ts","../lib/node_modules/src/operator/publishBehavior.ts","../lib/node_modules/src/add/operator/publishBehavior.ts","../lib/node_modules/src/operators/publishReplay.ts","../lib/node_modules/src/operator/publishReplay.ts","../lib/node_modules/src/add/operator/publishReplay.ts","../lib/node_modules/src/operators/publishLast.ts","../lib/node_modules/src/operator/publishLast.ts","../lib/node_modules/src/add/operator/publishLast.ts","../lib/node_modules/src/operators/race.ts","../lib/node_modules/src/operator/race.ts","../lib/node_modules/src/add/operator/race.ts","../lib/node_modules/src/operator/reduce.ts","../lib/node_modules/src/add/operator/reduce.ts","../lib/node_modules/src/operators/repeat.ts","../lib/node_modules/src/operator/repeat.ts","../lib/node_modules/src/add/operator/repeat.ts","../lib/node_modules/src/operators/repeatWhen.ts","../lib/node_modules/src/operator/repeatWhen.ts","../lib/node_modules/src/add/operator/repeatWhen.ts","../lib/node_modules/src/operators/retry.ts","../lib/node_modules/src/operator/retry.ts","../lib/node_modules/src/add/operator/retry.ts","../lib/node_modules/src/operators/retryWhen.ts","../lib/node_modules/src/operator/retryWhen.ts","../lib/node_modules/src/add/operator/retryWhen.ts","../lib/node_modules/src/operators/sample.ts","../lib/node_modules/src/operator/sample.ts","../lib/node_modules/src/add/operator/sample.ts","../lib/node_modules/src/operator/sampleTime.ts","../lib/node_modules/src/add/operator/sampleTime.ts","../lib/node_modules/src/operator/scan.ts","../lib/node_modules/src/add/operator/scan.ts","../lib/node_modules/src/operators/sequenceEqual.ts","../lib/node_modules/src/operator/sequenceEqual.ts","../lib/node_modules/src/add/operator/sequenceEqual.ts","../lib/node_modules/src/operator/share.ts","../lib/node_modules/src/add/operator/share.ts","../lib/node_modules/src/operators/shareReplay.ts","../lib/node_modules/src/operator/shareReplay.ts","../lib/node_modules/src/add/operator/shareReplay.ts","../lib/node_modules/src/operators/single.ts","../lib/node_modules/src/operator/single.ts","../lib/node_modules/src/add/operator/single.ts","../lib/node_modules/src/operators/skip.ts","../lib/node_modules/src/operator/skip.ts","../lib/node_modules/src/add/operator/skip.ts","../lib/node_modules/src/operators/skipLast.ts","../lib/node_modules/src/operator/skipLast.ts","../lib/node_modules/src/add/operator/skipLast.ts","../lib/node_modules/src/operators/skipUntil.ts","../lib/node_modules/src/operator/skipUntil.ts","../lib/node_modules/src/add/operator/skipUntil.ts","../lib/node_modules/src/operators/skipWhile.ts","../lib/node_modules/src/operator/skipWhile.ts","../lib/node_modules/src/add/operator/skipWhile.ts","../lib/node_modules/src/operators/startWith.ts","../lib/node_modules/src/operator/startWith.ts","../lib/node_modules/src/add/operator/startWith.ts","../lib/node_modules/src/util/Immediate.ts","../lib/node_modules/src/scheduler/AsapAction.ts","../lib/node_modules/src/scheduler/asap.ts","../lib/node_modules/src/scheduler/AsapScheduler.ts","../lib/node_modules/src/observable/SubscribeOnObservable.ts","../lib/node_modules/src/operators/subscribeOn.ts","../lib/node_modules/src/operator/subscribeOn.ts","../lib/node_modules/src/add/operator/subscribeOn.ts","../lib/node_modules/src/operators/switchMap.ts","../lib/node_modules/src/operators/switchAll.ts","../lib/node_modules/src/operator/switch.ts","../lib/node_modules/src/add/operator/switch.ts","../lib/node_modules/src/operator/switchMap.ts","../lib/node_modules/src/add/operator/switchMap.ts","../lib/node_modules/src/operators/switchMapTo.ts","../lib/node_modules/src/operator/switchMapTo.ts","../lib/node_modules/src/add/operator/switchMapTo.ts","../lib/node_modules/src/operators/take.ts","../lib/node_modules/src/operator/take.ts","../lib/node_modules/src/add/operator/take.ts","../lib/node_modules/src/operator/takeLast.ts","../lib/node_modules/src/add/operator/takeLast.ts","../lib/node_modules/src/operators/takeUntil.ts","../lib/node_modules/src/operator/takeUntil.ts","../lib/node_modules/src/add/operator/takeUntil.ts","../lib/node_modules/src/operators/takeWhile.ts","../lib/node_modules/src/operator/takeWhile.ts","../lib/node_modules/src/add/operator/takeWhile.ts","../lib/node_modules/src/operators/throttle.ts","../lib/node_modules/src/operator/throttle.ts","../lib/node_modules/src/add/operator/throttle.ts","../lib/node_modules/src/operator/throttleTime.ts","../lib/node_modules/src/add/operator/throttleTime.ts","../lib/node_modules/src/operators/timeInterval.ts","../lib/node_modules/src/operator/timeInterval.ts","../lib/node_modules/src/add/operator/timeInterval.ts","../lib/node_modules/src/util/TimeoutError.ts","../lib/node_modules/src/operators/timeout.ts","../lib/node_modules/src/operator/timeout.ts","../lib/node_modules/src/add/operator/timeout.ts","../lib/node_modules/src/operators/timeoutWith.ts","../lib/node_modules/src/operator/timeoutWith.ts","../lib/node_modules/src/add/operator/timeoutWith.ts","../lib/node_modules/src/operators/timestamp.ts","../lib/node_modules/src/operator/timestamp.ts","../lib/node_modules/src/add/operator/timestamp.ts","../lib/node_modules/src/operator/toArray.ts","../lib/node_modules/src/add/operator/toArray.ts","../lib/node_modules/src/operators/window.ts","../lib/node_modules/src/operator/window.ts","../lib/node_modules/src/add/operator/window.ts","../lib/node_modules/src/operators/windowCount.ts","../lib/node_modules/src/operator/windowCount.ts","../lib/node_modules/src/add/operator/windowCount.ts","../lib/node_modules/src/operator/windowTime.ts","../lib/node_modules/src/add/operator/windowTime.ts","../lib/node_modules/src/operators/windowToggle.ts","../lib/node_modules/src/operator/windowToggle.ts","../lib/node_modules/src/add/operator/windowToggle.ts","../lib/node_modules/src/operators/windowWhen.ts","../lib/node_modules/src/operator/windowWhen.ts","../lib/node_modules/src/add/operator/windowWhen.ts","../lib/node_modules/src/operators/withLatestFrom.ts","../lib/node_modules/src/operator/withLatestFrom.ts","../lib/node_modules/src/add/operator/withLatestFrom.ts","../lib/node_modules/src/operator/zip.ts","../lib/node_modules/src/add/operator/zip.ts","../lib/node_modules/src/operators/zipAll.ts","../lib/node_modules/src/operator/zipAll.ts","../lib/node_modules/src/add/operator/zipAll.ts","../lib/node_modules/src/testing/SubscriptionLog.ts","../lib/node_modules/src/testing/SubscriptionLoggable.ts","../lib/node_modules/src/util/applyMixins.ts","../lib/node_modules/src/testing/ColdObservable.ts","../lib/node_modules/src/testing/HotObservable.ts","../lib/node_modules/src/scheduler/VirtualTimeScheduler.ts","../lib/node_modules/src/testing/TestScheduler.ts","../lib/node_modules/src/util/AnimationFrame.ts","../lib/node_modules/src/scheduler/AnimationFrameAction.ts","../lib/node_modules/src/scheduler/animationFrame.ts","../lib/node_modules/src/scheduler/AnimationFrameScheduler.ts","../lib/tmp/module/auth.configuration.ts","../lib/tmp/module/oidc.security.storage.ts","../lib/tmp/module/oidc.security.common.ts","../lib/tmp/module/oidc.security.validation.ts","../lib/tmp/module/auth.well-known-endpoints.ts","../lib/tmp/module/oidc.security.check-session.ts","../lib/tmp/module/oidc.security.silent-renew.ts","../lib/tmp/module/oidc.security.user-service.ts","../lib/tmp/module/oidc.security.service.ts","../lib/tmp/index.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments, it will return an Observable. If `func` function\n   * calls its callback with one argument, the Observable will emit that value.\n   * If on the other hand callback is called with multiple values, resulting\n   * Observable will emit an array with these arguments.\n   *\n   * It is very important to remember, that input function `func` is not called\n   * when output function is, but rather when Observable returned by output\n   * function is subscribed. This means if `func` makes AJAX request, that request\n   * will be made every time someone subscribes to resulting Observable, but not before.\n   *\n   * Optionally, selector function can be passed to `bindObservable`. That function\n   * takes the same arguments as callback, and returns value\n   * that will be emitted by Observable instead of callback parameters themselves.\n   * Even though by default multiple arguments passed to callback appear in the stream as array,\n   * selector function will be called with arguments directly, just as callback would.\n   * This means you can imagine default selector (when one is not provided explicitly)\n   * as function that aggregates all its arguments into array, or simply returns first argument,\n   * if there is only one.\n   *\n   * Last optional parameter - {@link Scheduler} - can be used to control when call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default subscription to Observable calls `func`\n   * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,\n   * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler\n   * and call `subscribe` on output Observable, all function calls that are currently executing,\n   * will end before `func` is invoked.\n   *\n   * When it comes to emitting results passed to callback, by default they are emitted\n   * immediately after `func` invokes callback. In particular, if callback is called synchronously,\n   * then subscription to resulting Observable will call `next` function synchronously as well.\n   * If you want to defer that call, using `Scheduler.async` will, again, do the job.\n   * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`\n   * always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that Observable created by output function will always emit only one value\n   * and then complete right after. Even if `func` calls callback multiple times, values from\n   * second and following calls will never appear in the stream. If you need to\n   * listen for multiple calls, you probably want to use {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property), that context will be set\n   * to the same context that output function has at call time. In particular, if `func`\n   * is called as method of some object, in order to preserve proper behaviour,\n   * it is recommended to set context of output function to that object as well,\n   * provided `func` is not already bound.\n   *\n   * If input function calls its callback in \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions without any difference and error parameter\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive array of arguments passed to callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { mergeAll } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          return JSON.parse(xhr.responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n        return  ('response' in xhr) ? xhr.response : xhr.responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { mergeStatic } from '../operators/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","/**\n * Provides a single interface for the DefaultConfiguration, OpenIDImplicitFlowConfiguration and AuthConfiguration to be used in other modules\n * \n * @file auth.configuration\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable } from '@angular/core';\n\n/**\n * Used to describe DefaultConfiguration\n * \n * @export\n * @class DefaultConfiguration\n * @property {string} stsServer\n * @property {string} redirect_url\n * @property {string} client_id\n * @property {string} response_type\n * @property {string} resource\n * @property {string} scope\n * @property {string} post_logout_redirect_uri\n * @property {boolean} start_checksession\n * @property {boolean} silent_renew\n * @property {string} startup_route\n * @property {string} forbidden_route\n * @property {string} unauthorized_route\n * @property {boolean} auto_userinfo\n * @property {boolean} log_console_warning_active\n * @property {boolean} log_console_debug_active\n * @property {number} max_id_token_iat_offset_allowed_in_seconds\n * @property {boolean} override_well_known_configuration\n * @property {string} override_well_known_configuration_url\n * @property {any} storage\n */\nexport class DefaultConfiguration {\n  stsServer = 'https://localhost:44318';\n  redirect_url = 'https://localhost:44311';\n  // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified by the iss (issuer) Claim as an audience.\n  // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences not trusted by the Client.\n  client_id = 'angularclient';\n  response_type = 'id_token token';\n  // For some oidc, we require resource identifier to be provided along with the request.\n  resource = '';\n  scope = 'openid email profile';\n  post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\n  start_checksession = false;\n  silent_renew = true;\n  startup_route = '/dataeventrecords';\n  // HTTP 403\n  forbidden_route = '/forbidden';\n  // HTTP 401\n  unauthorized_route = '/unauthorized';\n  auto_userinfo = true;\n  log_console_warning_active = true;\n  log_console_debug_active = false;\n\n\n  // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n  // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n  max_id_token_iat_offset_allowed_in_seconds = 3;\n  override_well_known_configuration = false;\n  override_well_known_configuration_url = 'https://localhost:44386/wellknownconfiguration.json';\n\n  storage = typeof Storage !== 'undefined' ? sessionStorage : null;\n}\n\n/**\n * Used to describe OpenIDImplicitFlowConfiguration\n * \n * @export\n * @class OpenIDImplicitFlowConfiguration\n * @property {string} stsServer\n * @property {string} redirect_url\n * @property {string} client_id\n * @property {string} response_type\n * @property {string} resource\n * @property {string} scope\n * @property {string} post_logout_redirect_uri\n * @property {string} start_checksession\n * @property {string} silent_renew\n * @property {string} startup_route\n * @property {string} forbidden_route\n * @property {string} unauthorized_route\n * @property {string} auto_userinfo\n * @property {string} log_console_warning_active\n * @property {string} log_console_debug_active\n * @property {string} max_id_token_iat_offset_allowed_in_seconds\n * @property {string} override_well_known_configuration\n * @property {string} override_well_known_configuration_url\n * @property {string} storage\n */\nexport class OpenIDImplicitFlowConfiguration {\n  stsServer: string;\n  redirect_url: string;\n  client_id: string;\n  response_type: string;\n  resource: string;\n  scope: string;\n  post_logout_redirect_uri: string;\n  start_checksession: boolean;\n  silent_renew: boolean;\n  startup_route: string;\n  forbidden_route: string;\n  unauthorized_route: string;\n  auto_userinfo: boolean;\n  log_console_warning_active: boolean;\n  log_console_debug_active: boolean;\n  max_id_token_iat_offset_allowed_in_seconds: number;\n  override_well_known_configuration: boolean;\n  override_well_known_configuration_url: string;\n  storage: any;\n}\n\n/**\n * The Auth Configuration\n * \n * @export\n * @class AuthConfiguration\n */\n@Injectable()\nexport class AuthConfiguration {\n\n  /**\n   * Used to store openIDImplicitFlowConfiguration\n   * \n   * @name openIDImplicitFlowConfiguration\n   * @private\n   * @type {OpenIDImplicitFlowConfiguration}\n   * @memberof AuthConfiguration\n   */\n  private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration;\n\n  /**\n   * Used to get stsServer\n   * \n   * @method stsServer\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get stsServer(): string {\n    return this.openIDImplicitFlowConfiguration.stsServer || this.defaultConfig.stsServer;\n  }\n\n  /**\n   * Used to get redirect_url\n   * \n   * @method redirect_url\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get redirect_url(): string {\n    return this.openIDImplicitFlowConfiguration.redirect_url || this.defaultConfig.redirect_url;\n  }\n\n  /**\n   * Used to get client_id\n   * \n   * @method client_id\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get client_id(): string {\n    return this.openIDImplicitFlowConfiguration.client_id || this.defaultConfig.client_id;\n  }\n\n  /**\n   * Used to get response_type\n   * \n   * @method response_type\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get response_type(): string {\n    return this.openIDImplicitFlowConfiguration.response_type || this.defaultConfig.response_type;\n  }\n\n  /**\n   * Used to get resource\n   * \n   * @method resource\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get resource(): string {\n    return this.openIDImplicitFlowConfiguration.resource || this.defaultConfig.resource;\n  }\n\n  /**\n   * Used to get scope\n   * \n   * @method scope\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get scope(): string {\n    return this.openIDImplicitFlowConfiguration.scope || this.defaultConfig.scope;\n  }\n\n  /**\n   * Used to get post_logout_redirect_uri\n   * \n   * @method post_logout_redirect_uri\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get post_logout_redirect_uri(): string {\n    return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri || this.defaultConfig.post_logout_redirect_uri;\n  }\n\n  /**\n   * Used to get start_checksession\n   * \n   * @method start_checksession\n   * @readonly\n   * @type {boolean}\n   * @memberof AuthConfiguration\n   */\n  get start_checksession(): boolean {\n    return this.openIDImplicitFlowConfiguration.start_checksession !== undefined ? this.openIDImplicitFlowConfiguration.start_checksession : this.defaultConfig.start_checksession;\n  }\n\n  /**\n   * Used to get silent_renew\n   * \n   * @method silent_renew\n   * @readonly\n   * @type {boolean}\n   * @memberof AuthConfiguration\n   */\n  get silent_renew(): boolean {\n    return this.openIDImplicitFlowConfiguration.silent_renew !== undefined ? this.openIDImplicitFlowConfiguration.silent_renew : this.defaultConfig.silent_renew;\n  }\n\n  /**\n   * Used to get startup_route\n   * \n   * @method startup_route\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get startup_route(): string {\n    return this.openIDImplicitFlowConfiguration.startup_route || this.defaultConfig.startup_route;\n  }\n\n  /**\n   * Used to get forbidden_route\n   * \n   * @method forbidden_route\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get forbidden_route(): string {\n    return this.openIDImplicitFlowConfiguration.forbidden_route || this.defaultConfig.forbidden_route;\n  }\n\n  /**\n   * Used to get unauthorized_route\n   * \n   * @method unauthorized_route\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get unauthorized_route(): string {\n    return this.openIDImplicitFlowConfiguration.unauthorized_route || this.defaultConfig.unauthorized_route;\n  }\n\n  /**\n   * Used to get auto_userinfo\n   * \n   * @method auto_userinfo\n   * @readonly\n   * @type {boolean}\n   * @memberof AuthConfiguration\n   */\n  get auto_userinfo(): boolean {\n    return this.openIDImplicitFlowConfiguration.auto_userinfo !== undefined ? this.openIDImplicitFlowConfiguration.auto_userinfo : this.defaultConfig.auto_userinfo;\n  }\n\n  /**\n   * Used to get log_console_warning_active\n   * \n   * @method log_console_warning_active\n   * @readonly\n   * @type {boolean}\n   * @memberof AuthConfiguration\n   */\n  get log_console_warning_active(): boolean {\n    return this.openIDImplicitFlowConfiguration.log_console_warning_active !== undefined ? this.openIDImplicitFlowConfiguration.log_console_warning_active : this.defaultConfig.log_console_warning_active;\n  }\n\n  /**\n   * Used to get log_console_debug_active\n   * \n   * @method log_console_debug_active\n   * @readonly\n   * @type {boolean}\n   * @memberof AuthConfiguration\n   */\n  get log_console_debug_active(): boolean {\n    return this.openIDImplicitFlowConfiguration.log_console_debug_active !== undefined ? this.openIDImplicitFlowConfiguration.log_console_debug_active : this.defaultConfig.log_console_debug_active;\n  }\n\n  /**\n   * Used to get max_id_token_iat_offset_allowed_in_seconds\n   * \n   * @method max_id_token_iat_offset_allowed_in_seconds\n   * @readonly\n   * @type {number}\n   * @memberof AuthConfiguration\n   */\n  get max_id_token_iat_offset_allowed_in_seconds(): number {\n    return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds || this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\n  }\n\n  /**\n   * Used to get override_well_known_configuration\n   * \n   * @method override_well_known_configuration\n   * @readonly\n   * @type {boolean}\n   * @memberof AuthConfiguration\n   */\n  get override_well_known_configuration(): boolean {\n    return this.openIDImplicitFlowConfiguration.override_well_known_configuration !== undefined ? this.openIDImplicitFlowConfiguration.override_well_known_configuration : this.defaultConfig.override_well_known_configuration;\n  }\n\n  /**\n   * Used to get override_well_known_configuration_url\n   * \n   * @method override_well_known_configuration_url\n   * @readonly\n   * @type {string}\n   * @memberof AuthConfiguration\n   */\n  get override_well_known_configuration_url(): string {\n    return this.openIDImplicitFlowConfiguration.override_well_known_configuration_url || this.defaultConfig.override_well_known_configuration_url;\n  }\n\n  /**\n   * Used to get storage\n   * \n   * @method storage\n   * @readonly\n   * @type {any}\n   * @memberof AuthConfiguration\n   */\n  get storage(): any {\n    return this.openIDImplicitFlowConfiguration.storage || this.defaultConfig.storage;\n  }\n\n  /**\n   * Creates an instance of AuthConfiguration.\n   * \n   * @constructor\n   * @param {DefaultConfiguration} defaultConfig \n   * @memberof AuthConfiguration\n   */\n  constructor(private defaultConfig: DefaultConfiguration) { }\n\n  /**\n   * initialize openIDImplicitFlowConfiguration\n   * \n   * @method init\n   * @public\n   * @param {OpenIDImplicitFlowConfiguration} openIDImplicitFlowConfiguration \n   * @memberof AuthConfiguration\n   */\n  public init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\n    this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\n  }\n}\n","/**\n * Provides a single interface for the OidcSecurityStorage and BrowserStorage to be used in other modules\n * \n * @file oidc.security.storage\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable } from '@angular/core';\nimport { AuthConfiguration } from './auth.configuration';\n\n/**\n * Implement this class-interface to create a custom storage.\n * \n * @export\n * @abstract\n * @class OidcSecurityStorage\n * @property {any} read\n * @property {void} write\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n\n  /**\n   * This method must contain the logic to read the storage.\n   * \n   * @name abstract\n   * @public\n   * @param key\n   * @return The value of the given key\n   */\n  public abstract read(key: string): any;\n\n  /**\n   * This method must contain the logic to write the storage.\n   * \n   * @name write\n   * @public\n   * @param key\n   * @param value The value for the given key\n   */\n  public abstract write(key: string, value: any): void;\n\n}\n\n/**\n * Used for Browser Storage\n * \n * @export\n * @class BrowserStorage\n * @implements {OidcSecurityStorage}\n * @property {boolean} hasStorage\n * @method read\n * @method write\n */\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n\n  /**\n   * Used to store hasStorage\n   * \n   * @name hasStorage\n   * @private\n   * @type {boolean}\n   * @memberof BrowserStorage\n   */\n  private hasStorage: boolean;\n\n  /**\n   * Creates an instance of BrowserStorage.\n   * \n   * @constructor\n   * @param {AuthConfiguration} authConfiguration \n   * @memberof BrowserStorage\n   */\n  constructor(private authConfiguration: AuthConfiguration) {\n    this.hasStorage = typeof Storage !== 'undefined';\n  }\n\n  /**\n   * Used to read item from storage\n   * \n   * @method read\n   * @public\n   * @param {string} key \n   * @returns {any} \n   * @memberof BrowserStorage\n   */\n  public read(key: string): any {\n    if (this.hasStorage) {\n      return JSON.parse(this.authConfiguration.storage.getItem(key));\n    }\n\n    return;\n  }\n\n  /**\n   * Used to write to storage\n   * \n   * @method write\n   * @public\n   * @param {string} key \n   * @param {any} value \n   * @memberof BrowserStorage\n   */\n  public write(key: string, value: any): void {\n    if (this.hasStorage) {\n      this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n    }\n  }\n\n}\n","/**\n * Provides a single interface for the OidcSecurityCommon to be used in other modules\n * \n * @file oidc.security.common\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable } from '@angular/core';\nimport { AuthConfiguration } from './auth.configuration';\nimport { OidcSecurityStorage } from './oidc.security.storage';\n\n/**\n * THis is for oidc security common\n * \n * @export\n * @class OidcSecurityCommon\n * @property {string} storage_auth_result\n * @property {string} storage_access_token\n * @property {string} storage_id_token\n * @property {string} storage_is_authorized\n * @property {string} storage_user_data\n * @property {string} storage_auth_nonce\n * @property {string} storage_auth_state_control\n * @property {string} storage_well_known_endpoints\n * @property {string} storage_session_state\n * @property {string} storage_silent_renew_running\n * @property {string} storage_custom_request_params\n * @method setupModule\n * @method retrieve\n * @method store\n * @method resetStorageData\n * @method getAccessToken\n * @method getAccessToken\n * @method logError\n * @method logWarning\n * @method logDebug\n */\n@Injectable()\nexport class OidcSecurityCommon {\n\n  /**\n   * Used to store storage_auth_result\n   * \n   * @name storage_auth_result\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_auth_result: string = 'authorizationResult';\n\n  /**\n   * Used to store storage_access_token\n   * \n   * @name storage_access_token\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_access_token: string = 'authorizationData';\n\n  /**\n   * Used to store storage_id_token\n   * \n   * @name storage_id_token\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_id_token: string = 'authorizationDataIdToken';\n\n  /**\n   * Used to store storage_is_authorized\n   * \n   * @name storage_is_authorized\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_is_authorized: string = '_isAuthorized';\n\n  /**\n   * Used to store storage_user_data\n   * \n   * @name storage_user_data\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_user_data: string = 'userData';\n\n  /**\n   * Used to store storage_auth_nonce\n   * \n   * @name storage_auth_nonce\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_auth_nonce: string = 'authNonce';\n\n  /**\n   * Used to store storage_auth_state_control\n   * \n   * @name storage_auth_state_control\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_auth_state_control: string = 'authStateControl';\n\n  /**\n   * Used to store storage_well_known_endpoints\n   * \n   * @name storage_well_known_endpoints\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_well_known_endpoints: string = 'wellknownendpoints';\n\n  /**\n   * Used to store storage_session_state\n   * \n   * @name storage_session_state\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_session_state: string = 'session_state';\n\n  /**\n   * Used to store storage_silent_renew_running\n   * \n   * @name storage_silent_renew_running\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_silent_renew_running: string = 'storage_silent_renew_running';\n\n  /**\n   * Used to store storage_custom_request_params\n   * \n   * @name storage_custom_request_params\n   * @type {string}\n   * @memberof OidcSecurityCommon\n   */\n  storage_custom_request_params: string = 'storage_custom_request_params';\n\n  /**\n   * Creates an instance of OidcSecurityCommon.\n   * \n   * @constructor\n   * @param {AuthConfiguration} authConfiguration \n   * @param {OidcSecurityStorage} oidcSecurityStorage \n   * @memberof OidcSecurityCommon\n   */\n  constructor(\n    private authConfiguration: AuthConfiguration, \n    private oidcSecurityStorage: OidcSecurityStorage\n  ) {}\n\n  /**\n   * Used to setupModule \n   * \n   * @method setupModule \n   * @memberof OidcSecurityCommon\n   */\n  setupModule() { }\n\n  /**\n   * Used for retrieviing value in storage \n   * \n   * @method retrieve\n   * @param {string} key \n   * @returns {any} \n   * @memberof OidcSecurityCommon\n   */\n  retrieve(key: string): any {\n    return this.oidcSecurityStorage.read(key);\n  }\n\n  /**\n   * Used to storing valud in storage\n   * \n   * @method store\n   * @param {string} key \n   * @param {any} value \n   * @memberof OidcSecurityCommon\n   */\n  store(key: string, value: any) {\n    this.oidcSecurityStorage.write(key, value);\n  }\n\n  /**\n   * Used to reset storage data \n   * \n   * @method resetStorageData\n   * @param {boolean} isRenewProcess \n   * @memberof OidcSecurityCommon\n   */\n  resetStorageData(isRenewProcess: boolean) {\n    if (!isRenewProcess) {\n      this.store(this.storage_auth_result, '');\n      this.store(this.storage_session_state, '');\n      this.store(this.storage_silent_renew_running, '');\n      this.store(this.storage_is_authorized, false);\n      this.store(this.storage_access_token, '');\n      this.store(this.storage_id_token, '');\n      this.store(this.storage_user_data, '');\n    }\n  }\n\n  /**\n   * Used to get Access Token \n   * \n   * @method getAccessToken\n   * @returns {any} \n   * @memberof OidcSecurityCommon\n   */\n  getAccessToken(): any {\n    return this.retrieve(this.storage_access_token);\n  }\n\n  /**\n   * Used to get id token \n   * \n   * @method getAccessToken\n   * @returns {any} \n   * @memberof OidcSecurityCommon\n   */\n  getIdToken(): any {\n    return this.retrieve(this.storage_id_token);\n  }\n\n  /**\n   * Used to log error \n   * \n   * @method logError \n   * @param {any} message \n   * @memberof OidcSecurityCommon\n   */\n  logError(message: any) {\n    console.error(message);\n  }\n\n  /**\n   * Used to log warning \n   * \n   * @method logWarning\n   * @param {any} message \n   * @memberof OidcSecurityCommon\n   */\n  logWarning(message: any) {\n    if (this.authConfiguration.log_console_warning_active) {\n      console.warn(message);\n    }\n  }\n\n  /**\n   * Used to log debug \n   * \n   * @method logDebug\n   * @param {any} message \n   * @memberof OidcSecurityCommon\n   */\n  logDebug(message: any) {\n    if (this.authConfiguration.log_console_debug_active) {\n      console.log(message);\n    }\n  }\n\n}\n","/**\n * Provides a single interface for the OidcSecurityValidation to be used in other modules\n * \n * @file oidc.security.validation\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\n\n/**\n * http://openid.net/specs/openid-connect-implicit-1_0.html\n *\n *id_token\n *id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery) MUST exactly match the value of the iss (issuer) Claim.\n *id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences not trusted by the Client.\n *id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n *id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n *id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg Header Parameter of the JOSE Header. The Client MUST use the keys provided by the Issuer.\n *id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0 [OpenID.Core] specification.\n *id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n *id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time, limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n *id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks is Client specific.\n *id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.The meaning and processing of acr Claim Values is out of scope for this document.\n *id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication if it determines too much time has elapsed since the last End- User authentication.\n *\n *Access Token Validation\n *access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA] for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n *access_token C2: Take the left- most half of the hash and base64url- encode it.\n *access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\n * \n * @export\n * @class OidcSecurityValidation\n * @method isTokenExpired\n * @method validate_id_token_exp_not_expired\n * @method validate_required_id_token\n * @method validate_id_token_iat_max_offset\n * @method validate_id_token_nonce\n * @method validate_id_token_iss\n * @method validate_id_token_aud\n * @method validateStateFromHashCallback\n * @method validate_userdata_sub_id_token\n * @method getPayloadFromToken\n * @method getHeaderFromToken\n * @method getSignatureFromToken\n * @method validate_signature_id_token\n * @method config_validate_response_type\n * @method validate_id_token_at_hash\n * @method generate_at_hash\n * @method getTokenExpirationDate\n * @method urlBase64Decode\n */\n@Injectable()\nexport class OidcSecurityValidation {\n\n  /**\n   * Creates an instance of OidcSecurityValidation.\n   * \n   * @constructor\n   * @param {OidcSecurityCommon} oidcSecurityCommon \n   * @memberof OidcSecurityValidation\n   */\n  constructor(\n    private oidcSecurityCommon: OidcSecurityCommon\n  ) {}\n\n\n  /**\n   * id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n   * \n   * @method isTokenExpired\n   * @public\n   * @param {string} token \n   * @param {number} [offsetSeconds] \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n\n    let decoded: any;\n    decoded = this.getPayloadFromToken(token, false);\n\n    return !(this.validate_id_token_exp_not_expired(decoded, offsetSeconds));\n  }\n\n  /**\n   * id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n   * \n   * @method validate_id_token_exp_not_expired\n   * @public\n   * @param {string} decoded_id_token \n   * @param {number} [offsetSeconds] \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\n    const tokenExpirationDate = this.getTokenExpirationDate(decoded_id_token);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (tokenExpirationDate === null) {\n      return false;\n    }\n\n    // Token not expired?\n    return (tokenExpirationDate.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n  }\n  /**\n   * iss\n   * \n   * REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\n   * and optionally, port number and path components and no query or fragment components.\n   * \n   * sub\n   * REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n   * which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n   * It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n   * \n   * aud\n   * REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\n   * It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n   * In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n   * \n   * exp\n   * REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n   * The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n   * Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n   * Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\n   * See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n   * \n   * iat\n   * REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\n   * in UTC until the date/ time.\n   * \n   * @method validate_required_id_token\n   * @public\n   * @param {any} dataIdToken \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_required_id_token(dataIdToken: any): boolean {\n\n    let validated = true;\n    if (!dataIdToken.hasOwnProperty('iss')) {\n      validated = false;\n      this.oidcSecurityCommon.logWarning('iss is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('sub')) {\n      validated = false;\n      this.oidcSecurityCommon.logWarning('sub is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('aud')) {\n      validated = false;\n      this.oidcSecurityCommon.logWarning('aud is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      validated = false;\n      this.oidcSecurityCommon.logWarning('exp is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      validated = false;\n      this.oidcSecurityCommon.logWarning('iat is missing, this is required in the id_token');\n    }\n\n    return validated;\n  }\n\n  /**\n   * id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n   * \n   * limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n   * \n   * @method validate_id_token_iat_max_offset\n   * @public\n   * @param {any} dataIdToken \n   * @param {number} max_offset_allowed_in_seconds \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_id_token_iat_max_offset(dataIdToken: any, max_offset_allowed_in_seconds: number): boolean {\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      return false;\n    }\n\n    const dateTime_iat_id_token = new Date(0);  // The 0 here is the key, which sets the date to the epoch\n    dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\n\n    max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\n\n    if (dateTime_iat_id_token === null) {\n      return false;\n    }\n\n    this.oidcSecurityCommon.logDebug('validate_id_token_iat_max_offset: ' + (new Date().valueOf() - dateTime_iat_id_token.valueOf()) + ' < ' + (max_offset_allowed_in_seconds * 1000));\n    return ((new Date().valueOf() - dateTime_iat_id_token.valueOf()) < (max_offset_allowed_in_seconds * 1000));\n  }\n\n  /**\n   * id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks is Client specific.\n   * \n   * @method validate_id_token_nonce\n   * @public\n   * @param {any} dataIdToken \n   * @param {any} local_nonce \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\n    if (dataIdToken.nonce !== local_nonce) {\n      this.oidcSecurityCommon.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + local_nonce);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery) MUST exactly match the value of the iss (issuer) Claim.\n   * \n   * @method validate_id_token_iss\n   * @public\n   * @param {any} dataIdToken \n   * @param {any} authWellKnownEndpoints_issuer \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\n    if (dataIdToken.iss !== authWellKnownEndpoints_issuer) {\n      this.oidcSecurityCommon.logDebug('Validate_id_token_iss failed, dataIdToken.iss: ' + dataIdToken.iss + ' authWellKnownEndpoints issuer:' + authWellKnownEndpoints_issuer);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified by the iss (issuer) Claim as an audience.\n   * \n   * The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences not trusted by the Client.\n   * \n   * @method validate_id_token_aud\n   * @public\n   * @param {any} dataIdToken \n   * @param {any} aud \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_id_token_aud(dataIdToken: any, aud: any): boolean {\n    if (dataIdToken.aud !== aud) {\n      this.oidcSecurityCommon.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Used to validate state from hash callback\n   * \n   * @method validateStateFromHashCallback\n   * @param {any} state \n   * @param {any} local_state \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validateStateFromHashCallback(state: any, local_state: any): boolean {\n    if (state !== local_state) {\n      this.oidcSecurityCommon.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + local_state);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Used to validate userdate sub id token\n   * \n   * @method validate_userdata_sub_id_token\n   * @param {any} id_token_sub \n   * @param {any} userdata_sub \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_userdata_sub_id_token(id_token_sub: any, userdata_sub: any): boolean {\n    if (id_token_sub !== userdata_sub) {\n      this.oidcSecurityCommon.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + id_token_sub + ' userdata_sub:' + userdata_sub);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Used to get payload from token\n   * \n   * @method getPayloadFromToken\n   * @param {any} token \n   * @param {boolean} encode \n   * @returns \n   * @memberof OidcSecurityValidation\n   */\n  public getPayloadFromToken(token: any, encode: boolean) {\n    let data = {};\n    if (typeof token !== 'undefined') {\n      const encoded = token.split('.')[1];\n      if (encode) {\n        return encoded;\n      }\n      if (encoded !== undefined) {\n        data = JSON.parse(this.urlBase64Decode(encoded));\n      }\n      \n    }\n\n    return data;\n  }\n\n  /**\n   * Used to get header from token\n   * \n   * @method getHeaderFromToken\n   * @param {any} token \n   * @param {boolean} encode \n   * @returns \n   * @memberof OidcSecurityValidation\n   */\n  public getHeaderFromToken(token: any, encode: boolean) {\n    let data = {};\n    if (typeof token !== 'undefined') {\n      const encoded = token.split('.')[0];\n      if (encode) {\n        return encoded;\n      }\n      if (encoded !== undefined) {\n        data = JSON.parse(this.urlBase64Decode(encoded));\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Used to get signature from token\n   * \n   * @method getSignatureFromToken\n   * @param {any} token \n   * @param {boolean} encode \n   * @returns {any} \n   * @memberof OidcSecurityValidation\n   */\n  public getSignatureFromToken(token: any, encode: boolean): any {\n    let data = {};\n    if (typeof token !== 'undefined') {\n      const encoded = token.split('.')[2];\n      if (encode) {\n        return encoded;\n      }\n      if (encoded !== undefined) {\n        console.log(this.urlBase64Decode(encoded));\n        data = JSON.parse(this.urlBase64Decode(encoded));\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg Header Parameter of the JOSE Header. The Client MUST use the keys provided by the Issuer.\n   * \n   * id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0 [OpenID.Core] specification.\n   * \n   * @method validate_signature_id_token\n   * @public\n   * @param {any} id_token \n   * @param {any} jwtkeys \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\n\n    if (!jwtkeys || !jwtkeys.keys) {\n      return false;\n    }\n\n    const header_data = this.getHeaderFromToken(id_token, false);\n\n    const kid = header_data.kid;\n    const alg = header_data.alg;\n\n    if ('RS256' !== alg) {\n      this.oidcSecurityCommon.logWarning('Only RS256 supported');\n      return false;\n    }\n\n    let isValid = false;\n\n    if (!header_data.hasOwnProperty('kid')) {\n    // exactly 1 key in the jwtkeys and no kid in the Jose header\n    // kty\t\"RSA\" use \"sig\"\n      let amountOfMatchingKeys = 0;\n      for (const key of jwtkeys.keys) {\n        if (key.kty === 'RSA' && key.use === 'sig') {\n          amountOfMatchingKeys = amountOfMatchingKeys + 1;\n        }\n      }\n\n      if (amountOfMatchingKeys === 0) {\n        this.oidcSecurityCommon.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n        return false;\n      } else if (amountOfMatchingKeys > 1 ) {\n        this.oidcSecurityCommon.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n        return false;\n      } else {\n        for (const key of jwtkeys.keys) {\n          if (key.kty === 'RSA' && key.use === 'sig') {\n            const publickey = KEYUTIL.getKey(key);\n            isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\n            if (!isValid) {\n              this.oidcSecurityCommon.logWarning('incorrect Signature, validation failed for id_token');\n            }\n            return isValid;\n          }\n        }\n      }\n    } else {\n    // kid in the Jose header of id_token\n      for (const key of jwtkeys.keys) {\n        if (key.kid === kid) {\n          const publickey = KEYUTIL.getKey(key);\n          isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\n          if (!isValid) {\n            this.oidcSecurityCommon.logWarning('incorrect Signature, validation failed for id_token');\n          }\n          return isValid;\n        }\n      }\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Used to config validate response type\n   * \n   * @method config_validate_response_type\n   * @param {string} response_type \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public config_validate_response_type(response_type: string): boolean {\n    if (response_type === 'id_token token' || response_type === 'id_token') {\n      return true;\n    }\n\n    this.oidcSecurityCommon.logWarning('module configure incorrect, invalid response_type:' + response_type);\n    return false;\n  }\n\n  /**\n   * Access Token Validation\n   * \n   * access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA] for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n   * access_token C2: Take the left- most half of the hash and base64url- encode it.\n   * access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\n   * \n   * @method validate_id_token_at_hash\n   * @public\n   * @param {any} access_token \n   * @param {any} at_hash \n   * @returns {boolean} \n   * @memberof OidcSecurityValidation\n   */\n  public validate_id_token_at_hash(access_token: any, at_hash: any): boolean {\n    this.oidcSecurityCommon.logDebug('From the server:' + at_hash);\n    const testdata =  this.generate_at_hash('' + access_token);\n    this.oidcSecurityCommon.logDebug('client validation not decoded:' + testdata);\n    if (testdata === at_hash) {\n      return true; // isValid;\n    } else {\n      const testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\n      this.oidcSecurityCommon.logDebug('-gen access--' + testValue);\n       if (testValue === at_hash) {\n        return true; // isValid\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Used to generate at hash\n   * \n   * @method generate_at_hash\n   * @private\n   * @param {any} access_token \n   * @returns {string} \n   * @memberof OidcSecurityValidation\n   */\n  private generate_at_hash(access_token: any): string {\n    const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\n    const first128bits = hash.substr(0, hash.length / 2);\n    const testdata = hextob64u(first128bits);\n\n    return testdata;\n  }\n\n  /**\n   * Used to get token expiration date\n   * \n   * @method getTokenExpirationDate\n   * @private\n   * @param {any} dataIdToken \n   * @returns {Date} \n   * @memberof OidcSecurityValidation\n   */\n  private getTokenExpirationDate(dataIdToken: any): Date {\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      return new Date();\n    }\n\n    const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    date.setUTCSeconds(dataIdToken.exp);\n\n    return date;\n  }\n\n  /**\n   * Used to decode url base64\n   * \n   * @method urlBase64Decode\n   * @private\n   * @param {string} str \n   * @returns {any} \n   * @memberof OidcSecurityValidation\n   */\n  private urlBase64Decode(str: string): any {\n    if (str !== undefined && str !== null) {\n      let output = str.replace('-', '+').replace('_', '/');\n      switch (output.length % 4) {\n        case 0:\n          break;\n        case 2:\n          output += '==';\n          break;\n        case 3:\n          output += '=';\n          break;\n        default:\n          console.log('Illegal base64url string!');\n          break;\n      }\n  \n      return window.atob(output);\n    }\n  }\n}\n","/**\n * Provides a single interface for the AuthWellKnownEndpoints to be used in other modules\n * \n * @file auth.well-known-endpoints\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable, EventEmitter, Output } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport { AuthConfiguration } from './auth.configuration';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\n/**\n * Endpoints of AuthWellKnown\n * \n * @export\n * @class AuthWellKnownEndpoints\n * @property {EventEmitter<any>} onWellKnownEndpointsLoaded\n * @property {string} issuer\n * @property {string} jwks_uri\n * @property {string} authorization_endpoint\n * @property {string} token_endpoint\n * @property {string} userinfo_endpoint\n * @property {string} end_session_endpoint\n * @property {string} check_session_iframe\n * @property {string} revocation_endpoint\n * @property {string} introspection_endpoint\n * @method setupModule\n * @method getWellKnownEndpoints\n */\n@Injectable()\nexport class AuthWellKnownEndpoints {\n\n  /**\n   * Used to store onWellKnownEndpointsLoaded\n   * \n   * @name onWellKnownEndpointsLoaded\n   * @type {EventEmitter<any>}\n   * @memberof AuthWellKnownEndpoints\n   */\n  @Output() onWellKnownEndpointsLoaded: EventEmitter<any> = new EventEmitter<any>(true);\n\n  /**\n   * Used to store issuer\n   * \n   * @name issuer\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  issuer: string;\n\n  /**\n   * Used to store jwks_uri\n   * \n   * @name jwks_uri\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  jwks_uri: string;\n\n  /**\n   * USed to store authorization_endpoint\n   * \n   * @name authorization_endpoint\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  authorization_endpoint: string;\n\n  /**\n   * Used to store token_endpoint\n   * \n   * @name token_endpoint\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  token_endpoint: string;\n\n  /**\n   * Used to store userinfo_endpoint\n   * \n   * @name userinfo_endpoint\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  userinfo_endpoint: string;\n\n  /**\n   * Used to store end_session_endpoint\n   * \n   * @name end_session_endpoint\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  end_session_endpoint: string;\n\n  /**\n   * Used to store check_session_iframe\n   * \n   * @name check_session_iframe\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  check_session_iframe: string;\n\n  /**\n   * Used to store revocation_endpoint\n   * \n   * @name revocation_endpoint\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  revocation_endpoint: string;\n\n  /**\n   * Used to store introspection_endpoint\n   * \n   * @name introspection_endpoint\n   * @type {string}\n   * @memberof AuthWellKnownEndpoints\n   */\n  introspection_endpoint: string;\n\n  /**\n   * Creates an instance of AuthWellKnownEndpoints.\n   * \n   * @constructor\n   * @param {Http} http \n   * @param {AuthConfiguration} authConfiguration \n   * @param {OidcSecurityCommon} oidcSecurityCommon \n   * @memberof AuthWellKnownEndpoints\n   */\n  constructor(\n    private http: Http,\n    private authConfiguration: AuthConfiguration,\n    private oidcSecurityCommon: OidcSecurityCommon\n  ) {}\n\n  /**\n   * Used to setup module\n   * \n   * @method setupModule\n   * @returns {void}\n   * @memberof AuthWellKnownEndpoints\n   */\n  setupModule(): void {\n    const data = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_well_known_endpoints);\n    this.oidcSecurityCommon.logDebug(data);\n    if (data && data !== '') {\n      this.oidcSecurityCommon.logDebug('AuthWellKnownEndpoints already defined');\n      this.issuer = data.issuer;\n      this.jwks_uri = data.jwks_uri;\n      this.authorization_endpoint = data.authorization_endpoint;\n      this.token_endpoint = data.token_endpoint;\n      this.userinfo_endpoint = data.userinfo_endpoint;\n\n      if (data.end_session_endpoint) {\n        this.end_session_endpoint = data.end_session_endpoint;\n\n      };\n\n      if (data.check_session_iframe) {\n        this.check_session_iframe = data.check_session_iframe;\n      };\n\n      if (data.revocation_endpoint) {\n        this.revocation_endpoint = data.revocation_endpoint;\n      };\n\n      if (data.introspection_endpoint) {\n        this.introspection_endpoint = data.introspection_endpoint;\n      }\n\n      this.onWellKnownEndpointsLoaded.emit();\n    } else {\n      this.oidcSecurityCommon.logDebug('AuthWellKnownEndpoints first time, get from the server');\n      this.getWellKnownEndpoints()\n        .subscribe((_data: any) => {\n          this.issuer = _data.issuer;\n          this.jwks_uri = _data.jwks_uri;\n          this.authorization_endpoint = _data.authorization_endpoint;\n          this.token_endpoint = _data.token_endpoint;\n          this.userinfo_endpoint = _data.userinfo_endpoint;\n\n          if (_data.end_session_endpoint) {\n            this.end_session_endpoint = _data.end_session_endpoint;\n          };\n\n          if (_data.check_session_iframe) {\n            this.check_session_iframe = _data.check_session_iframe;\n          };\n\n          if (_data.revocation_endpoint) {\n            this.revocation_endpoint = _data.revocation_endpoint;\n          };\n\n          if (_data.introspection_endpoint) {\n            this.introspection_endpoint = _data.introspection_endpoint;\n          }\n\n          this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_well_known_endpoints, _data);\n          this.oidcSecurityCommon.logDebug(_data);\n\n          this.onWellKnownEndpointsLoaded.emit();\n        });\n    }\n  }\n\n  /**\n   * Used to get wellknown endpoints\n   * \n   * @method getWellKnownEndpoints\n   * @private\n   * @returns {Observable<any>}\n   * @memberof AuthWellKnownEndpoints\n   */\n  private getWellKnownEndpoints = (): Observable<any> => {\n\n    const headers = new Headers();\n    headers.append('Accept', 'application/json');\n\n    let url = this.authConfiguration.stsServer + '/.well-known/openid-configuration';\n    if (this.authConfiguration.override_well_known_configuration) {\n      url = this.authConfiguration.override_well_known_configuration_url;\n    }\n\n    return this.http.get(url, {\n      headers: headers,\n    }).map((res: any) => res.json());\n  }\n\n}\n","/**\n * Provides a single interface for the OidcSecurityCheckSession to be used in other modules\n * \n * @file oidc.security.check-session\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable, EventEmitter, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Rx';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/timer';\nimport { AuthConfiguration } from './auth.configuration';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nimport { Observer } from 'rxjs/Observer';\n\n/**\n * Used for checking session using OIDC\n * http://openid.net/specs/openid-connect-session-1_0-ID4.html\n * \n * @export\n * @class OidcSecurityCheckSession\n * @property {any} sessionIframe\n * @property {any} iframeMessageEvent\n * @property {EventEmitter<any>} onCheckSessionChanged\n * @method init\n * @method pollServerSession\n * @method messageHandler\n */\n@Injectable()\nexport class OidcSecurityCheckSession {\n\n  /**\n   * Used to store sessionIframe\n   * \n   * @name sessionIframe\n   * @private\n   * @type {any}\n   * @memberof OidcSecurityCheckSession\n   */\n  private sessionIframe: any;\n\n  /**\n   * Used to store iframeMessageEvent\n   * \n   * @name iframeMessageEvent\n   * @private\n   * @type {any}\n   * @memberof OidcSecurityCheckSession\n   */\n  private iframeMessageEvent: any;\n\n  /**\n   * Used to store onCheckSessionChanged\n   * \n   * @name onCheckSessionChanged\n   * @type {EventEmitter<any>}\n   * @memberof OidcSecurityCheckSession\n   */\n  @Output() onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\n\n  /**\n   * Creates an instance of OidcSecurityCheckSession.\n   * \n   * @constructor\n   * @param {AuthConfiguration} authConfiguration \n   * @param {OidcSecurityCommon} oidcSecurityCommon \n   * @param {AuthWellKnownEndpoints} authWellKnownEndpoints \n   * @memberof OidcSecurityCheckSession\n   */\n  constructor(\n    private authConfiguration: AuthConfiguration,\n    private oidcSecurityCommon: OidcSecurityCommon,\n    private authWellKnownEndpoints: AuthWellKnownEndpoints\n  ) {}\n\n  /**\n   * Used to initialize check session\n   * \n   * @method init\n   * @returns {any}\n   * @memberof OidcSecurityCheckSession\n   */\n  init(): any {\n    \n    const exists = window.parent.document.getElementById('myiFrameForCheckSession');\n    if (!exists) {\n      this.sessionIframe = window.document.createElement('iframe');\n\n      this.sessionIframe.id = 'myiFrameForCheckSession';\n      this.oidcSecurityCommon.logDebug(this.sessionIframe);\n      this.sessionIframe.style.display = 'none';\n      this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\n\n      window.document.body.appendChild(this.sessionIframe);\n      this.iframeMessageEvent = this.messageHandler.bind(this);\n      window.addEventListener('message', this.iframeMessageEvent, false);\n\n      return Observable.create((observer: Observer<any>) => {\n        this.sessionIframe.onload = () => {\n          observer.next(this);\n          observer.complete();\n        }\n      });\n    }\n\n    return Observable.empty<Response>();\n  }\n\n  /**\n   * Used to poll server session\n   * \n   * @method pollServerSession\n   * @param {any} clientId \n   * @memberof OidcSecurityCheckSession\n   */\n  pollServerSession(clientId: any) {\n    let source: any;\n    source = Observable.timer(3000, 3000)\n      .timeInterval()\n      .pluck('interval')\n      .take(10000);\n    try {\n      let subscription: any;\n      subscription = source.subscribe(() => {\n        this.oidcSecurityCommon.logDebug(this.sessionIframe);\n        const session_state = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_session_state);\n        if (session_state && session_state !== '') {\n\n        }\n      });\n    } catch (e) {\n      \n    }\n  }\n\n  /**\n   * Used to message handler\n   * \n   * @method messageHandler\n   * @private\n   * @param {any} e \n   * @memberof OidcSecurityCheckSession\n   */\n  private messageHandler(e: any) {\n    if (e.origin === this.authConfiguration.stsServer &&\n      e.source === this.sessionIframe.contentWindow\n    ) {\n      if (e.data === 'error') {\n        this.oidcSecurityCommon.logWarning('error from checksession messageHandler');\n      } else if (e.data === 'changed') {\n        this.onCheckSessionChanged.emit();\n      } else {\n        this.oidcSecurityCommon.logDebug(e.data + ' from checksession messageHandler');\n      }\n    }\n  }\n\n}\n","/**\n * Provides a single interface for the OidcSecuritySilentRenew to be used in other modules\n * \n * @file oidc.security.silent-renew\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Used for OIDC Securit Silent Renewing\n * \n * @export\n * @class OidcSecuritySilentRenew\n * @property {any} sessionIframe\n * @method initRenew\n * @method startRenew\n * @method silentLogout\n */\n@Injectable()\nexport class OidcSecuritySilentRenew {\n\n  /**\n   * Used to store sessionIframe\n   * \n   * @name sessionIframe\n   * @private\n   * @type {any}\n   * @memberof OidcSecuritySilentRenew\n   */\n  private sessionIframe: any;\n\n  /**\n   * Creates an instance of OidcSecuritySilentRenew.\n   * \n   * @constructor\n   * @param {OidcSecurityCommon} oidcSecurityCommon \n   * @memberof OidcSecuritySilentRenew\n   */\n  constructor(\n    private oidcSecurityCommon: OidcSecurityCommon\n  ) {}\n\n  /**\n   * Used to initialize renew\n   * \n   * @method initRenew\n   * @returns {void}\n   * @memberof OidcSecuritySilentRenew\n   */\n  initRenew(): void {\n    const existsparent = window.parent.document.getElementById('myiFrameForSilentRenew');\n    const exists = window.document.getElementById('myiFrameForSilentRenew');\n    if (existsparent) {\n      this.sessionIframe = existsparent;\n    } else if (exists) {\n      this.sessionIframe = exists;\n    }\n\n    if (!exists && !existsparent) {\n      this.sessionIframe = window.document.createElement('iframe');\n      this.sessionIframe.id = 'myiFrameForSilentRenew';\n      this.oidcSecurityCommon.logDebug(this.sessionIframe);\n      this.sessionIframe.style.display = 'none';\n\n      window.document.body.appendChild(this.sessionIframe);\n    }\n  }\n\n  /**\n   * Used to start renewing\n   * \n   * @method startRenew\n   * @param {string} url \n   * @returns {Promise<void>} \n   * @memberof OidcSecuritySilentRenew\n   */\n  startRenew(url: string): Promise<void> {\n    return new Promise(\n      (resolve, reject) => {\n        const existsparent = window.parent.document.getElementById('myiFrameForSilentRenew');\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\n        if (existsparent) {\n          this.sessionIframe = existsparent;\n        } else if (exists) {\n          this.sessionIframe = exists;\n        }\n    \n        this.oidcSecurityCommon.logDebug('startRenew for URL:' + url);\n        this.sessionIframe.src = url;\n    \n        this.sessionIframe.onload = () => {\n          resolve();\n        }\n      }\n    )\n  }\n\n  /**\n   * Used for silent logout\n   * \n   * @method silentLogout\n   * @param {string} url \n   * @returns {Promise<void>} \n   * @memberof OidcSecuritySilentRenew\n   */\n  silentLogout(url: string): Promise<void> {\n    return new Promise(\n      (resolve, reject) => {\n        const existsparent = window.parent.document.getElementById('myiFrameForSilentRenew');\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\n        if (existsparent) {\n          this.sessionIframe = existsparent;\n        } else if (exists) {\n          this.sessionIframe = exists;\n        }\n    \n        this.oidcSecurityCommon.logDebug('startRenew for URL:' + url);\n        this.sessionIframe.src = url;\n    \n        this.sessionIframe.onload = () => {\n          resolve();\n        }\n      }\n    )\n  }\n\n}\n","/**\n * Provides a single interface for the OidcSecurityUserService to be used in other modules\n * \n * @file oidc.security.user-service\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { Injectable } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport { AuthConfiguration } from './auth.configuration';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\n\n/**\n * Ther service for oidc security user\n * \n * @export\n * @class OidcSecurityUserService\n * @property {any} userData\n * @method initUserData\n * @method getIdentityUserData\n * @method handleError\n */\n@Injectable()\nexport class OidcSecurityUserService {\n\n  /**\n   * Used to store userData\n   * \n   * @type {any}\n   * @memberof OidcSecurityUserService\n   */\n  userData: any = '';\n\n  /**\n   * Creates an instance of OidcSecurityUserService.\n   * \n   * @constructor\n   * @param {Http} http \n   * @param {AuthConfiguration} authConfiguration \n   * @param {OidcSecurityCommon} oidcSecurityCommon \n   * @param {AuthWellKnownEndpoints} authWellKnownEndpoints \n   * @memberof OidcSecurityUserService\n   */\n  constructor(\n    private http: Http,\n    private authConfiguration: AuthConfiguration,\n    private oidcSecurityCommon: OidcSecurityCommon,\n    private authWellKnownEndpoints: AuthWellKnownEndpoints\n  ) {}\n\n  /**\n   * Used to initialize user data\n   * \n   * @method initUserData\n   * @public\n   * @returns {any}\n   * @memberof OidcSecurityUserService\n   */\n  public initUserData(): any {\n    return this.getIdentityUserData()\n      .map(data => {\n        if (data !== undefined && data !== null) {\n          this.userData = data;\n        }\n      });\n  }\n\n  /**\n   * Used to get identity user data\n   * \n   * @method getIdentityUserData\n   * @private\n   * @returns {Observable<any}\n   * @memberof OidcSecurityUserService\n   */\n  private getIdentityUserData = (): Observable<any> => {\n\n    const headers = new Headers();\n    headers.append('Accept', 'application/json');\n\n    const token = this.oidcSecurityCommon.getAccessToken();\n\n    if (token !== '') {\n      headers.append('Authorization', 'Bearer ' + decodeURIComponent(token));\n    }\n\n    return this.http.get(this.authWellKnownEndpoints.userinfo_endpoint, {\n      headers: headers,\n      body: ''\n    }).map((res: any) => {\n      if (/^[\\],:{}\\s]*$/.test(res._body.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\n      replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\n      replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n        this.userData = res.json();\n      \n      } else {\n      \n        // the json is not ok\n      \n      }\n    });\n  }\n\n  /**\n   * Used to handle errors\n   * \n   * @method handleError\n   * @private\n   * @param {any} error \n   * @return {void}\n   * @memberof OidcSecurityUserService\n   */\n  private handleError(error: any): void {\n    this.oidcSecurityCommon.logError(error);\n  }\n\n}\n","/**\n * Provides a single interface for the OidcSecurityService to be used in other modules\n * \n * @file oidc.security.service\n * @author Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n * @license MIT\n * @copyright 2017 Damien Bowden, Roberto Simonetti, Fabian Gosebrink\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Injectable, EventEmitter, Output } from '@angular/core';\nimport { Http, Response, URLSearchParams } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/timer';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Router } from '@angular/router';\nimport { AuthConfiguration, OpenIDImplicitFlowConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './oidc.security.user-service';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nimport { ISubscription } from 'rxjs/Subscription';\nimport { JwtKeys } from './jwtkeys';\n\n/**\n * The main service of OIDC Security\n * \n * @export\n * @class OidcSecurityService\n * @property {EventEmitter<any>} onModuleSetup\n * @property {boolean} checkSessionChanged\n * @property {boolean} moduleSetup\n * @property {BehaviorSubject<boolean>} _isAuthorized\n * @property {boolean} _isAuthorizedValue\n * @property {BehaviorSubject<any>} _userData\n * @property {boolean} _userDataValue\n * @property {OidcSecurityValidation} oidcSecurityValidation\n * @property {string} errorMessage\n * @property {JwtKeys} jwtKeys\n * @property {boolean} authWellKnownEndpointsLoaded\n * @property {number} CheckForPopupClosedInterval\n * @property {any} _checkForPopupClosedTimer\n * @property {any} _popup\n * @property {string} _popupFor\n * @property {BehaviorSubject<boolean>} _isLoading\n * @property {boolean} _isLoadingValue\n * @property {any} source_mobile\n * @property {any} source_browser\n * @property {ISubscription} subscription\n * @method setupModule\n * @method getUserData\n * @method setUserData\n * @method getIsAuthorized\n * @method setIsAuthorized\n * @method getIsLoading\n * @method setIsLoading\n * @method getToken\n * @method getIdToken\n * @method getPayloadFromIdToken\n * @method setCustomRequestParameters\n * @method getRefreshSessionUrl\n * @method authorize\n * @method authorizeWithPopup\n * @method authorizeWithWebview\n * @method popup\n * @method webview\n * @method silentRenewForWebview\n * @method popup_cleanup\n * @method _checkForPopupClosed\n * @method _checkForLogoutPopupClosed\n * @method authorizedCallbackForWebview\n * @method authorizedCallbackForPopup\n * @method authorizedCallback\n * @method refreshSessionCallback\n * @method getUserinfo\n * @method logoff\n * @method successful_validation\n * @method refreshSession\n * @method refreshSessionWithWebview\n * @method setAuthorizationData\n * @method createAuthorizeUrl\n * @method getAuthorizeData\n * @method resetAuthorizationData\n * @method handleError\n * @method onCheckSessionChanged\n * @method onWellKnownEndpointsLoaded\n * @method runGetSigningKeys\n * @method getSigningKeys\n * @method extractData\n * @method handleErrorGetSigningKeys\n * @method runTokenValidationForBrowser\n * @method runTokenValidationForMobile\n */\n@Injectable()\nexport class OidcSecurityService {\n\n  /**\n   * Used to store onModuleSetup\n   * \n   * @name onModuleSetup\n   * @type {EventEmitter<any>}\n   * @memberof OidcSecurityService\n   */\n  @Output() onModuleSetup: EventEmitter<any> = new EventEmitter<any>(true);\n\n  /**\n   * Used to store checkSessionChanged\n   * \n   * @name checkSessionChanged\n   * @type {boolean}\n   * @memberof OidcSecurityService\n   */\n  checkSessionChanged: boolean;\n\n  /**\n   * Used to store moduleSetup\n   * \n   * @name moduleSetup\n   * @type {boolean}\n   * @memberof OidcSecurityService\n   */\n  moduleSetup: boolean;\n\n  /**\n   * Used to store _isAuthorized\n   * \n   * @name _isAuthorized\n   * @private\n   * @type {BehaviorSubject<boolean>}\n   * @memberof OidcSecurityService\n   */\n  private _isAuthorized: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Used to store _isAuthorizedValue\n   * \n   * @name _isAuthorizedValue\n   * @private\n   * @type {boolean}\n   * @memberof OidcSecurityService\n   */\n  private _isAuthorizedValue: boolean;\n\n  /**\n   * Used to store _userData\n   * \n   * @name _userData\n   * @private\n   * @type {BehaviorSubject<any>}\n   * @memberof OidcSecurityService\n   */\n  private _userData: BehaviorSubject<any> = new BehaviorSubject<any>('');\n\n  /**\n   * Used to store _userDataValue\n   * \n   * @name _userDataValue\n   * @private\n   * @type {boolean}\n   * @memberof OidcSecurityService\n   */\n  private _userDataValue: boolean;\n\n  /**\n   * Used to store oidcSecurityValidation\n   * \n   * @name oidcSecurityValidation\n   * @public\n   * @type {OidcSecurityValidation}\n   * @memberof OidcSecurityService\n   */\n  public oidcSecurityValidation: OidcSecurityValidation;\n\n  /**\n   * Used to store errorMessage\n   * \n   * @name errorMessage\n   * @private\n   * @type {string}\n   * @memberof OidcSecurityService\n   */\n  private errorMessage: string;\n\n  /**\n   * Used to store jwtKeys\n   * \n   * @name jwtKeys\n   * @private\n   * @type {JwtKeys}\n   * @memberof OidcSecurityService\n   */\n  private jwtKeys: JwtKeys;\n\n  /**\n   * Used to store authWellKnownEndpointsLoaded\n   * \n   * @name authWellKnownEndpointsLoaded\n   * @private\n   * @type {boolean}\n   * @memberof OidcSecurityService\n   */\n  private authWellKnownEndpointsLoaded: boolean;\n\n  /**\n   * Used to store CheckForPopupClosedInterval\n   * \n   * @name CheckForPopupClosedInterval\n   * @private\n   * @type {number}\n   * @memberof OidcSecurityService\n   */\n  private CheckForPopupClosedInterval: number;\n\n  /**\n   * Used to store _checkForPopupClosedTimer\n   * \n   * @name _checkForPopupClosedTimer\n   * @private\n   * @type {any}\n   * @memberof OidcSecurityService\n   */\n  private _checkForPopupClosedTimer: any;\n\n  /**\n   * Used to store _popup\n   * \n   * @name _popup\n   * @private\n   * @type {any}\n   * @memberof OidcSecurityService\n   */\n  private _popup: any;\n\n  /**\n   * Used to store _popupFor\n   * \n   * @name _popupFor\n   * @private\n   * @type {string}\n   * @memberof OidcSecurityService\n   */\n  private _popupFor: string;\n  \n  /**\n   * Used to store _isLoading\n   * \n   * @name _isLoading\n   * @private\n   * @type {BehaviorSubject<boolean>}\n   * @memberof OidcSecurityService\n   */\n  private _isLoading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Used to store _isLoadingValue\n   * \n   * @name _isLoadingValue\n   * @private\n   * @type {boolean}\n   * @memberof OidcSecurityService\n   */\n  private _isLoadingValue: boolean;\n\n  /**\n   * Used to store source_mobile\n   * \n   * @name source_mobile\n   * @private\n   * @type {any}\n   * @memberof OidcSecurityService\n   */\n  private source_mobile: any = Observable.timer(30000, 30000)\n    .timeInterval()\n    .pluck('interval')\n    .take(10000);\n\n  /**\n   * Used to store source_browser\n   * \n   * @name source_browser\n   * @private\n   * @type {any}\n   * @memberof OidcSecurityService\n   */\n  private source_browser: any = Observable.timer(3000, 3000)\n    .timeInterval()\n    .pluck('interval')\n    .take(10000);\n\n  /**\n   * Used to store subscription\n   * \n   * @name subscription\n   * @type {ISubscription}\n   * @memberof OidcSecurityService\n   */\n  subscription: ISubscription;\n\n  /**\n   * Creates an instance of OidcSecurityService.\n   * \n   * @constructor\n   * @param {Object} platformId \n   * @param {Http} http \n   * @param {AuthConfiguration} authConfiguration \n   * @param {Router} router \n   * @param {OidcSecurityCheckSession} oidcSecurityCheckSession \n   * @param {OidcSecuritySilentRenew} oidcSecuritySilentRenew \n   * @param {OidcSecurityUserService} oidcSecurityUserService \n   * @param {OidcSecurityCommon} oidcSecurityCommon \n   * @param {AuthWellKnownEndpoints} authWellKnownEndpoints \n   * @memberof OidcSecurityService\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private http: Http,\n    private authConfiguration: AuthConfiguration,\n    private router: Router,\n    private oidcSecurityCheckSession: OidcSecurityCheckSession,\n    private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\n    private oidcSecurityUserService: OidcSecurityUserService,\n    private oidcSecurityCommon: OidcSecurityCommon,\n    private authWellKnownEndpoints: AuthWellKnownEndpoints\n  ) {}\n\n  /**\n   * Used to setup module\n   * \n   * @method setupModule\n   * @param {OpenIDImplicitFlowConfiguration} openIDImplicitFlowConfiguration \n   * @memberof OidcSecurityService\n   */\n  setupModule(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\n\n    this.authConfiguration.init(openIDImplicitFlowConfiguration);\n    this.oidcSecurityValidation = new OidcSecurityValidation(this.oidcSecurityCommon);\n\n    this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => { this.onCheckSessionChanged(); });\n    this.authWellKnownEndpoints.onWellKnownEndpointsLoaded.subscribe(() => { this.onWellKnownEndpointsLoaded(); });\n\n    this.oidcSecurityCommon.setupModule();\n\n    if (this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_user_data) !== '') {\n      this.setUserData(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_user_data));\n    }\n\n    if (this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_is_authorized) !== '') {\n      this.setIsAuthorized(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_is_authorized));\n    }\n\n    this.oidcSecurityCommon.logDebug('STS server: ' + this.authConfiguration.stsServer);\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.authWellKnownEndpoints.setupModule();\n\n      if (this.authConfiguration.silent_renew) {\n        this.oidcSecuritySilentRenew.initRenew();\n      }\n\n      if (this.authConfiguration.start_checksession) {\n        this.oidcSecurityCheckSession.init().subscribe(() => {\n          this.oidcSecurityCheckSession.pollServerSession(this.authConfiguration.client_id);\n        });\n      }\n    }\n\n    this.moduleSetup = true;\n    this.onModuleSetup.emit();\n  }\n\n  /**\n   * Used to get user data\n   * \n   * @method getUserData\n   * @returns {Observable<any>} \n   * @memberof OidcSecurityService\n   */\n  getUserData(): Observable<any> {\n    return this._userData.asObservable();\n  }\n\n  /**\n   * Used to set user data\n   * \n   * @method setUserData\n   * @private\n   * @param {any} userData \n   * @memberof OidcSecurityService\n   */\n  private setUserData(userData: any) {\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_user_data, userData);\n    this._userData.next(userData);\n  }\n\n  /**\n   * Used to get is authorized\n   * \n   * @method getIsAuthorized\n   * @returns {Observable<boolean>} \n   * @memberof OidcSecurityService\n   */\n  getIsAuthorized(): Observable<boolean> {\n    return this._isAuthorized.asObservable();\n  }\n\n  /**\n   * Used to set is authorized\n   * \n   * @method setIsAuthorized\n   * @private\n   * @param {boolean} isAuthorized \n   * @memberof OidcSecurityService\n   */\n  private setIsAuthorized(isAuthorized: boolean) {\n    this._isAuthorizedValue = isAuthorized;\n    this._isAuthorized.next(isAuthorized);\n  }\n\n  /**\n   * Used to get is loading\n   * \n   * @method getIsLoading\n   * @returns {Observable<boolean>} \n   * @memberof OidcSecurityService\n   */\n  getIsLoading(): Observable<boolean> {\n    return this._isLoading.asObservable();\n  }\n\n  /**\n   * Used to set is loading\n   * \n   * @method setIsLoading\n   * @private\n   * @param {boolean} isAuthorized \n   * @memberof OidcSecurityService\n   */\n  private setIsLoading(isAuthorized: boolean) {\n    this._isLoadingValue = isAuthorized;\n    this._isLoading.next(isAuthorized);\n  }\n\n  /**\n   * Used to get token\n   * \n   * @method getToken\n   * @returns {any} \n   * @memberof OidcSecurityService\n   */\n  getToken(): any {\n    if (!this._isAuthorizedValue) {\n      return '';\n    }\n\n    const token = this.oidcSecurityCommon.getAccessToken();\n    return decodeURIComponent(token);\n  }\n\n  /**\n   * Used to get id token\n   * \n   * @method getIdToken\n   * @returns {any} \n   * @memberof OidcSecurityService\n   */\n  getIdToken(): any {\n    if (!this._isAuthorizedValue) {\n      return '';\n    }\n\n    const token = this.oidcSecurityCommon.getIdToken();\n    return decodeURIComponent(token);\n  }\n  \n  /**\n   * Used to get payload from id token\n   * \n   * @method getPayloadFromIdToken\n   * @param {boolean} [encode=false] \n   * @returns {any} \n   * @memberof OidcSecurityService\n   */\n  getPayloadFromIdToken(encode = false): any {\n    const token = this.getIdToken();\n    return this.oidcSecurityValidation.getPayloadFromToken(token, encode);\n  }\n\n  /**\n   * Used to set custome request parameters\n   * \n   * @method setCustomRequestParameters\n   * @param {({ [key: string]: string | number | boolean })} params \n   * @memberof OidcSecurityService\n   */\n  setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_custom_request_params, params);\n  }\n\n  /**\n   * Used to get refresh session url\n   * \n   * @method getRefreshSessionUrl\n   * @returns \n   * @memberof OidcSecurityService\n   */\n  getRefreshSessionUrl() {\n\n    const data = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_well_known_endpoints);\n    if (data && data !== '') {\n      this.authWellKnownEndpointsLoaded = true;\n    }\n\n    if (!this.authWellKnownEndpointsLoaded) {\n      this.oidcSecurityCommon.logError('Well known endpoints must be loaded before user can login!')\n      return;\n    }\n\n    if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\n      // invalid response_type\n      return\n    }\n\n    this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    const state = Date.now() + '' + Math.random();\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\n    this.oidcSecurityCommon.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\n\n    const url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\n\n    return url;\n\n  }\n\n  /**\n   * Used to authorize user\n   * \n   * @method authorize\n   * @param {string} [authenticationScheme='local'] \n   * @returns \n   * @memberof OidcSecurityService\n   */\n  authorize(authenticationScheme: string = 'local') {\n    const data = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_well_known_endpoints);\n    if (data && data !== '') {\n      this.authWellKnownEndpointsLoaded = true;\n    }\n\n    if (!this.authWellKnownEndpointsLoaded) {\n      this.oidcSecurityCommon.logError('Well known endpoints must be loaded before user can login!')\n      return;\n    }\n\n    if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\n      // invalid response_type\n      return\n    }\n\n    this.resetAuthorizationData(false);\n\n    this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    const state = Date.now() + '' + Math.random();\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\n    this.oidcSecurityCommon.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\n\n    let url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\n    url = url + '&authenticationScheme=' + authenticationScheme;\n    window.location.href = url;\n  }\n\n  /**\n   * Used to authorize user with popup\n   * \n   * @method authorizeWithPopup\n   * @param {string} [authenticationScheme='local'] \n   * @returns \n   * @memberof OidcSecurityService\n   */\n  authorizeWithPopup(authenticationScheme: string = 'local') {\n    this._popupFor = 'login';\n    const data = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_well_known_endpoints);\n    if (data && data !== '') {\n      this.authWellKnownEndpointsLoaded = true;\n    }\n\n    if (!this.authWellKnownEndpointsLoaded) {\n      this.oidcSecurityCommon.logError('Well known endpoints must be loaded before user can login!')\n      return;\n    }\n\n    if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\n      // invalid response_type\n      return\n    }\n\n    this.resetAuthorizationData(false);\n\n    this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    const state = Date.now() + '' + Math.random();\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\n    this.oidcSecurityCommon.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\n\n    let url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\n\n    url = url + '&authenticationScheme=' + authenticationScheme;\n\n    if (this._popupFor === 'afterRegistration') {\n      this._popup.location.href = url;\n    } else {\n      this.popup(url, 'QPONS\\' AUTHORIZATION PAGE', 800, 800);\n    }\n  }\n\n  /**\n   * Used to authorize use with webview\n   * \n   * @method authorizeWithWebview\n   * @param {string} [authenticationScheme='local'] \n   * @returns \n   * @memberof OidcSecurityService\n   */\n  authorizeWithWebview(authenticationScheme: string = 'local') {\n    this._popupFor = 'login';\n    const data = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_well_known_endpoints);\n    if (data && data !== '') {\n      this.authWellKnownEndpointsLoaded = true;\n    }\n\n    if (!this.authWellKnownEndpointsLoaded) {\n      this.oidcSecurityCommon.logError('Well known endpoints must be loaded before user can login!')\n      return;\n    }\n\n    if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\n      // invalid response_type\n      return\n    }\n\n    this.resetAuthorizationData(false);\n\n    this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    const state = Date.now() + '' + Math.random();\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\n    this.oidcSecurityCommon.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\n\n    let url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\n\n    url = url + '&authenticationScheme=' + authenticationScheme;\n\n    if (this._popupFor === 'afterRegistration') {\n      this._popup.location.href = url;\n    } else {\n      this.webview(url, '_blank');\n    }\n  }\n\n  /**\n   * Used to open popup with qis\n   * \n   * @method popup\n   * @param {string} url \n   * @param {string} title \n   * @param {number} w \n   * @param {number} h \n   * @memberof OidcSecurityService\n   */\n  popup(url: string, title: string, w: number, h: number) {\n    let options: string;\n    this.CheckForPopupClosedInterval = 2000;\n\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : 0;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : 0;\n\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n\n    const left = ((width / 2) - (w / 2)) + dualScreenLeft;\n    const top = ((height / 2) - (h / 2)) + dualScreenTop;\n\n    options += 'toolbar=no,location=no,directories=no,status=no';\n    options += ',menubar=no,scrollbars=no,resizable=no,copyhistory=no';\n\n    options += ',width='  + w;\n    options += ',height=' + h;\n    options += ',top='  + top;\n    options += ',left='   + left;\n\n    this._popup = window.open(url, title, options);\n    if (this._popupFor === 'login') {\n    this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), this.CheckForPopupClosedInterval);\n    } else if (this._popupFor === 'logout') {\n    this._checkForPopupClosedTimer = window.setInterval(this._checkForLogoutPopupClosed.bind(this), this.CheckForPopupClosedInterval);\n    }\n  }\n\n  /**\n   * Used to open webview with qis\n   * \n   * @method webview\n   * @param {string} url \n   * @param {string} target \n   * @param {string} [options='location=yes,status=yes'] \n   * @memberof OidcSecurityService\n   */\n  webview(url: string, target: string, options: string = 'location=yes,status=yes') {\n    this.CheckForPopupClosedInterval = 2000;\n\n    this._popup = window.open(url, target, options);\n    this._popup.addEventListener('loadstart', (event: any) => { \n      const _url = event.url;\n      let a = _url.split('/');\n      a = a[(a.length - 1)];\n      if (_url.indexOf('#') !== '-1') {\n        const hash = url.split('#')[1];    \n        const result: any = hash.split('&').reduce(function (res: any, item: string) {\n          const parts = item.split('=');\n          res[parts[0]] = parts[1];\n          return res;\n        }, {});\n        if (result.id_token !== undefined) {\n          this._popup.close();\n          this.authorizedCallbackForWebview(result);\n        }\n      }\n      if (a === 'login') {\n        this.authorizeWithWebview();\n      }\n    });\n  }\n  \n  /**\n   * Used to silent renew in webview\n   * \n   * @method silentRenewForWebview\n   * @param {string} url \n   * @memberof OidcSecurityService\n   */\n  silentRenewForWebview(url: string) {\n    this.CheckForPopupClosedInterval = 2000;\n    this._popup = window.open(url, '_blank', 'hidden=yes');\n    this._popup.addEventListener('loadstart', (event: any) => { \n      const _url = event.url;\n      let a = _url.split('/');\n      a = a[(a.length - 1)];\n      if (_url.indexOf('#') !== '-1') {\n        this._popup.close();\n        this.authorizedCallbackForWebview(_url);\n      }\n      if (a === 'login') {\n        this.authorizeWithWebview();\n      }\n    });\n  }\n\n  /**\n   * Used to cleanup popup\n   * \n   * @method popup_cleanup\n   * @memberof OidcSecurityService\n   */\n  popup_cleanup() {\n\n    window.clearInterval(this._checkForPopupClosedTimer);\n    this._checkForPopupClosedTimer = null;\n    this._popup = null;\n\n  }\n\n  /**\n   * Used to cleanup popup at close\n   * \n   * @method _checkForPopupClosed\n   * @memberof OidcSecurityService\n   */\n  _checkForPopupClosed() {\n    try {\n      if (this._popup.location.href !== 'about:blank' && this._popup.location.href !== undefined) {\n        let a = this._popup.location.href.split('/');\n        a = a[(a.length - 1)];\n        if (a !== 'login') {\n        this._popup.close();\n        if (!this._popup || this._popup.closed) {\n            this.authorizedCallbackForPopup();\n            this.popup_cleanup();\n        }\n        } else {\n        if (!this._popup || this._popup.closed) {\n          this.popup_cleanup();\n        } else {\n          this._popupFor = 'afterRegistration';\n          this.authorizeWithPopup();\n        }\n        }\n\n      }\n    } catch (err) {\n\n    }\n  }\n\n  /**\n   * Used to logout popup close\n   * \n   * @method _checkForLogoutPopupClosed\n   * @memberof OidcSecurityService\n   */\n  _checkForLogoutPopupClosed() {\n    try {\n      if (this._popup.location.href !== 'about:blank') {\n        this._popup.close();\n        if (!this._popup || this._popup.closed) {\n          this.popup_cleanup();\n        }\n      }\n    } catch (err) {\n\n    }\n  }\n\n  /**\n   * The callback for authorize webview\n   * \n   * @method authorizedCallbackForWebview\n   * @param {any} result \n   * @memberof OidcSecurityService\n   */\n  authorizedCallbackForWebview(result: any) {\n    this.setIsLoading(true);\n    const silentRenew = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_silent_renew_running);\n    const isRenewProcess = (silentRenew === 'running');\n\n    this.oidcSecurityCommon.logDebug('BEGIN authorizedCallback, no auth data');\n    this.resetAuthorizationData(isRenewProcess);\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_result, result);\n\n    this.oidcSecurityCommon.logDebug(result);\n    this.oidcSecurityCommon.logDebug('authorizedCallback created, begin token validation');\n\n    let access_token = '';\n    let id_token = '';\n    let authResponseIsValid = false;\n    let decoded_id_token: any;\n\n    this.getSigningKeys()\n      .subscribe(jwtKeys => {\n        this.jwtKeys = jwtKeys;\n\n        if (!result.error) {\n\n          // validate state\n          if (this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control))) {\n            if (this.authConfiguration.response_type === 'id_token token') {\n              access_token = result.access_token;\n            }\n            id_token = result.id_token;\n\n            let headerDecoded;\n            decoded_id_token = this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\n            headerDecoded = this.oidcSecurityValidation.getHeaderFromToken(id_token, false);\n\n            // validate jwt signature\n            if (this.oidcSecurityValidation.validate_signature_id_token(id_token, this.jwtKeys)) {\n              // validate nonce\n              if (this.oidcSecurityValidation.validate_id_token_nonce(decoded_id_token, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_nonce))) {\n                // validate required fields id_token\n                if (this.oidcSecurityValidation.validate_required_id_token(decoded_id_token)) {\n                  // validate max offset from the id_token issue to now\n                  if (this.oidcSecurityValidation.validate_id_token_iat_max_offset(decoded_id_token, this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds)) {\n                    // validate iss\n                    if (this.oidcSecurityValidation.validate_id_token_iss(decoded_id_token, this.authWellKnownEndpoints.issuer)) {\n                      // validate aud\n                      if (this.oidcSecurityValidation.validate_id_token_aud(decoded_id_token, this.authConfiguration.client_id)) {\n                        // validate_id_token_exp_not_expired\n                        if (this.oidcSecurityValidation.validate_id_token_exp_not_expired(decoded_id_token)) {\n                          // flow id_token token\n                          if (this.authConfiguration.response_type === 'id_token token') {\n                            // valiadate at_hash and access_token\n                            if (this.oidcSecurityValidation.validate_id_token_at_hash(access_token, decoded_id_token.at_hash) || !access_token) {\n                              authResponseIsValid = true;\n                              this.successful_validation();\n                            } else {\n                              this.oidcSecurityCommon.logWarning('authorizedCallback incorrect at_hash');\n                            }\n                          } else {\n                            authResponseIsValid = true;\n                            this.successful_validation();\n                          }\n                        } else {\n                          this.oidcSecurityCommon.logWarning('authorizedCallback token expired');\n                        }\n                      } else {\n                        this.oidcSecurityCommon.logWarning('authorizedCallback incorrect aud');\n                      }\n                    } else {\n                      this.oidcSecurityCommon.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                    }\n                  } else {\n                    this.oidcSecurityCommon.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n                  }\n                } else {\n                  this.oidcSecurityCommon.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n                }\n              } else {\n                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect nonce');\n              }\n            } else {\n              this.oidcSecurityCommon.logDebug('authorizedCallback Signature validation failed id_token');\n            }\n          } else {\n            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect state');\n          }\n        }\n\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, '');\n\n        if (authResponseIsValid) {\n          this.setAuthorizationData(access_token, id_token);\n          if (this.authConfiguration.auto_userinfo) {\n            this.getUserinfo(isRenewProcess, result, id_token, decoded_id_token).subscribe((response) => {\n              if (response) {\n                this.setIsLoading(false);\n                this.router.navigate([this.authConfiguration.startup_route]);\n              } else {\n                this.setIsLoading(false);\n              }\n            });\n          } else {\n            this.setIsLoading(false);\n            this.router.navigate([this.authConfiguration.startup_route]);\n          }\n        } else { // some went wrong\n          this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\n          this.resetAuthorizationData(false);\n          this.setIsLoading(false);\n          this.router.navigate([this.authConfiguration.unauthorized_route]);\n        }\n      });\n  }\n\n  /**\n   * The callback for authorize popup\n   * \n   * @method authorizedCallbackForPopup\n   * @memberof OidcSecurityService\n   */\n  authorizedCallbackForPopup() {\n    this.setIsLoading(true);\n    const silentRenew = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_silent_renew_running);\n    const isRenewProcess = (silentRenew === 'running');\n\n    this.oidcSecurityCommon.logDebug('BEGIN authorizedCallback, no auth data');\n    this.resetAuthorizationData(isRenewProcess);\n\n    const hash = this._popup.location.hash.substr(1);\n\n    const result: any = hash.split('&').reduce(function (res: any, item: string) {\n      const parts = item.split('=');\n      res[parts[0]] = parts[1];\n      return res;\n    }, {});\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_result, result);\n\n    this.oidcSecurityCommon.logDebug(result);\n    this.oidcSecurityCommon.logDebug('authorizedCallback created, begin token validation');\n\n    let access_token = '';\n    let id_token = '';\n    let authResponseIsValid = false;\n    let decoded_id_token: any;\n\n    this.getSigningKeys()\n      .subscribe(jwtKeys => {\n        this.jwtKeys = jwtKeys;\n\n        if (!result.error) {\n\n          // validate state\n          if (this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control))) {\n            if (this.authConfiguration.response_type === 'id_token token') {\n              access_token = result.access_token;\n            }\n            id_token = result.id_token;\n\n            let headerDecoded;\n            decoded_id_token = this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\n            headerDecoded = this.oidcSecurityValidation.getHeaderFromToken(id_token, false);\n\n            // validate jwt signature\n            if (this.oidcSecurityValidation.validate_signature_id_token(id_token, this.jwtKeys)) {\n              // validate nonce\n              if (this.oidcSecurityValidation.validate_id_token_nonce(decoded_id_token, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_nonce))) {\n                // validate required fields id_token\n                if (this.oidcSecurityValidation.validate_required_id_token(decoded_id_token)) {\n                  // validate max offset from the id_token issue to now\n                  if (this.oidcSecurityValidation.validate_id_token_iat_max_offset(decoded_id_token, this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds)) {\n                    // validate iss\n                    if (this.oidcSecurityValidation.validate_id_token_iss(decoded_id_token, this.authWellKnownEndpoints.issuer)) {\n                      // validate aud\n                      if (this.oidcSecurityValidation.validate_id_token_aud(decoded_id_token, this.authConfiguration.client_id)) {\n                        // validate_id_token_exp_not_expired\n                        if (this.oidcSecurityValidation.validate_id_token_exp_not_expired(decoded_id_token)) {\n                          // flow id_token token\n                          if (this.authConfiguration.response_type === 'id_token token') {\n                            // valiadate at_hash and access_token\n                            if (this.oidcSecurityValidation.validate_id_token_at_hash(access_token, decoded_id_token.at_hash) || !access_token) {\n                              authResponseIsValid = true;\n                              this.successful_validation();\n                            } else {\n                              this.oidcSecurityCommon.logWarning('authorizedCallback incorrect at_hash');\n                            }\n                          } else {\n                            authResponseIsValid = true;\n                            this.successful_validation();\n                          }\n                        } else {\n                          this.oidcSecurityCommon.logWarning('authorizedCallback token expired');\n                        }\n                      } else {\n                        this.oidcSecurityCommon.logWarning('authorizedCallback incorrect aud');\n                      }\n                    } else {\n                      this.oidcSecurityCommon.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                    }\n                  } else {\n                    this.oidcSecurityCommon.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n                  }\n                } else {\n                  this.oidcSecurityCommon.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n                }\n              } else {\n                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect nonce');\n              }\n            } else {\n              this.oidcSecurityCommon.logDebug('authorizedCallback Signature validation failed id_token');\n            }\n          } else {\n            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect state');\n          }\n        }\n\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, '');\n\n        if (authResponseIsValid) {\n          this.setAuthorizationData(access_token, id_token);\n          if (this.authConfiguration.auto_userinfo) {\n            this.getUserinfo(isRenewProcess, result, id_token, decoded_id_token).subscribe((response) => {\n              if (response) {\n                this.setIsLoading(false);\n                this.router.navigate([this.authConfiguration.startup_route]);\n              } else {\n                this.setIsLoading(false);\n              }\n            });\n          } else {\n            this.setIsLoading(false);\n            this.router.navigate([this.authConfiguration.startup_route]);\n          }\n        } else { // some went wrong\n          this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\n          this.resetAuthorizationData(false);\n          this.setIsLoading(false);\n          this.router.navigate([this.authConfiguration.unauthorized_route]);\n        }\n      });\n  }\n\n  /**\n   * The callback for authorize\n   * \n   * @method authorizedCallback\n   * @memberof OidcSecurityService\n   */\n  authorizedCallback() {\n    const silentRenew = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_silent_renew_running);\n    const isRenewProcess = (silentRenew === 'running');\n\n    this.oidcSecurityCommon.logDebug('BEGIN authorizedCallback, no auth data');\n    this.resetAuthorizationData(isRenewProcess);\n\n    const hash = window.location.hash.substr(1);\n\n    const result: any = hash.split('&').reduce(function (res: any, item: string) {\n      const parts = item.split('=');\n      res[parts[0]] = parts[1];\n      return res;\n    }, {});\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_result, result);\n\n    this.oidcSecurityCommon.logDebug(result);\n    this.oidcSecurityCommon.logDebug('authorizedCallback created, begin token validation');\n\n    let access_token = '';\n    let id_token = '';\n    let authResponseIsValid = false;\n    let decoded_id_token: any;\n\n    this.getSigningKeys()\n      .subscribe(jwtKeys => {\n        this.jwtKeys = jwtKeys;\n\n        if (!result.error) {\n\n          // validate state\n          if (this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control))) {\n            if (this.authConfiguration.response_type === 'id_token token') {\n              access_token = result.access_token;\n            }\n            id_token = result.id_token;\n\n            let headerDecoded;\n            decoded_id_token = this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\n            headerDecoded = this.oidcSecurityValidation.getHeaderFromToken(id_token, false);\n\n            // validate jwt signature\n            if (this.oidcSecurityValidation.validate_signature_id_token(id_token, this.jwtKeys)) {\n              // validate nonce\n              if (this.oidcSecurityValidation.validate_id_token_nonce(decoded_id_token, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_nonce))) {\n                // validate required fields id_token\n                if (this.oidcSecurityValidation.validate_required_id_token(decoded_id_token)) {\n                  // validate max offset from the id_token issue to now\n                  if (this.oidcSecurityValidation.validate_id_token_iat_max_offset(decoded_id_token, this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds)) {\n                    // validate iss\n                    if (this.oidcSecurityValidation.validate_id_token_iss(decoded_id_token, this.authWellKnownEndpoints.issuer)) {\n                      // validate aud\n                      if (this.oidcSecurityValidation.validate_id_token_aud(decoded_id_token, this.authConfiguration.client_id)) {\n                        // validate_id_token_exp_not_expired\n                        if (this.oidcSecurityValidation.validate_id_token_exp_not_expired(decoded_id_token)) {\n                          // flow id_token token\n                          if (this.authConfiguration.response_type === 'id_token token') {\n                            // valiadate at_hash and access_token\n                            if (this.oidcSecurityValidation.validate_id_token_at_hash(access_token, decoded_id_token.at_hash) || !access_token) {\n                              authResponseIsValid = true;\n                              this.successful_validation();\n                            } else {\n                              this.oidcSecurityCommon.logWarning('authorizedCallback incorrect at_hash');\n                            }\n                          } else {\n                            authResponseIsValid = true;\n                            this.successful_validation();\n                          }\n                        } else {\n                          this.oidcSecurityCommon.logWarning('authorizedCallback token expired');\n                        }\n                      } else {\n                        this.oidcSecurityCommon.logWarning('authorizedCallback incorrect aud');\n                      }\n                    } else {\n                      this.oidcSecurityCommon.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                    }\n                  } else {\n                    this.oidcSecurityCommon.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n                  }\n                } else {\n                  this.oidcSecurityCommon.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n                }\n              } else {\n                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect nonce');\n              }\n            } else {\n              this.oidcSecurityCommon.logDebug('authorizedCallback Signature validation failed id_token');\n            }\n          } else {\n            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect state');\n          }\n        }\n\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, '');\n\n        if (authResponseIsValid) {\n          this.setAuthorizationData(access_token, id_token);\n          if (this.authConfiguration.auto_userinfo) {\n            this.getUserinfo(isRenewProcess, result, id_token, decoded_id_token).subscribe((response) => {\n              if (response) {\n                this.router.navigate([this.authConfiguration.startup_route]);\n              } else {\n              }\n            });\n          } else {\n            this.router.navigate([this.authConfiguration.startup_route]);\n          }\n        } else { // some went wrong\n          this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\n          this.resetAuthorizationData(false);\n          this.router.navigate([this.authConfiguration.unauthorized_route]);\n        }\n      });\n  }\n\n  /**\n   * The callback for refresh session\n   * \n   * @method refreshSessionCallback\n   * @param {any} href \n   * @returns \n   * @memberof OidcSecurityService\n   */\n  refreshSessionCallback(href: any) {\n    return new Promise((resolve, reject) => {\n    const silentRenew = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_silent_renew_running);\n    const isRenewProcess = (silentRenew === 'running');\n\n    this.oidcSecurityCommon.logDebug('BEGIN authorizedCallback, no auth data');\n    this.resetAuthorizationData(isRenewProcess);\n\n    const hash = href;\n\n    const result: any = hash.split('&').reduce(function (res: any, item: string) {\n      const parts = item.split('=');\n      res[parts[0]] = parts[1];\n      return res;\n    }, {});\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_result, result);\n\n    this.oidcSecurityCommon.logDebug(result);\n    this.oidcSecurityCommon.logDebug('authorizedCallback created, begin token validation');\n\n    let access_token = '';\n    let id_token = '';\n    let authResponseIsValid = false;\n    let decoded_id_token: any;\n\n    this.getSigningKeys()\n      .subscribe(jwtKeys => {\n        this.jwtKeys = jwtKeys;\n\n        if (!result.error) {\n\n          // validate state\n          if (this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control))) {\n            if (this.authConfiguration.response_type === 'id_token token') {\n              access_token = result.access_token;\n            }\n            id_token = result.id_token;\n\n            let headerDecoded;\n            decoded_id_token = this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\n            headerDecoded = this.oidcSecurityValidation.getHeaderFromToken(id_token, false);\n\n            // validate jwt signature\n            if (this.oidcSecurityValidation.validate_signature_id_token(id_token, this.jwtKeys)) {\n              // validate nonce\n              if (this.oidcSecurityValidation.validate_id_token_nonce(decoded_id_token, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_nonce))) {\n                // validate required fields id_token\n                if (this.oidcSecurityValidation.validate_required_id_token(decoded_id_token)) {\n                  // validate max offset from the id_token issue to now\n                  if (this.oidcSecurityValidation.validate_id_token_iat_max_offset(decoded_id_token, this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds)) {\n                    // validate iss\n                    if (this.oidcSecurityValidation.validate_id_token_iss(decoded_id_token, this.authWellKnownEndpoints.issuer)) {\n                      // validate aud\n                      if (this.oidcSecurityValidation.validate_id_token_aud(decoded_id_token, this.authConfiguration.client_id)) {\n                        // validate_id_token_exp_not_expired\n                        if (this.oidcSecurityValidation.validate_id_token_exp_not_expired(decoded_id_token)) {\n                          // flow id_token token\n                          if (this.authConfiguration.response_type === 'id_token token') {\n                            // valiadate at_hash and access_token\n                            if (this.oidcSecurityValidation.validate_id_token_at_hash(access_token, decoded_id_token.at_hash) || !access_token) {\n                              authResponseIsValid = true;\n                              this.successful_validation();\n                            } else {\n                              this.oidcSecurityCommon.logWarning('authorizedCallback incorrect at_hash');\n\n                            }\n                          } else {\n                            authResponseIsValid = true;\n                            this.successful_validation();\n\n                          }\n                        } else {\n                          this.oidcSecurityCommon.logWarning('authorizedCallback token expired');\n\n                        }\n                      } else {\n                        this.oidcSecurityCommon.logWarning('authorizedCallback incorrect aud');\n\n                      }\n                    } else {\n                      this.oidcSecurityCommon.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n\n                    }\n                  } else {\n                    this.oidcSecurityCommon.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n\n                  }\n                } else {\n                  this.oidcSecurityCommon.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n\n                }\n              } else {\n                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect nonce');\n\n              }\n            } else {\n              this.oidcSecurityCommon.logDebug('authorizedCallback Signature validation failed id_token');\n\n            }\n          } else {\n            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect state');\n\n          }\n        }\n\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, '');\n\n        if (authResponseIsValid) {\n          this.setAuthorizationData(access_token, id_token);\n          if (this.authConfiguration.auto_userinfo) {\n            this.getUserinfo(isRenewProcess, result, id_token, decoded_id_token).subscribe((response) => {\n              if (response) {\n                resolve();\n              } else {\n                reject();\n              }\n            });\n          } else {\n            reject();\n          }\n        } else { // some went wrong\n          this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\n          this.resetAuthorizationData(false);\n          reject();\n        }\n      });\n    });\n  }\n\n  /**\n   * Used to get user info\n   * \n   * @method getUserinfo\n   * @param {boolean} [isRenewProcess=false] \n   * @param {any} [result] \n   * @param {any} [id_token] \n   * @param {any} [decoded_id_token] \n   * @returns {Observable<boolean>} \n   * @memberof OidcSecurityService\n   */\n  getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\n    result = result ? result : this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_result);\n    id_token = id_token ? id_token : this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token);\n    decoded_id_token = decoded_id_token ? decoded_id_token : this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\n\n    return new Observable<boolean>(observer => {\n      // flow id_token token\n      if (this.authConfiguration.response_type === 'id_token token') {\n        if (isRenewProcess) {\n          this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_session_state, result.session_state);\n          observer.next(true);\n          observer.complete();\n        } else {\n          this.oidcSecurityUserService.initUserData()\n            .subscribe(() => {\n              this.oidcSecurityCommon.logDebug('authorizedCallback id_token token flow');\n              if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, this.oidcSecurityUserService.userData.sub)) {\n                this.setUserData(this.oidcSecurityUserService.userData);\n                this.oidcSecurityCommon.logDebug(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_access_token));\n                this.oidcSecurityCommon.logDebug(this.oidcSecurityUserService.userData);\n                this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_session_state, result.session_state);\n                observer.next(true);\n              } else { // some went wrong, userdata sub does not match that from id_token\n                this.oidcSecurityCommon.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                this.resetAuthorizationData(false);\n                observer.next(false);\n              }\n              observer.complete();\n            });\n        }\n      } else { // flow id_token\n        this.oidcSecurityCommon.logDebug('authorizedCallback id_token flow');\n        this.oidcSecurityCommon.logDebug(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_access_token));\n\n        // userData is set to the id_token decoded. No access_token.\n        this.oidcSecurityUserService.userData = decoded_id_token;\n        this.setUserData(this.oidcSecurityUserService.userData);\n\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_session_state, result.session_state);\n\n        if (!isRenewProcess) {\n          // this.runTokenValidation();\n        }\n\n        observer.next(true);\n        observer.complete();\n      }\n    });\n  }\n\n  /**\n   * Used to logoff\n   * \n   * @method logoff\n   * @returns \n   * @memberof OidcSecurityService\n   */\n  logoff() {\n    return new Promise(\n      (resolve, reject) => {\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\n        this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\n    \n        if (this.authWellKnownEndpoints.end_session_endpoint) {\n          const authorizationEndsessionUrl = this.authWellKnownEndpoints.end_session_endpoint;\n    \n          const id_token_hint = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token);\n          const post_logout_redirect_uri = this.authConfiguration.post_logout_redirect_uri;\n    \n          const url =\n            authorizationEndsessionUrl + '?' +\n            'id_token_hint=' + encodeURI(id_token_hint) + '&' +\n            'post_logout_redirect_uri=' + encodeURI(post_logout_redirect_uri);\n    \n          this.resetAuthorizationData(false);\n    \n          if (this.authConfiguration.start_checksession && this.checkSessionChanged) {\n            this.oidcSecurityCommon.logDebug('only local login cleaned up, server session has changed');\n            resolve();\n          } else {\n            this.oidcSecuritySilentRenew.silentLogout(url).then(\n              res => {\n                resolve();\n              }\n            )\n          }\n        } else {\n          this.resetAuthorizationData(false);\n          this.oidcSecurityCommon.logDebug('only local login cleaned up, no end_session_endpoint');\n          resolve();\n        }\n      }\n    )\n  }\n\n  /**\n   * Used to when validation was succesful\n   * \n   * @method successful_validation\n   * @memberof OidcSecurityService\n   */\n  public successful_validation() {\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, '');\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, '');\n    this.oidcSecurityCommon.logDebug('AuthorizedCallback token(s) validated, continue');\n  }\n\n  /**\n   * Used to refresh session\n   * \n   * @method refreshSession\n   * @returns \n   * @memberof OidcSecurityService\n   */\n  public refreshSession() {\n    return new Promise(\n      (resolve, reject) => {\n        this.oidcSecurityCommon.logDebug('BEGIN refresh session Authorize');\n          const nonce = 'N' + Math.random() + '' + Date.now();\n          const state = Date.now() + '' + Math.random();\n      \n          this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\n          this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\n          this.oidcSecurityCommon.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\n      \n          const url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\n      \n          this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, 'running');\n          this.oidcSecuritySilentRenew.startRenew(url).then(\n            res => {\n              resolve();\n            },\n            err => {\n              reject();\n            }\n          );\n      }\n    )\n  }\n\n  /**\n   * Used to refresh session with webview\n   * \n   * @method refreshSessionWithWebview\n   * @memberof OidcSecurityService\n   */\n  public refreshSessionWithWebview() {\n    this.oidcSecurityCommon.logDebug('BEGIN refresh session Authorize');\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    const state = Date.now() + '' + Math.random();\n\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\n    this.oidcSecurityCommon.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\n\n    const url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, 'running');\n    this.silentRenewForWebview(url);\n  }\n\n  /**\n   * Used to set authorization data\n   * \n   * @method setAuthorizationData\n   * @param {any} access_token \n   * @param {any} id_token \n   * @memberof OidcSecurityService\n   */\n  public setAuthorizationData(access_token: any, id_token: any) {\n    if (this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_access_token) !== '') {\n      this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_access_token, '');\n    }\n\n    this.oidcSecurityCommon.logDebug(access_token);\n    this.oidcSecurityCommon.logDebug(id_token);\n    this.oidcSecurityCommon.logDebug('storing to storage, getting the roles');\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_access_token, access_token);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_id_token, id_token);\n    this.setIsAuthorized(true);\n    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_is_authorized, true);\n  }\n\n  /**\n   * Used to create authorize url\n   * \n   * @method createAuthorizeUrl\n   * @private\n   * @param {string} nonce \n   * @param {string} state \n   * @param {string} authorization_endpoint \n   * @returns {string} \n   * @memberof OidcSecurityService\n   */\n  private createAuthorizeUrl(nonce: string, state: string, authorization_endpoint: string): string {\n\n    const urlParts = authorization_endpoint.split('?');\n    const authorizationUrl = urlParts[0];\n    const params = new URLSearchParams(urlParts[1]);\n    params.set('client_id', this.authConfiguration.client_id);\n    params.set('redirect_uri', this.authConfiguration.redirect_url);\n    params.set('response_type', this.authConfiguration.response_type);\n    params.set('scope', this.authConfiguration.scope);\n    params.set('nonce', nonce);\n    params.set('state', state);\n\n    const customParams = Object.assign({}, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_custom_request_params));\n\n    Object.keys(customParams).forEach(key => {\n      params.set(key, customParams[key]);\n    });\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  /**\n   * Used to get authorize data\n   * \n   * @method getAuthorizeData\n   * @private\n   * @param {string} nonce \n   * @param {string} state \n   * @param {string} authorization_endpoint \n   * @returns {{}} \n   * @memberof OidcSecurityService\n   */\n  private getAuthorizeData(nonce: string, state: string, authorization_endpoint: string): {} {\n    return {\n    'client_id': this.authConfiguration.client_id,\n    'redirect_uri': this.authConfiguration.redirect_url,\n    'response_type': this.authConfiguration.response_type,\n    'scope': this.authConfiguration.scope,\n    'nonce': nonce,\n    'state': state\n    };\n  }\n\n  /**\n   * Used to reset authorization data\n   * \n   * @method resetAuthorizationData\n   * @param {boolean} isRenewProcess \n   * @memberof OidcSecurityService\n   */\n  public resetAuthorizationData(isRenewProcess: boolean) {\n    if (!isRenewProcess) {\n      this.setIsAuthorized(false);\n      this.oidcSecurityCommon.resetStorageData(isRenewProcess);\n      this.checkSessionChanged = false;\n    }\n  }\n\n  /**\n   * Used to handle errors\n   * \n   * @method handleError\n   * @param {any} error \n   * @memberof OidcSecurityService\n   */\n  handleError(error: any) {\n    this.oidcSecurityCommon.logError(error);\n    if (error.status === 403) {\n      this.router.navigate([this.authConfiguration.forbidden_route]);\n    } else if (error.status === 401) {\n      const silentRenew = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_silent_renew_running);\n      this.resetAuthorizationData(silentRenew);\n      this.router.navigate([this.authConfiguration.unauthorized_route]);\n    }\n  }\n\n  /**\n   * Used to check on check session\n   * \n   * @method onCheckSessionChanged\n   * @private\n   * @memberof OidcSecurityService\n   */\n  private onCheckSessionChanged() {\n    this.oidcSecurityCommon.logDebug('onCheckSessionChanged');\n    this.checkSessionChanged = true;\n  }\n\n  /**\n   * Used to check on well known endpoints load\n   * \n   * @method onWellKnownEndpointsLoaded\n   * @private\n   * @memberof OidcSecurityService\n   */\n  private onWellKnownEndpointsLoaded() {\n    this.oidcSecurityCommon.logDebug('onWellKnownEndpointsLoaded');\n    this.authWellKnownEndpointsLoaded = true;\n  }\n\n  /**\n   * Used to run ge signing keys\n   * \n   * @method runGetSigningKeys\n   * @private\n   * @memberof OidcSecurityService\n   */\n  private runGetSigningKeys() {\n    this.getSigningKeys()\n      .subscribe(\n      jwtKeys => this.jwtKeys = jwtKeys,\n      error => this.errorMessage = <any>error);\n  }\n\n  /**\n   * Used to get signing keys\n   * \n   * @method getSigningKeys\n   * @returns {Observable<JwtKeys>} \n   * @memberof OidcSecurityService\n   */\n  public getSigningKeys(): Observable<JwtKeys> {\n    this.oidcSecurityCommon.logDebug('jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri);\n    return this.http.get(this.authWellKnownEndpoints.jwks_uri)\n      .map(this.extractData)\n      .catch(this.handleErrorGetSigningKeys);\n  }\n\n  /**\n   * Used to extract data\n   * \n   * @method extractData\n   * @private\n   * @param {Response} res \n   * @returns \n   * @memberof OidcSecurityService\n   */\n  private extractData(res: Response) {\n    const body = res.json();\n    return body;\n  }\n\n  /**\n   * Used to handle error get signing keys\n   * \n   * @method handleErrorGetSigningKeys\n   * @private\n   * @param {(Response | any)} error \n   * @returns \n   * @memberof OidcSecurityService\n   */\n  private handleErrorGetSigningKeys(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      const body = error.json() || {};\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    console.error(errMsg);\n    return Observable.throw(errMsg);\n  }\n  \n  /**\n   * Used to run token validation fro browser\n   * \n   * @method runTokenValidationForBrowser\n   * @returns \n   * @memberof OidcSecurityService\n   */\n  public runTokenValidationForBrowser() {\n    return new Promise(\n       (resolve, reject) => {\n        this.subscription  = this.source_browser.subscribe(() => {\n          if (!this._isAuthorizedValue) {\n            this.resetAuthorizationData(false);\n          }\n        },\n        (err: any) => {\n          this.oidcSecurityCommon.logError('Error: ' + err);\n        },\n        () => {\n          this.oidcSecurityCommon.logDebug('Completed');\n        });\n\n        resolve();\n\n       }\n    )\n  }\n\n  /**\n   * Used to run token validation for mobile\n   * \n   * @method runTokenValidationForMobile\n   * @returns \n   * @memberof OidcSecurityService\n   */\n  public runTokenValidationForMobile() {\n    return new Promise(\n       (resolve, reject) => {\n        this.subscription.unsubscribe();\n        this.subscription  = this.source_mobile.subscribe(() => {\n          if (this._isAuthorizedValue) {\n            const token = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token);\n            if (token !== '' && token !== undefined && token !== null) {\n              if (this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token))) {\n                this.oidcSecurityCommon.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\n                if (this.authConfiguration.silent_renew) {\n                  this.refreshSession().then(\n                    res => {\n                    }\n                  );\n                } else {\n                }\n              } else {\n                this.refreshSession().then(\n                  res => {\n                  }\n                );\n              }\n            } else {\n            }\n          } else {\n            this.resetAuthorizationData(false);\n          }\n        },\n        (err: any) => {\n          this.oidcSecurityCommon.logError('Error: ' + err);\n        },\n        () => {\n          this.oidcSecurityCommon.logDebug('Completed');\n        });\n\n        if (this._isAuthorizedValue) {\n          const token = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token);\n          if (token !== '' && token !== undefined && token !== null) {\n            if (this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token))) {\n              this.oidcSecurityCommon.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\n              if (this.authConfiguration.silent_renew) {\n                this.refreshSession().then(\n                  res => {\n                    resolve();\n                  }\n                );\n              } else {\n                this.resetAuthorizationData(false);\n                resolve();\n              }\n            } else {\n              this.refreshSession().then(\n                res => {\n                  resolve();\n                }\n              );\n            }\n          } else {\n            this.refreshSession().then(\n              res => {\n                resolve();\n              }\n            );\n          }\n        } else {\n          this.resetAuthorizationData(false);\n          resolve();\n        }\n       }\n    )\n  }\n\n}\n","/**\n * Provides a single interface for the angular-auth-oidc-client Module to be used in other modules\n * \n * @file index\n * @author Matthew Aaron Raymer <matthew.raymer@anomalistdesign.com>\n * @license UNLICENSED\n * @copyright Qpons 2017\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { OidcSecurityService } from './module/oidc.security.service';\nimport { OidcSecurityValidation } from './module/oidc.security.validation';\nimport { OidcSecurityCheckSession } from './module/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from './module/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './module/oidc.security.user-service';\nimport { OidcSecurityCommon } from './module/oidc.security.common';\nimport { OidcSecurityStorage, BrowserStorage } from './module/oidc.security.storage';\nimport { AuthWellKnownEndpoints } from './module/auth.well-known-endpoints';\nimport { AuthConfiguration, OpenIDImplicitFlowConfiguration, DefaultConfiguration } from './module/auth.configuration';\n\n/**\n * Dependencies\n * \n * @export\n */\nexport { NgModule, ModuleWithProviders } from '@angular/core';\nexport { OidcSecurityService } from './module/oidc.security.service';\nexport { OidcSecurityValidation } from './module/oidc.security.validation';\nexport { OidcSecurityCheckSession } from './module/oidc.security.check-session';\nexport { OidcSecuritySilentRenew } from './module/oidc.security.silent-renew';\nexport { OidcSecurityUserService } from './module/oidc.security.user-service';\nexport { OidcSecurityCommon } from './module/oidc.security.common';\nexport { OidcSecurityStorage, BrowserStorage } from './module/oidc.security.storage';\nexport { AuthWellKnownEndpoints } from './module/auth.well-known-endpoints';\nexport { AuthConfiguration, OpenIDImplicitFlowConfiguration, DefaultConfiguration } from './module/auth.configuration';\n\n/**\n * AAOC Module\n * \n * @export\n * @class AuthModule\n */\n@NgModule()\nexport class AuthModule {\n    static forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                DefaultConfiguration,\n                AuthWellKnownEndpoints,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\n\n    public static forChild(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                AuthWellKnownEndpoints,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\n}\n\n/**\n * Interface for Type<T>\n * \n * @export\n * @interface Type\n * @extends {Function}\n * @template T \n */\nexport interface Type<T> extends Function {\n\n    new (...args: any[]): T;\n\n}\n\n/**\n * Interface for Token\n * \n * @export\n * @interface Token\n */\nexport interface Token {\n\n    storage?: Type<any>;\n\n}\n"],"names":["tryCatchTarget","apply","this","arguments","e","errorObject_1","errors","reduce","errs","err","concat","UnsubscriptionError_1","fns","length","input","prev","fn","noop_1","arg","subject","next","value","complete","error","state","self","subscriber","context","_a","callbackFunc","args","scheduler","source","AsyncSubject_1","handler","_i","innerArgs","handlerFn","shift","add","schedule","dispatchError","selector","result_2","tryCatch_1","dispatchNext","subscribe","closed","o","len","isNaN","root_1","isFinite","numberIsFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","observables","concurrent","Number","POSITIVE_INFINITY","last","isScheduler_1","pop","Observable_1","mergeAll_1","ArrayObservable_1","keys","index","key","obj","project","lift","ZipOperator","url","headers","AjaxObservable","method","body","mapResponse","responseType","xhr","response","JSON","parse","responseText","responseXML","target","sources","i","k","hasOwnProperty","root","Object","assign","assignImpl","prevContext","closeContext","openContext","closeAction","bufferTimeSpan","dispatchBufferClose","bufferCreationInterval","debouncedNext","MinimalSet","has","_values","push","indexOf","period","notifyNext","Subject_1","clearThrottle","arr","item","windowTimeSpan","window","closeWindow","openWindow","windowCreationInterval","action","subscription","timeSpanState","dispatchWindowClose","remove","__window","__self","WorkerGlobalScope","_root","global","Error","x","Array","isArray","tryCatcher","_super","call","map","toString","join","name","stack","message","__extends","unsubscribe","_unsubscribe","Subscription","hasErrors","_parent","_parents","_subscriptions","isFunction_1","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","Symbol","exports","for","destinationOrNext","destination","Observer_1","Subscriber","syncErrorThrowable","SafeSubscriber","rxSubscriber_1","isStopped","_next","_error","_complete","Subscription_1","_parentSubscriber","observerOrNext","create","bind","_context","__tryOrSetError","__tryOrUnsub","syncErrorValue","syncErrorThrown","wrappedComplete","_this","nextOrObserver","Subscriber_1","$$observable","observable","getSymbolObservable","pipeFromArray","_subscribe","Observable","operator","sink","toSubscriber_1","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","operations","pipe_1","SubjectSubscription","observers","subscriberIndex","Subject","SubjectSubscriber","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","hasError","thrownError","SubjectSubscription_1","AsyncSubject","hasCompleted","hasNext","BoundCallbackObservable","func","dispatch","result_1","bindCallback","bindCallback_1","BoundNodeCallbackObservable","bindNodeCallback","bindNodeCallback_1","_isScalar","ScalarObservable","done","EmptyObservable","array","ArrayObservable","ScalarObservable_1","EmptyObservable_1","count","OuterSubscriber","outerValue","innerValue","outerIndex","innerIndex","innerSub","then","iterator","Set_1","Map_1","getOwnPropertyNames","prototype","symbolIteratorPonyfill","InnerSubscriber","notifyError","notifyComplete","outerSubscriber","result","InnerSubscriber_1","isArrayLike_1","isPromise_1","setTimeout","iterator_1","obs","TypeError","msg","none","CombineLatestOperator","CombineLatestSubscriber","values","active","toRespond","subscribeToResult_1","unused","oldVal","_tryProject","OuterSubscriber_1","combineLatest_1","combineLatest","of","promise","PromiseObservable","StringIterator","undefined","ArrayIterator","getIterator","IteratorObservable","return","str","idx","charAt","toLength","pow","arrayLike","ArrayLikeObservable","kind","hasValue","Notification","observer","observe","do","throw","undefinedValueNotification","completeNotification","delay","ObserveOnOperator","ObserveOnSubscriber","notification","ObserveOnMessage","scheduleMessage","Notification_1","createNext","createError","createComplete","ish","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","FromObservable_1","resultSelector","MergeMapOperator","MergeMapSubscriber","_tryNext","buffer","_innerSub","_notifyResultSelector","mergeMap_1","identity_1","from_1","concatAll_1","of_1","concat_1","observableFactory","DeferObservable","DeferSubscriber","factory","tryDefer","_callFactory","defer","defer_1","empty_1","ForkJoinObservable","ForkJoinSubscriber","total","innerSubscription","_hasValue","haveValues","completed","forkJoin","forkJoin_1","from","sourceObj","eventName","options","FromEventObservable","isNodeList","isHTMLCollection","setupSubscription","addEventListener","removeEventListener","isEventTarget","source_1","on","off","isJQueryStyleEventEmitter","source_2","addListener","removeListener","isNodeStyleEventEmitter","source_3","fromEvent","fromEvent_1","addHandler","removeHandler","FromEventPatternObservable","_callSelector","retValue","_callAddHandler","errorSubscriber","fromEventPattern","fromEventPattern_1","fromPromise","fromPromise_1","selfSelector","initialState","condition","iterate","GenerateObservable","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate","generate_1","thenSource","elseSource","IfObservable","IfSubscriber","tryIf","if","if_1","val","parseFloat","work","Action","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","_execute","errored","errorValue","actions","Action_1","SchedulerAction","now","Scheduler","Date","AsyncScheduler","execute","Scheduler_1","AsyncScheduler_1","AsyncAction_1","isNumeric_1","async_1","IntervalObservable","interval","interval_1","mergeStatic","merge_1","merge","RaceOperator","RaceSubscriber","hasFirst","race","race_1","NeverObservable","never","never_1","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_1","onErrorResumeNext","PairsObservable","pairs","pairs_1","start","_count","RangeObservable","range","range_1","resourceFactory","UsingObservable","resource","UsingSubscriber","tryUse","using","using_1","ErrorObservable","throw_1","dueTime","isDate_1","TimerObservable","initialDelay","timer","timer_1","zipStatic","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","shouldComplete","nextResult","isComplete","notifyInactive","checkIterators","zip_1","zip","thisArg","MapOperator","MapSubscriber","map_1","urlOrRequest","request","async","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","timeout","prop","AjaxSubscriber","get","ajaxGet","post","ajaxPost","delete","ajaxDelete","put","ajaxPut","patch","ajaxPatch","getJSON","ajaxGetJSON","FormData","serializeBody","send","AjaxResponse","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","stringify","setRequestHeader","progressSubscriber","AjaxTimeoutError","readyState","status_1","status","AjaxError","ontimeout","xhrTimeout","upload","xhrProgress_1","onprogress","xhrError_1","onerror","onreadystatechange","xhrReadyStateChange","abort","originalEvent","parseXhrResponse","ajax","ajax_1","QueueAction","QueueAction_1","bufferSize","windowTime","_bufferSize","_windowTime","ReplaySubject","_getNow","_events","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","time","max","getAssign","urlConfigOrSource","WebSocketCtor","WebSocket","_output","assign_1","ReplaySubject_1","WebSocketSubject","data","sock","socket","subMsg","unsubMsg","messageFilter","protocol","binaryType","close","onopen","openObserver","queue","closingObserver","code","reason","_resetState","onclose","closeObserver","wasClean","onmessage","_connectSocket","webSocket","webSocket_1","closingNotifier","BufferOperator","BufferSubscriber","buffer_1","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferCount_1","bufferCount","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","timespanOnly","timeSpanOnlyState","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferCreation","filledBufferContext","contexts","onBufferFull","Context","bufferTime_1","bufferTime","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferToggle","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","bufferWhen","CatchOperator","caught","CatchSubscriber","err2","_unsubscribeAndRecycle","catchError_1","catch","catch_1","_catch","combineAll_1","combineAll","concatAll","concatMap_1","concatMap","innerObservable","concatMapTo_1","concatMapTo","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","DeMaterializeOperator","DeMaterializeSubscriber","dematerialize_1","dematerialize","durationSelector","DebounceOperator","DebounceSubscriber","emitValue","duration","durationSubscription","debounce_1","debounce","DebounceTimeOperator","DebounceTimeSubscriber","clearDebounce","lastValue","debouncedSubscription","debounceTime_1","debounceTime","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","defaultIfEmpty","delayFor","DelayOperator","DelaySubscriber","delay_1","DelayMessage","_schedule","scheduleNotification","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","delayNotifierSubscriptions","notifierSubscription","SubscriptionDelaySubscriber","subscribeToSource","sourceSubscribed","delayWhen_1","delayWhen","Set","minimalSetImpl","keySelector","flushes","DistinctOperator","DistinctSubscriber","clear","_useKeySelector","_finalizeNext","distinct_1","distinct","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","y","hasKey","Boolean","distinctUntilChanged_1","distinctUntilChanged","distinctUntilKeyChanged_1","distinctUntilKeyChanged","DoOperator","DoSubscriber","safeSubscriber","tap_1","do_1","_do","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaust_1","exhaust","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","exhaustMap","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","expand","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","elementAt_1","elementAt","FilterOperator","FilterSubscriber","filter_1","filter","callback","FinallyOperator","FinallySubscriber","finalize_1","finally","finally_1","_finally","FindValueOperator","yieldIndex","FindValueSubscriber","find_1","find","findIndex_1","findIndex","FirstOperator","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","_emitted","EmptyError_1","first_1","first","MapPolyfill","_keys","size","cb","Map","MapPolyfill_1","FastMap","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","_group","groups","FastMap_1","element","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","forEach","attemptedToUnsubscribe","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","groupBy","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","ignoreElements","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","AuditOperator","AuditSubscriber","throttled","audit_1","audit","auditTime_1","auditTime","LastOperator","LastSubscriber","last_1","let","let_1","letBind","EveryOperator","EverySubscriber","everyValueMatch","every_1","every","MapToOperator","MapToSubscriber","mapTo_1","mapTo","MaterializeOperator","MaterializeSubscriber","materialize_1","materialize","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","TakeLastOperator","TakeLastSubscriber","ring","scan_1","takeLast_1","acc","comparer","reduce_1","max_1","mergeAll","mergeMap","flatMap","MergeMapToOperator","MergeMapToSubscriber","mergeMapTo_1","flatMapTo","mergeMapTo","MergeScanOperator","MergeScanSubscriber","mergeScan_1","mergeScan","min","min_1","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","subjectFactory","ConnectableObservable","getSubject","_subject","_isComplete","ConnectableSubscriber","refCount_1","connectableProto","writable","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","multicast_1","multicast","observeOn","PairwiseOperator","PairwiseSubscriber","hasPrev","pairwise_1","pairwise","pred","notPred","not_1","partition_1","partition","properties","props","currentProp","p","plucker","pluck_1","pluck","publish_1","publish","_value","BehaviorSubject","getValue","BehaviorSubject_1","publishBehavior_1","publishBehavior","selectorOrScheduler","publishReplay_1","publishReplay","publishLast_1","publishLast","RepeatOperator","RepeatSubscriber","repeat_1","repeat","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","repeatWhen","RetryOperator","RetrySubscriber","retry_1","retry","RetryWhenOperator","RetryWhenSubscriber","retryWhen_1","retryWhen","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sample","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sampleTime_1","sampleTime","scan","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualCompareToSubscriber","_oneComplete","emit","checkValues","a","b","areEqual","nextB","sequenceEqual_1","sequenceEqual","shareSubjectFactory","share_1","share","shareReplayOperator","shareReplay_1","shareReplay","SingleOperator","SingleSubscriber","seenValue","singleValue","applySingleValue","single_1","single","SkipOperator","SkipSubscriber","skip_1","skip","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipLast_1","skipLast","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipUntil","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","skipWhile","startWith_1","startWith","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","ImmediateDefinition","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","Function","partiallyApplied","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","event","globalMessageHandler","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","AsapAction","scheduled","Immediate_1","AsapScheduler","AsapAction_1","delayTime","asap_1","SubscribeOnObservable","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","subscribeOn","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchAll_1","switch","switch_1","_switch","switchMap","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","switchMapTo","TakeOperator","TakeSubscriber","take_1","take","takeLast","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeUntil","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","takeWhile","leading","trailing","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttle_1","throttle","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","throttleTime","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","TimeInterval","timeInterval_1","timeInterval","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timeoutWith","Timestamp","timestamp","timestamp_1","toArrayReducer","toArray_1","toArray","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","prevWindow","newWindow","window_1","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowCount","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","windowTime_1","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowToggle","unsubscribeClosingNotification","closingNotification","windowWhen_1","windowWhen","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","withLatestFrom","zipAll_1","zipAll","subscribedFrame","unsubscribedFrame","SubscriptionLoggable","SubscriptionLog_1","subscriptionLogs","oldSubscriptionLog","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","ColdObservable","messagesLength","frame","applyMixins_1","SubscriptionLoggable_1","HotObservable","maxFrames","VirtualTimeScheduler","VirtualAction","sort","sortActions","defaultMaxFrame","assertDeepEqual","VirtualTimeScheduler_1","TestScheduler","marbles","frameTimeFactor","parseMarbles","cold","ColdObservable_1","coldObservables","HotObservable_1","hotObservables","outerFrame","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","materializeInnerObservable","flushTests","toBe","expected","actualSubscriptionLogs","marblesArray","setup","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","RequestAnimationFrameDefinition","AnimationFrameAction","AnimationFrame_1","AnimationFrameScheduler","AnimationFrameAction_1","DefaultConfiguration","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","defaultConfig","AuthConfiguration","openIDImplicitFlowConfiguration","stsServer","redirect_url","client_id","response_type","scope","post_logout_redirect_uri","start_checksession","silent_renew","startup_route","forbidden_route","unauthorized_route","auto_userinfo","log_console_warning_active","log_console_debug_active","max_id_token_iat_offset_allowed_in_seconds","override_well_known_configuration","override_well_known_configuration_url","storage","Injectable","authConfiguration","hasStorage","BrowserStorage","getItem","setItem","oidcSecurityStorage","OidcSecurityCommon","read","write","isRenewProcess","store","storage_auth_result","storage_session_state","storage_silent_renew_running","storage_is_authorized","storage_access_token","storage_id_token","storage_user_data","retrieve","console","warn","log","OidcSecurityStorage","oidcSecurityCommon","OidcSecurityValidation","token","offsetSeconds","decoded","getPayloadFromToken","validate_id_token_exp_not_expired","decoded_id_token","tokenExpirationDate","getTokenExpirationDate","valueOf","dataIdToken","validated","logWarning","max_offset_allowed_in_seconds","dateTime_iat_id_token","setUTCSeconds","iat","logDebug","local_nonce","nonce","authWellKnownEndpoints_issuer","iss","aud","local_state","id_token_sub","userdata_sub","encode","encoded","split","urlBase64Decode","id_token","jwtkeys","header_data","getHeaderFromToken","kid","alg","isValid","_e","_d","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","kty","use","_c","access_token","at_hash","testdata","generate_at_hash","testValue","decodeURIComponent","hash","crypto","Util","hashString","first128bits","substr","hextob64u","date","exp","output","replace","atob","http","EventEmitter","Headers","append","res","json","AuthWellKnownEndpoints","storage_well_known_endpoints","issuer","jwks_uri","authorization_endpoint","token_endpoint","userinfo_endpoint","end_session_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","onWellKnownEndpointsLoaded","getWellKnownEndpoints","_data","Http","Output","authWellKnownEndpoints","OidcSecurityCheckSession","getElementById","sessionIframe","style","display","src","iframeMessageEvent","messageHandler","onload","clientId","origin","contentWindow","onCheckSessionChanged","OidcSecuritySilentRenew","existsparent","exists","getAccessToken","_body","userData","OidcSecurityUserService","getIdentityUserData","logError","platformId","router","oidcSecurityCheckSession","oidcSecuritySilentRenew","oidcSecurityUserService","OidcSecurityService","init","oidcSecurityValidation","setupModule","setUserData","setIsAuthorized","isPlatformBrowser","initRenew","pollServerSession","moduleSetup","onModuleSetup","_userData","asObservable","_isAuthorized","isAuthorized","_isAuthorizedValue","_isLoading","_isLoadingValue","getIdToken","params","storage_custom_request_params","authWellKnownEndpointsLoaded","config_validate_response_type","storage_auth_state_control","storage_auth_nonce","createAuthorizeUrl","authenticationScheme","resetAuthorizationData","location","href","_popupFor","_popup","popup","webview","title","w","h","CheckForPopupClosedInterval","dualScreenLeft","screenLeft","dualScreenTop","screenTop","width","innerWidth","clientWidth","screen","innerHeight","clientHeight","height","_checkForPopupClosedTimer","_checkForPopupClosed","_checkForLogoutPopupClosed","_url","parts","authorizedCallbackForWebview","authorizeWithWebview","authorizedCallbackForPopup","popup_cleanup","authorizeWithPopup","setIsLoading","authResponseIsValid","getSigningKeys","jwtKeys","validateStateFromHashCallback","validate_signature_id_token","validate_id_token_nonce","validate_required_id_token","validate_id_token_iat_max_offset","validate_id_token_iss","validate_id_token_aud","validate_id_token_at_hash","successful_validation","setAuthorizationData","getUserinfo","navigate","session_state","initUserData","validate_userdata_sub_id_token","authorizationEndsessionUrl","id_token_hint","checkSessionChanged","silentLogout","startRenew","silentRenewForWebview","urlParts","authorizationUrl","URLSearchParams","customParams","redirect_uri","resetStorageData","silentRenew","errorMessage","extractData","handleErrorGetSigningKeys","errMsg","Response","statusText","source_browser","source_mobile","isTokenExpired","refreshSession","Inject","PLATFORM_ID","Router","AuthModule","ngModule","providers","provide","useClass","NgModule"],"mappings":"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"}