{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../lib/node_modules/src/util/tryCatch.ts","../lib/node_modules/src/Subscription.ts","../lib/node_modules/src/util/pipe.ts","../lib/node_modules/tslib/tslib.es6.js","../lib/node_modules/packages/common/esm5/http/src/params.js","../lib/node_modules/packages/common/esm5/http/src/request.js","../lib/node_modules/packages/common/esm5/http/src/client.js","../lib/node_modules/packages/common/esm5/http/src/module.js","../lib/node_modules/src/operators/bufferTime.ts","../lib/node_modules/src/observable/PromiseObservable.ts","../lib/node_modules/src/observable/IteratorObservable.ts","../lib/node_modules/src/operators/debounceTime.ts","../lib/node_modules/src/util/Set.ts","../lib/node_modules/src/operators/sampleTime.ts","../lib/node_modules/src/operators/throttleTime.ts","../lib/node_modules/src/operators/windowTime.ts","../lib/tmp/module/services/oidc-array-helper.service.ts","../lib/node_modules/src/util/root.ts","../lib/node_modules/src/util/isFunction.ts","../lib/node_modules/src/util/isArray.ts","../lib/node_modules/src/util/isObject.ts","../lib/node_modules/src/util/errorObject.ts","../lib/node_modules/src/util/UnsubscriptionError.ts","../lib/node_modules/src/Observer.ts","../lib/node_modules/src/symbol/rxSubscriber.ts","../lib/node_modules/src/Subscriber.ts","../lib/node_modules/src/util/toSubscriber.ts","../lib/node_modules/src/symbol/observable.ts","../lib/node_modules/src/util/noop.ts","../lib/node_modules/src/Observable.ts","../lib/node_modules/src/observable/ScalarObservable.ts","../lib/node_modules/src/observable/EmptyObservable.ts","../lib/node_modules/src/util/isScheduler.ts","../lib/node_modules/src/observable/ArrayObservable.ts","../lib/node_modules/src/observable/of.ts","../lib/node_modules/src/util/isArrayLike.ts","../lib/node_modules/src/util/isPromise.ts","../lib/node_modules/src/symbol/iterator.ts","../lib/node_modules/src/InnerSubscriber.ts","../lib/node_modules/src/util/subscribeToResult.ts","../lib/node_modules/src/OuterSubscriber.ts","../lib/node_modules/src/operators/mergeMap.ts","../lib/node_modules/src/operators/concatMap.ts","../lib/node_modules/src/operator/concatMap.ts","../lib/node_modules/src/operators/filter.ts","../lib/node_modules/src/operator/filter.ts","../lib/node_modules/src/operators/map.ts","../lib/node_modules/src/operator/map.ts","../lib/node_modules/packages/common/esm5/http/src/backend.js","../lib/node_modules/packages/common/esm5/http/src/headers.js","../lib/node_modules/packages/common/esm5/http/src/response.js","../lib/tmp/module/models/authorization-result.enum.ts","../lib/node_modules/packages/common/esm5/http/src/interceptor.js","../lib/node_modules/packages/common/esm5/http/src/jsonp.js","../lib/node_modules/packages/common/esm5/http/src/xhr.js","../lib/node_modules/packages/common/esm5/http/src/xsrf.js","../lib/node_modules/src/util/ObjectUnsubscribedError.ts","../lib/node_modules/src/SubjectSubscription.ts","../lib/node_modules/src/Subject.ts","../lib/node_modules/src/BehaviorSubject.ts","../lib/node_modules/src/util/isNumeric.ts","../lib/node_modules/src/scheduler/Action.ts","../lib/node_modules/src/scheduler/AsyncAction.ts","../lib/node_modules/src/Scheduler.ts","../lib/node_modules/src/scheduler/AsyncScheduler.ts","../lib/node_modules/src/scheduler/async.ts","../lib/node_modules/src/util/isDate.ts","../lib/node_modules/src/observable/TimerObservable.ts","../lib/node_modules/src/observable/timer.ts","../lib/node_modules/src/operators/audit.ts","../lib/node_modules/src/operators/buffer.ts","../lib/node_modules/src/operators/bufferCount.ts","../lib/node_modules/src/operators/bufferToggle.ts","../lib/node_modules/src/operators/bufferWhen.ts","../lib/node_modules/src/operators/catchError.ts","../lib/node_modules/src/operators/combineLatest.ts","../lib/node_modules/src/observable/ArrayLikeObservable.ts","../lib/node_modules/src/Notification.ts","../lib/node_modules/src/operators/observeOn.ts","../lib/node_modules/src/observable/FromObservable.ts","../lib/node_modules/src/operators/count.ts","../lib/node_modules/src/operators/debounce.ts","../lib/node_modules/src/operators/defaultIfEmpty.ts","../lib/node_modules/src/operators/delay.ts","../lib/node_modules/src/operators/delayWhen.ts","../lib/node_modules/src/operators/dematerialize.ts","../lib/node_modules/src/operators/distinct.ts","../lib/node_modules/src/operators/distinctUntilChanged.ts","../lib/node_modules/src/util/ArgumentOutOfRangeError.ts","../lib/node_modules/src/operators/elementAt.ts","../lib/node_modules/src/operators/every.ts","../lib/node_modules/src/operators/exhaust.ts","../lib/node_modules/src/operators/exhaustMap.ts","../lib/node_modules/src/operators/expand.ts","../lib/node_modules/src/operators/finalize.ts","../lib/node_modules/src/operators/find.ts","../lib/node_modules/src/util/EmptyError.ts","../lib/node_modules/src/operators/first.ts","../lib/node_modules/src/util/MapPolyfill.ts","../lib/node_modules/src/util/Map.ts","../lib/node_modules/src/util/FastMap.ts","../lib/node_modules/src/operators/groupBy.ts","../lib/node_modules/src/operators/ignoreElements.ts","../lib/node_modules/src/operators/isEmpty.ts","../lib/node_modules/src/operators/last.ts","../lib/node_modules/src/operators/mapTo.ts","../lib/node_modules/src/operators/materialize.ts","../lib/node_modules/src/operators/scan.ts","../lib/node_modules/src/operators/takeLast.ts","../lib/node_modules/src/operators/mergeMapTo.ts","../lib/node_modules/src/operators/mergeScan.ts","../lib/node_modules/src/operators/refCount.ts","../lib/node_modules/src/observable/ConnectableObservable.ts","../lib/node_modules/src/operators/multicast.ts","../lib/node_modules/src/operators/onErrorResumeNext.ts","../lib/node_modules/src/operators/pairwise.ts","../lib/node_modules/src/operators/pluck.ts","../lib/node_modules/src/AsyncSubject.ts","../lib/node_modules/src/scheduler/QueueAction.ts","../lib/node_modules/src/scheduler/queue.ts","../lib/node_modules/src/scheduler/QueueScheduler.ts","../lib/node_modules/src/ReplaySubject.ts","../lib/node_modules/src/observable/race.ts","../lib/node_modules/src/operators/repeat.ts","../lib/node_modules/src/operators/repeatWhen.ts","../lib/node_modules/src/operators/retry.ts","../lib/node_modules/src/operators/retryWhen.ts","../lib/node_modules/src/operators/sample.ts","../lib/node_modules/src/operators/sequenceEqual.ts","../lib/node_modules/src/operators/single.ts","../lib/node_modules/src/operators/skip.ts","../lib/node_modules/src/operators/skipLast.ts","../lib/node_modules/src/operators/skipUntil.ts","../lib/node_modules/src/operators/skipWhile.ts","../lib/node_modules/src/operators/switchMap.ts","../lib/node_modules/src/operators/switchMapTo.ts","../lib/node_modules/src/operators/take.ts","../lib/node_modules/src/operators/takeUntil.ts","../lib/node_modules/src/operators/takeWhile.ts","../lib/node_modules/src/operators/tap.ts","../lib/node_modules/src/operators/throttle.ts","../lib/node_modules/src/operators/timeInterval.ts","../lib/node_modules/src/util/TimeoutError.ts","../lib/node_modules/src/operators/timeout.ts","../lib/node_modules/src/operators/timeoutWith.ts","../lib/node_modules/src/operators/window.ts","../lib/node_modules/src/operators/windowCount.ts","../lib/node_modules/src/operators/windowToggle.ts","../lib/node_modules/src/operators/windowWhen.ts","../lib/node_modules/src/operators/withLatestFrom.ts","../lib/node_modules/src/operators/zip.ts","../lib/tmp/module/models/validate-state-result.model.ts","../lib/tmp/module/modules/auth.configuration.ts","../lib/tmp/module/services/oidc.security.storage.ts","../lib/tmp/module/services/oidc.security.common.ts","../lib/tmp/module/services/oidc-token-helper.service.ts","../lib/tmp/module/services/oidc.logger.service.ts","../lib/tmp/module/services/oidc.security.validation.ts","../lib/tmp/module/services/oidc-security-state-validation.service.ts","../lib/tmp/module/services/oidc.security.check-session.ts","../lib/tmp/module/services/oidc.security.silent-renew.ts","../lib/tmp/module/services/oidc-data.service.ts","../lib/tmp/module/services/oidc.security.user-service.ts","../lib/tmp/module/services/uri-encoder.ts","../lib/tmp/module/services/oidc.security.service.ts","../lib/tmp/module/services/oidc.security.config.service.ts","../lib/tmp/module/models/auth.well-known-endpoints.ts","../lib/tmp/index.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@stable\n *\n * @record\n */\nexport function HttpParameterCodec() { }\nfunction HttpParameterCodec_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpParameterCodec.prototype.encodeKey;\n    /** @type {?} */\n    HttpParameterCodec.prototype.encodeValue;\n    /** @type {?} */\n    HttpParameterCodec.prototype.decodeKey;\n    /** @type {?} */\n    HttpParameterCodec.prototype.decodeValue;\n}\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nvar /**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nHttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return decodeURIComponent(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nexport { HttpUrlEncodingCodec };\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update() { }\nfunction Update_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Update.prototype.param;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n * @record\n */\nexport function HttpParamsOptions() { }\nfunction HttpParamsOptions_tsickle_Closure_declarations() {\n    /**\n     * String representation of the HTTP params in URL-query-string format. Mutually exclusive with\n     * `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP params. Mutally exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the params.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nvar /**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nHttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = /** @type {?} */ ({}); }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\n                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.has = /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.get = /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.getAll = /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    HttpParams.prototype.keys = /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(/** @type {?} */ ((this.map)).keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.append = /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.set = /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpParams.prototype.delete = /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    HttpParams.prototype.toString = /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\n            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');\n        })\n            .join('&');\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpParams.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @return {?}\n     */\n    HttpParams.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\n            ((this.updates)).forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\n                        ((_this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                /** @type {?} */ ((_this.map)).set(update.param, base_1);\n                            }\n                            else {\n                                /** @type {?} */ ((_this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            /** @type {?} */ ((_this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nexport { HttpParams };\nfunction HttpParams_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpParams.prototype.map;\n    /** @type {?} */\n    HttpParams.prototype.encoder;\n    /** @type {?} */\n    HttpParams.prototype.updates;\n    /** @type {?} */\n    HttpParams.prototype.cloneFrom;\n}\n//# sourceMappingURL=params.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpHeaders } from './headers';\nimport { HttpParams } from './params';\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nfunction HttpRequestInit_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nvar /**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nHttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var /** @type {?} */ options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? /** @type {?} */ (third) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = /** @type {?} */ (third);\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var /** @type {?} */ params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var /** @type {?} */ qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    HttpRequest.prototype.serializeBody = /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return (/** @type {?} */ (this.body)).toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    HttpRequest.prototype.detectContentTypeHeader = /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpRequest.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var /** @type {?} */ method = update.method || this.method;\n        var /** @type {?} */ url = update.url || this.url;\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var /** @type {?} */ headers = update.headers || this.headers;\n        var /** @type {?} */ params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nexport { HttpRequest };\nfunction HttpRequest_tsickle_Closure_declarations() {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n}\n//# sourceMappingURL=request.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs/observable/of';\nimport { concatMap } from 'rxjs/operator/concatMap';\nimport { filter } from 'rxjs/operator/filter';\nimport { map } from 'rxjs/operator/map';\nimport { HttpHandler } from './backend';\nimport { HttpHeaders } from './headers';\nimport { HttpParams } from './params';\nimport { HttpRequest } from './request';\nimport { HttpResponse } from './response';\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * \\@stable\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.request = /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var /** @type {?} */ req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = /** @type {?} */ (first);\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var /** @type {?} */ headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var /** @type {?} */ params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, /** @type {?} */ ((url)), (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var /** @type {?} */ events$ = concatMap.call(of(req), function (req) { return _this.handler.handle(req); });\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var /** @type {?} */ res$ = filter.call(events$, function (event) { return event instanceof HttpResponse; });\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        });\n                    case 'blob':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        });\n                    case 'text':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        });\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return map.call(res$, function (res) { return res.body; });\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.delete = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.get = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.head = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    HttpClient.prototype.jsonp = /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.options = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.patch = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.post = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.put = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler, },\n    ]; };\n    return HttpClient;\n}());\nexport { HttpClient };\nfunction HttpClient_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    HttpClient.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    HttpClient.ctorParameters;\n    /** @type {?} */\n    HttpClient.prototype.handler;\n}\n//# sourceMappingURL=client.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Inject, NgModule, Optional } from '@angular/core';\nimport { HttpBackend, HttpHandler } from './backend';\nimport { HttpClient } from './client';\nimport { HTTP_INTERCEPTORS, HttpInterceptorHandler, NoopInterceptor } from './interceptor';\nimport { JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor } from './jsonp';\nimport { BrowserXhr, HttpXhrBackend, XhrFactory } from './xhr';\nimport { HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME } from './xsrf';\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * \\@stable\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nexport function interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * \\@stable\n * @return {?}\n */\nexport function jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * \\@stable\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    HttpClientXsrfModule.disable = /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClientXsrfModule.withOptions = /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\n    return HttpClientXsrfModule;\n}());\nexport { HttpClientXsrfModule };\nfunction HttpClientXsrfModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    HttpClientXsrfModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    HttpClientXsrfModule.ctorParameters;\n}\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * \\@stable\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        HttpClient,\n                        // HttpHandler is the backend + interceptors and is constructed\n                        // using the interceptingHandler factory function.\n                        {\n                            provide: HttpHandler,\n                            useFactory: interceptingHandler,\n                            deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n                        },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                        BrowserXhr,\n                        { provide: XhrFactory, useExisting: BrowserXhr },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientModule.ctorParameters = function () { return []; };\n    return HttpClientModule;\n}());\nexport { HttpClientModule };\nfunction HttpClientModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    HttpClientModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    HttpClientModule.ctorParameters;\n}\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * \\@stable\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\n    return HttpClientJsonpModule;\n}());\nexport { HttpClientJsonpModule };\nfunction HttpClientJsonpModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    HttpClientJsonpModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    HttpClientJsonpModule.ctorParameters;\n}\n//# sourceMappingURL=module.js.map","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ArrayHelperService {\n    constructor() {}\n\n    arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nHttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nexport { HttpHandler };\nfunction HttpHandler_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nHttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nexport { HttpBackend };\nfunction HttpBackend_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n//# sourceMappingURL=backend.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nfunction Update_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nvar /**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nHttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var /** @type {?} */ index = line.indexOf(':');\n                    if (index > 0) {\n                        var /** @type {?} */ name_1 = line.slice(0, index);\n                        var /** @type {?} */ key = name_1.toLowerCase();\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            /** @type {?} */ ((_this.headers.get(key))).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var /** @type {?} */ values = headers[name];\n                    var /** @type {?} */ key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    HttpHeaders.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.append = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.set = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.delete = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    HttpHeaders.prototype.maybeSetNormalizedName = /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HttpHeaders.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    HttpHeaders.prototype.copyFrom = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\n        });\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.applyUpdate = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var /** @type {?} */ value = /** @type {?} */ ((update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var /** @type {?} */ existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    HttpHeaders.prototype.forEach = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\n    };\n    return HttpHeaders;\n}());\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nexport { HttpHeaders };\nfunction HttpHeaders_tsickle_Closure_declarations() {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n//# sourceMappingURL=headers.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { HttpHeaders } from './headers';\n/** @enum {number} */\nvar HttpEventType = {\n    /**\n       * The request was sent out over the wire.\n       */\n    Sent: 0,\n    /**\n       * An upload progress event was received.\n       */\n    UploadProgress: 1,\n    /**\n       * The response status code and headers were received.\n       */\n    ResponseHeader: 2,\n    /**\n       * A download progress event was received.\n       */\n    DownloadProgress: 3,\n    /**\n       * The full response including the body was received.\n       */\n    Response: 4,\n    /**\n       * A custom event from an interceptor or a backend.\n       */\n    User: 5,\n};\nexport { HttpEventType };\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n/**\n * Base interface for progress events.\n *\n * \\@stable\n * @record\n */\nexport function HttpProgressEvent() { }\nfunction HttpProgressEvent_tsickle_Closure_declarations() {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@stable\n * @record\n */\nexport function HttpDownloadProgressEvent() { }\nfunction HttpDownloadProgressEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@stable\n * @record\n */\nexport function HttpUploadProgressEvent() { }\nfunction HttpUploadProgressEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@stable\n * @record\n */\nexport function HttpSentEvent() { }\nfunction HttpSentEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@stable\n * @record\n */\nexport function HttpUserEvent() { }\nfunction HttpUserEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * \\@stable\n * @record\n */\nexport function HttpJsonParseError() { }\nfunction HttpJsonParseError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nHttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nexport { HttpResponseBase };\nfunction HttpResponseBase_tsickle_Closure_declarations() {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nvar /**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nHttpHeaderResponse = /** @class */ (function (_super) {\n    tslib_1.__extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpHeaderResponse.prototype.clone = /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nexport { HttpHeaderResponse };\nfunction HttpHeaderResponse_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nvar /**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nHttpResponse = /** @class */ (function (_super) {\n    tslib_1.__extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpResponse.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nexport { HttpResponse };\nfunction HttpResponse_tsickle_Closure_declarations() {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nvar /**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nHttpErrorResponse = /** @class */ (function (_super) {\n    tslib_1.__extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nexport { HttpErrorResponse };\nfunction HttpErrorResponse_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n//# sourceMappingURL=response.js.map","export enum AuthorizationResult {\n    authorized = 1,\n    forbidden = 2,\n    unauthorized = 3\n}\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, InjectionToken } from '@angular/core';\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * \\@stable\n * @record\n */\nexport function HttpInterceptor() { }\nfunction HttpInterceptor_tsickle_Closure_declarations() {\n    /**\n     * Intercept an outgoing `HttpRequest` and optionally transform it or the\n     * response.\n     *\n     * Typically an interceptor will transform the outgoing request before returning\n     * `next.handle(transformedReq)`. An interceptor may choose to transform the\n     * response event stream as well, by applying additional Rx operators on the stream\n     * returned by `next.handle()`.\n     *\n     * More rarely, an interceptor may choose to completely handle the request itself,\n     * and compose a new event stream instead of invoking `next.handle()`. This is\n     * acceptable behavior, but keep in mind further interceptors will be skipped entirely.\n     *\n     * It is also rare but valid for an interceptor to return multiple responses on the\n     * event stream for a single request.\n     * @type {?}\n     */\n    HttpInterceptor.prototype.intercept;\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nvar /**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nHttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptorHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nexport { HttpInterceptorHandler };\nfunction HttpInterceptorHandler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HttpInterceptorHandler.prototype.next;\n    /** @type {?} */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@stable\n */\nexport var /** @type {?} */ HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NoopInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NoopInterceptor.ctorParameters = function () { return []; };\n    return NoopInterceptor;\n}());\nexport { NoopInterceptor };\nfunction NoopInterceptor_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    NoopInterceptor.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    NoopInterceptor.ctorParameters;\n}\n//# sourceMappingURL=interceptor.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { HttpErrorResponse, HttpEventType, HttpResponse } from './response';\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar /** @type {?} */ nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport var /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport var /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport var /** @type {?} */ JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nJsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nexport { JsonpCallbackContext };\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@stable\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.nextCallback = /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.handle = /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var /** @type {?} */ callback = _this.nextCallback();\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var /** @type {?} */ node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var /** @type {?} */ body = null;\n            // Whether the response callback has been called.\n            var /** @type {?} */ finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var /** @type {?} */ cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var /** @type {?} */ cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var /** @type {?} */ onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the resposne is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var /** @type {?} */ onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext, },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    return JsonpClientBackend;\n}());\nexport { JsonpClientBackend };\nfunction JsonpClientBackend_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    JsonpClientBackend.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    JsonpClientBackend.ctorParameters;\n    /** @type {?} */\n    JsonpClientBackend.prototype.callbackMap;\n    /** @type {?} */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@stable\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    JsonpInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(/** @type {?} */ (req));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: JsonpClientBackend, },\n    ]; };\n    return JsonpInterceptor;\n}());\nexport { JsonpInterceptor };\nfunction JsonpInterceptor_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    JsonpInterceptor.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    JsonpInterceptor.ctorParameters;\n    /** @type {?} */\n    JsonpInterceptor.prototype.jsonp;\n}\n//# sourceMappingURL=jsonp.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { HttpHeaders } from './headers';\nimport { HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse } from './response';\nvar /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nXhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nexport { XhrFactory };\nfunction XhrFactory_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * \\@stable\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\nexport { BrowserXhr };\nfunction BrowserXhr_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    BrowserXhr.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    BrowserXhr.ctorParameters;\n}\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nfunction PartialResponse_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@stable\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpXhrBackend.prototype.handle = /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var /** @type {?} */ responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var /** @type {?} */ reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var /** @type {?} */ headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var /** @type {?} */ partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var /** @type {?} */ onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var /** @type {?} */ body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var /** @type {?} */ ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var /** @type {?} */ originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = /** @type {?} */ ({ error: error, text: body });\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var /** @type {?} */ onError = function (error) {\n                var /** @type {?} */ res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var /** @type {?} */ sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var /** @type {?} */ progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var /** @type {?} */ progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory, },\n    ]; };\n    return HttpXhrBackend;\n}());\nexport { HttpXhrBackend };\nfunction HttpXhrBackend_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    HttpXhrBackend.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    HttpXhrBackend.ctorParameters;\n    /** @type {?} */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n//# sourceMappingURL=xhr.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, ɵparseCookieValue as parseCookieValue } from '@angular/common';\nimport { Inject, Injectable, InjectionToken, PLATFORM_ID } from '@angular/core';\nexport var /** @type {?} */ XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nexport var /** @type {?} */ XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nHttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nexport { HttpXsrfTokenExtractor };\nfunction HttpXsrfTokenExtractor_tsickle_Closure_declarations() {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    HttpXsrfCookieExtractor.prototype.getToken = /**\n     * @return {?}\n     */\n    function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = parseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] },] },\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\nexport { HttpXsrfCookieExtractor };\nfunction HttpXsrfCookieExtractor_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    HttpXsrfCookieExtractor.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    HttpXsrfCookieExtractor.ctorParameters;\n    /** @type {?} */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /** @type {?} */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /** @type {?} */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /** @type {?} */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /** @type {?} */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    HttpXsrfInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var /** @type {?} */ token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor, },\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] },] },\n    ]; };\n    return HttpXsrfInterceptor;\n}());\nexport { HttpXsrfInterceptor };\nfunction HttpXsrfInterceptor_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    HttpXsrfInterceptor.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    HttpXsrfInterceptor.ctorParameters;\n    /** @type {?} */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /** @type {?} */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n//# sourceMappingURL=xsrf.js.map","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any\n    ) {}\n}\n","import { Injectable } from '@angular/core';\n\nexport class DefaultConfiguration {\n    stsServer = 'https://localhost:44318';\n    redirect_url = 'https://localhost:44311';\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n    // or if it contains additional audiences not trusted by the Client.\n    client_id = 'angularclient';\n    response_type = 'id_token token';\n    // For some oidc, we require resource identifier to be provided along with the request.\n    resource = '';\n    scope = 'openid email profile';\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\n    hd_param = '';\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\n    start_checksession = false;\n    silent_renew = true;\n    silent_renew_offset_in_seconds = 0;\n    post_login_route = '/';\n    // HTTP 403\n    forbidden_route = '/forbidden';\n    // HTTP 401\n    unauthorized_route = '/unauthorized';\n    auto_userinfo = true;\n    auto_clean_state_after_authentication: true;\n    trigger_authorization_result_event: false;\n    log_console_warning_active = true;\n    log_console_debug_active = false;\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    max_id_token_iat_offset_allowed_in_seconds = 3;\n\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\n}\n\nexport class OpenIDImplicitFlowConfiguration {\n    stsServer: string;\n    redirect_url: string;\n    client_id: string;\n    response_type: string;\n    resource: string;\n    scope: string;\n    hd_param: string;\n    post_logout_redirect_uri: string;\n    start_checksession: boolean;\n    silent_renew: boolean;\n    silent_renew_offset_in_seconds: number;\n    post_login_route: string;\n    forbidden_route: string;\n    unauthorized_route: string;\n    auto_userinfo: boolean;\n    auto_clean_state_after_authentication: boolean;\n    trigger_authorization_result_event: boolean;\n    log_console_warning_active: boolean;\n    log_console_debug_active: boolean;\n    max_id_token_iat_offset_allowed_in_seconds: number;\n    storage: any;\n}\n\n@Injectable()\nexport class AuthConfiguration {\n    private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration;\n\n    constructor(private defaultConfig: DefaultConfiguration) {}\n\n    get stsServer(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.stsServer ||\n            this.defaultConfig.stsServer\n        );\n    }\n\n    get redirect_url(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.redirect_url ||\n            this.defaultConfig.redirect_url\n        );\n    }\n\n    get client_id(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.client_id ||\n            this.defaultConfig.client_id\n        );\n    }\n\n    get response_type(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.response_type ||\n            this.defaultConfig.response_type\n        );\n    }\n\n    get resource(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.resource ||\n            this.defaultConfig.resource\n        );\n    }\n\n    get scope(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.scope ||\n            this.defaultConfig.scope\n        );\n    }\n\n    get hd_param(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.hd_param ||\n            this.defaultConfig.hd_param\n        );\n    }\n\n    get post_logout_redirect_uri(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.post_logout_redirect_uri ||\n            this.defaultConfig.post_logout_redirect_uri\n        );\n    }\n\n    get start_checksession(): boolean {\n        return this.openIDImplicitFlowConfiguration.start_checksession !==\n            undefined\n            ? this.openIDImplicitFlowConfiguration.start_checksession\n            : this.defaultConfig.start_checksession;\n    }\n\n    get silent_renew(): boolean {\n        return this.openIDImplicitFlowConfiguration.silent_renew !== undefined\n            ? this.openIDImplicitFlowConfiguration.silent_renew\n            : this.defaultConfig.silent_renew;\n    }\n\n    get silent_renew_offset_in_seconds(): number {\n        return (\n            this.openIDImplicitFlowConfiguration\n                .silent_renew_offset_in_seconds ||\n            this.defaultConfig.silent_renew_offset_in_seconds\n        );\n    }\n\n    get post_login_route(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.post_login_route ||\n            this.defaultConfig.post_login_route\n        );\n    }\n\n    get forbidden_route(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.forbidden_route ||\n            this.defaultConfig.forbidden_route\n        );\n    }\n\n    get unauthorized_route(): string {\n        return (\n            this.openIDImplicitFlowConfiguration.unauthorized_route ||\n            this.defaultConfig.unauthorized_route\n        );\n    }\n\n    get auto_userinfo(): boolean {\n        return this.openIDImplicitFlowConfiguration.auto_userinfo !== undefined\n            ? this.openIDImplicitFlowConfiguration.auto_userinfo\n            : this.defaultConfig.auto_userinfo;\n    }\n\n    get auto_clean_state_after_authentication(): boolean {\n        return this.openIDImplicitFlowConfiguration\n            .auto_clean_state_after_authentication !== undefined\n            ? this.openIDImplicitFlowConfiguration\n                  .auto_clean_state_after_authentication\n            : this.defaultConfig.auto_clean_state_after_authentication;\n    }\n\n    get trigger_authorization_result_event(): boolean {\n        return this.openIDImplicitFlowConfiguration\n            .trigger_authorization_result_event !== undefined\n            ? this.openIDImplicitFlowConfiguration\n                  .trigger_authorization_result_event\n            : this.defaultConfig.trigger_authorization_result_event;\n    }\n\n    get log_console_warning_active(): boolean {\n        return this.openIDImplicitFlowConfiguration\n            .log_console_warning_active !== undefined\n            ? this.openIDImplicitFlowConfiguration.log_console_warning_active\n            : this.defaultConfig.log_console_warning_active;\n    }\n\n    get log_console_debug_active(): boolean {\n        return this.openIDImplicitFlowConfiguration.log_console_debug_active !==\n            undefined\n            ? this.openIDImplicitFlowConfiguration.log_console_debug_active\n            : this.defaultConfig.log_console_debug_active;\n    }\n\n    get max_id_token_iat_offset_allowed_in_seconds(): number {\n        return (\n            this.openIDImplicitFlowConfiguration\n                .max_id_token_iat_offset_allowed_in_seconds ||\n            this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds\n        );\n    }\n\n    get storage(): any {\n        return this.openIDImplicitFlowConfiguration.storage || this.defaultConfig.storage;\n    }\n\n    init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @param key\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param key\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityStorage } from './oidc.security.storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class OidcSecurityCommon {\n    private storage_auth_result = 'authorizationResult';\n\n    public get authResult(): any {\n        return this.retrieve(this.storage_auth_result);\n    }\n\n    public set authResult(value: any) {\n        this.store(this.storage_auth_result, value);\n    }\n\n    private storage_access_token = 'authorizationData';\n\n    public get accessToken(): string {\n        return this.retrieve(this.storage_access_token) || '';\n    }\n\n    public set accessToken(value: string) {\n        this.store(this.storage_access_token, value);\n    }\n\n    private storage_id_token = 'authorizationDataIdToken';\n\n    public get idToken(): string {\n        return this.retrieve(this.storage_id_token) || '';\n    }\n\n    public set idToken(value: string) {\n        this.store(this.storage_id_token, value);\n    }\n\n    private storage_is_authorized = '_isAuthorized';\n\n    public get isAuthorized(): boolean | undefined {\n        return this.retrieve(this.storage_is_authorized);\n    }\n\n    public set isAuthorized(value: boolean | undefined) {\n        this.store(this.storage_is_authorized, value);\n    }\n\n    private storage_user_data = 'userData';\n\n    public get userData(): any {\n        return this.retrieve(this.storage_user_data);\n    }\n\n    public set userData(value: any) {\n        this.store(this.storage_user_data, value);\n    }\n\n    private storage_auth_nonce = 'authNonce';\n\n    public get authNonce(): string {\n        return this.retrieve(this.storage_auth_nonce) || '';\n    }\n\n    public set authNonce(value: string) {\n        this.store(this.storage_auth_nonce, value);\n    }\n\n    private storage_auth_state_control = 'authStateControl';\n\n    public get authStateControl(): string {\n        return this.retrieve(this.storage_auth_state_control) || '';\n    }\n\n    public set authStateControl(value: string) {\n        this.store(this.storage_auth_state_control, value);\n    }\n\n    private storage_session_state = 'session_state';\n\n    public get sessionState(): any {\n        return this.retrieve(this.storage_session_state);\n    }\n\n    public set sessionState(value: any) {\n        this.store(this.storage_session_state, value);\n    }\n\n    private storage_silent_renew_running = 'storage_silent_renew_running';\n\n    public get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storage_silent_renew_running) || '';\n    }\n\n    public set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storage_silent_renew_running, value);\n    }\n\n    private storage_custom_request_params = 'storage_custom_request_params';\n\n    public get customRequestParams(): {\n        [key: string]: string | number | boolean;\n    } {\n        return this.retrieve(this.storage_custom_request_params);\n    }\n\n    public set customRequestParams(value: {\n        [key: string]: string | number | boolean;\n    }) {\n        this.store(this.storage_custom_request_params, value);\n    }\n\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\n\n    setupModule() {}\n\n    private retrieve(key: string): any {\n        return this.oidcSecurityStorage.read(key);\n    }\n\n    private store(key: string, value: any) {\n        this.oidcSecurityStorage.write(key, value);\n    }\n\n    resetStorageData(isRenewProcess: boolean) {\n        if (!isRenewProcess) {\n            this.store(this.storage_auth_result, '');\n            this.store(this.storage_session_state, '');\n            this.store(this.storage_silent_renew_running, '');\n            this.store(this.storage_is_authorized, false);\n            this.store(this.storage_access_token, '');\n            this.store(this.storage_id_token, '');\n            this.store(this.storage_user_data, '');\n        }\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storage_access_token);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storage_id_token);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TokenHelperService {\n    constructor() {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getPayloadFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[1];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getHeaderFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[0];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    getSignatureFromToken(token: any, encode: boolean) {\n        let data = {};\n        if (typeof token !== 'undefined') {\n            const encoded = token.split('.')[2];\n            if (encode) {\n                return encoded;\n            }\n            data = JSON.parse(this.urlBase64Decode(encoded));\n        }\n\n        return data;\n    }\n\n    urlBase64Decode(str: string) {\n        let output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        return window.atob(output);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private authConfiguration: AuthConfiguration) {}\n\n    logError(message: any) {\n        console.error(message);\n    }\n\n    logWarning(message: any) {\n        if (this.authConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.authConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\nimport { ArrayHelperService } from './oidc-array-helper.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\n\n@Injectable()\nexport class OidcSecurityValidation {\n    constructor(\n        private arrayHelperService: ArrayHelperService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    validate_id_token_exp_not_expired(\n        decoded_id_token: string,\n        offsetSeconds?: number\n    ): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(\n            decoded_id_token\n        );\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        // Token not expired?\n        return (\n            tokenExpirationDate.valueOf() >\n            new Date().valueOf() + offsetSeconds * 1000\n        );\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\n    // in UTC until the date/ time.\n    validate_required_id_token(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'iss is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'sub is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'aud is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'exp is missing, this is required in the id_token'\n            );\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning(\n                'iat is missing, this is required in the id_token'\n            );\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validate_id_token_iat_max_offset(\n        dataIdToken: any,\n        max_offset_allowed_in_seconds: number\n    ): boolean {\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\n\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\n\n        if (dateTime_iat_id_token == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' +\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\n                ' < ' +\n                max_offset_allowed_in_seconds * 1000\n        );\n        return (\n            new Date().valueOf() - dateTime_iat_id_token.valueOf() <\n            max_offset_allowed_in_seconds * 1000\n        );\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\n        if (dataIdToken.nonce !== local_nonce) {\n            this.loggerService.logDebug(\n                'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\n                    dataIdToken.nonce +\n                    ' local_nonce:' +\n                    local_nonce\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    validate_id_token_iss(\n        dataIdToken: any,\n        authWellKnownEndpoints_issuer: any\n    ): boolean {\n        if (\n            (dataIdToken.iss as string) !==\n            (authWellKnownEndpoints_issuer as string)\n        ) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                    dataIdToken.iss +\n                    ' authWellKnownEndpoints issuer:' +\n                    authWellKnownEndpoints_issuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\n        if (dataIdToken.aud instanceof Array) {\n            const result = this.arrayHelperService.arraysEqual(\n                dataIdToken.aud,\n                aud\n            );\n\n            if (!result) {\n                this.loggerService.logDebug(\n                    'Validate_id_token_aud  array failed, dataIdToken.aud: ' +\n                        dataIdToken.aud +\n                        ' client_id:' +\n                        aud\n                );\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug(\n                'Validate_id_token_aud failed, dataIdToken.aud: ' +\n                    dataIdToken.aud +\n                    ' client_id:' +\n                    aud\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\n        if ((state as string) !== (local_state as string)) {\n            this.loggerService.logDebug(\n                'ValidateStateFromHashCallback failed, state: ' +\n                    state +\n                    ' local_state:' +\n                    local_state\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    validate_userdata_sub_id_token(\n        id_token_sub: any,\n        userdata_sub: any\n    ): boolean {\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\n            this.loggerService.logDebug(\n                'validate_userdata_sub_id_token failed, id_token_sub: ' +\n                    id_token_sub +\n                    ' userdata_sub:' +\n                    userdata_sub\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const header_data = this.tokenHelperService.getHeaderFromToken(\n            id_token,\n            false\n        );\n\n        if (\n            Object.keys(header_data).length === 0 &&\n            header_data.constructor === Object\n        ) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = header_data.kid;\n        const alg = header_data.alg;\n\n        if ('RS256' !== (alg as string)) {\n            this.loggerService.logWarning('Only RS256 supported');\n            return false;\n        }\n\n        let isValid = false;\n\n        if (!header_data.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if (\n                    (key.kty as string) === 'RSA' &&\n                    (key.use as string) === 'sig'\n                ) {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning(\n                    'no keys found, incorrect Signature, validation failed for id_token'\n                );\n                return false;\n            } else if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning(\n                    'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri'\n                );\n                return false;\n            } else {\n                for (const key of jwtkeys.keys) {\n                    if (\n                        (key.kty as string) === 'RSA' &&\n                        (key.use as string) === 'sig'\n                    ) {\n                        const publickey = KEYUTIL.getKey(key);\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, [\n                            'RS256'\n                        ]);\n                        if (!isValid) {\n                            this.loggerService.logWarning(\n                                'incorrect Signature, validation failed for id_token'\n                            );\n                        }\n                        return isValid;\n                    }\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, [\n                        'RS256'\n                    ]);\n                    if (!isValid) {\n                        this.loggerService.logWarning(\n                            'incorrect Signature, validation failed for id_token'\n                        );\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    config_validate_response_type(response_type: string): boolean {\n        if (\n            response_type === 'id_token token' ||\n            response_type === 'id_token'\n        ) {\n            return true;\n        }\n\n        this.loggerService.logWarning(\n            'module configure incorrect, invalid response_type:' + response_type\n        );\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validate_id_token_at_hash(access_token: any, at_hash: any): boolean {\n        this.loggerService.logDebug('From the server:' + at_hash);\n        const testdata = this.generate_at_hash('' + access_token);\n        this.loggerService.logDebug(\n            'client validation not decoded:' + testdata\n        );\n        if (testdata === (at_hash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generate_at_hash(\n                '' + decodeURIComponent(access_token)\n            );\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (at_hash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generate_at_hash(access_token: any): string {\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n@Injectable()\nexport class StateValidationService {\n    private authWellKnownEndpoints: AuthWellKnownEndpoints;\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult('', '', false, {});\n        if (\n            !this.oidcSecurityValidation.validateStateFromHashCallback(\n                result.state,\n                this.oidcSecurityCommon.authStateControl\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token') {\n            toReturn.access_token = result.access_token;\n        }\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(\n            toReturn.id_token,\n            false\n        );\n\n        if (\n            !this.oidcSecurityValidation.validate_signature_id_token(\n                toReturn.id_token,\n                jwtKeys\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Signature validation failed id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_nonce(\n                toReturn.decoded_id_token,\n                this.oidcSecurityCommon.authNonce\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_required_id_token(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logDebug(\n                'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration\n                    .max_id_token_iat_offset_allowed_in_seconds\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iss(\n                toReturn.decoded_id_token,\n                this.authWellKnownEndpoints.issuer\n            )\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\n            );\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_aud(\n                toReturn.decoded_id_token,\n                this.authConfiguration.client_id\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_exp_not_expired(\n                toReturn.decoded_id_token\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token') {\n            toReturn.authResponseIsValid = true;\n            this.handleSuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning(\n                'authorizedCallback incorrect at_hash'\n            );\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug(\n            'AuthorizedCallback token(s) validated, continue'\n        );\n    }\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { timer } from 'rxjs/observable/timer';\nimport { pluck, take, timeInterval } from 'rxjs/operators';\nimport { Observer } from 'rxjs/Observer';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class OidcSecurityCheckSession {\n    private sessionIframe: any;\n    private iframeMessageEvent: any;\n    private authWellKnownEndpoints: AuthWellKnownEndpoints;\n\n    @Output()\n    onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\n\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    doesSessionExist(): boolean {\n        let existsparent;\n        try {\n            const parentdoc = window.parent.document;\n            if (!parentdoc) {\n                throw new Error('Unaccessible');\n            }\n\n            existsparent = parentdoc.getElementById('myiFrameForCheckSession');\n        } catch (e) {\n            // not accessible\n        }\n        const exists = window.document.getElementById(\n            'myiFrameForCheckSession'\n        );\n        if (existsparent) {\n            this.sessionIframe = existsparent;\n        } else if (exists) {\n            this.sessionIframe = exists;\n        }\n\n        if (existsparent || exists) {\n            return true;\n        }\n\n        return false;\n    }\n\n    init() {\n        this.sessionIframe = window.document.createElement('iframe');\n        this.sessionIframe.id = 'myiFrameForCheckSession';\n        this.loggerService.logDebug(this.sessionIframe);\n        this.sessionIframe.style.display = 'none';\n        window.document.body.appendChild(this.sessionIframe);\n        this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\n\n        this.iframeMessageEvent = this.messageHandler.bind(this);\n        window.addEventListener('message', this.iframeMessageEvent, false);\n\n        return Observable.create((observer: Observer<any>) => {\n            this.sessionIframe.onload = () => {\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n\n    pollServerSession(clientId: any) {\n        const source = timer(3000, 3000).pipe(\n            timeInterval(),\n            pluck('interval'),\n            take(10000)\n        );\n\n        source.subscribe(\n            () => {\n                if (this.sessionIframe && clientId) {\n                    this.loggerService.logDebug(this.sessionIframe);\n                    const session_state = this.oidcSecurityCommon.sessionState;\n                    if (session_state) {\n                        this.sessionIframe.contentWindow.postMessage(\n                            clientId + ' ' + session_state,\n                            this.authConfiguration.stsServer\n                        );\n                    }\n                } else {\n                    this.loggerService.logWarning(\n                        'OidcSecurityCheckSession pollServerSession sessionIframe does not exist'\n                    );\n                    this.loggerService.logDebug(clientId);\n                    this.loggerService.logDebug(this.sessionIframe);\n                    // this.init();\n                }\n            },\n            (err: any) => {\n                this.loggerService.logError('pollServerSession error: ' + err);\n            },\n            () => {\n                this.loggerService.logDebug(\n                    'checksession pollServerSession completed'\n                );\n            }\n        );\n    }\n\n    private messageHandler(e: any) {\n        if (\n            this.sessionIframe &&\n            e.origin === this.authConfiguration.stsServer &&\n            e.source === this.sessionIframe.contentWindow\n        ) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning(\n                    'error from checksession messageHandler'\n                );\n            } else if (e.data === 'changed') {\n                this.onCheckSessionChanged.emit();\n            } else {\n                this.loggerService.logDebug(\n                    e.data + ' from checksession messageHandler'\n                );\n            }\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class OidcSecuritySilentRenew {\n    private sessionIframe: any;\n\n    constructor(private loggerService: LoggerService) {}\n\n    initRenew() {\n        let existsparent;\n        try {\n            const parentdoc = window.parent.document;\n            if (!parentdoc) {\n                throw new Error('Unaccessible');\n            }\n\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\n        } catch (e) {\n            // not accessible\n        }\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\n        if (existsparent) {\n            this.sessionIframe = existsparent;\n        } else if (exists) {\n            this.sessionIframe = exists;\n        }\n\n        if (!exists && !existsparent) {\n            this.sessionIframe = window.document.createElement('iframe');\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\n            this.loggerService.logDebug(this.sessionIframe);\n            this.sessionIframe.style.display = 'none';\n\n            window.document.body.appendChild(this.sessionIframe);\n        }\n    }\n\n    // TODO The return type of this method is never used. Is it needed?\n    startRenew(url: string) {\n        let existsparent;\n        try {\n            const parentdoc = window.parent.document;\n            if (!parentdoc) {\n                throw new Error('Unaccessible');\n            }\n\n            existsparent = parentdoc.getElementById('myiFrameForSilentRenew');\n        } catch (e) {\n            // not accessible\n        }\n        const exists = window.document.getElementById('myiFrameForSilentRenew');\n        if (existsparent) {\n            this.sessionIframe = existsparent;\n        } else if (exists) {\n            this.sessionIframe = exists;\n        }\n\n        this.loggerService.logDebug('startRenew for URL:' + url);\n        this.sessionIframe.src = url;\n\n        return Observable.create((observer: Observer<any>) => {\n            this.sessionIframe.onload = () => {\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set(\n            'Authorization',\n            'Bearer ' + decodeURIComponent(token)\n        );\n\n        console.log('getIdentityUserData_token: ', 'Bearer ' + decodeURIComponent(token));\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcDataService } from './oidc-data.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n@Injectable()\nexport class OidcSecurityUserService {\n    private userData: any = '';\n    private authWellKnownEndpoints: AuthWellKnownEndpoints;\n\n    constructor(\n        private oidcDataService: OidcDataService,\n        private oidcSecurityCommon: OidcSecurityCommon,\n    ) { }\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    initUserData() {\n        return this.getIdentityUserData().pipe(\n            map((data: any) => (this.userData = data))\n        );\n    }\n\n    getUserData(): any {\n        if (!this.userData) {\n            throw Error('UserData is not set!');\n        }\n\n        return this.userData;\n    }\n\n    setUserData(value: any): void {\n        this.userData = value;\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.oidcSecurityCommon.getAccessToken();\n\n        console.log('getIdentityUserData_token: ', token);\n\n        return this.oidcDataService.getIdentityUserData(\n            this.authWellKnownEndpoints.userinfo_endpoint,\n            token\n        );\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { HttpParams } from '@angular/common/http';\nimport { Inject, PLATFORM_ID } from '@angular/core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { timer } from 'rxjs/observable/timer';\nimport { catchError, pluck, take, timeInterval } from 'rxjs/operators';\n\nimport { AuthorizationResult } from '../models/authorization-result.enum';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport {\n  AuthConfiguration,\n  OpenIDImplicitFlowConfiguration\n} from '../modules/auth.configuration';\nimport { StateValidationService } from './oidc-security-state-validation.service';\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './oidc.security.user-service';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { UriEncoder } from './uri-encoder';\nimport { OidcDataService } from './oidc-data.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\n\n@Injectable()\nexport class OidcSecurityService {\n  @Output() onModuleSetup = new EventEmitter<boolean>();\n  @Output() onAuthorizationResult = new EventEmitter<AuthorizationResult>();\n  @Output() onCheckSessionChanged = new EventEmitter<boolean>();\n\n  checkSessionChanged: boolean;\n  moduleSetup = false;\n  private authWellKnownEndpoints: AuthWellKnownEndpoints;\n  private _isAuthorized = new BehaviorSubject<boolean>(false);\n  private _isAuthorizedValue: boolean;\n\n  private _isLoading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  private _isLoadingValue: boolean;\n\n  private lastUserData: any;\n  private _userData = new BehaviorSubject<any>('');\n\n  private authWellKnownEndpointsLoaded = false;\n  private runTokenValidationRunning: boolean;\n\n  private CheckForPopupClosedInterval: number;\n  private _checkForPopupClosedTimer: any;\n  private _popup: any;\n  private _popupFor: string;\n  private authenticationScheme: string;\n  private loginMethod: string;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private oidcDataService: OidcDataService,\n    private stateValidationService: StateValidationService,\n    private authConfiguration: AuthConfiguration,\n    private router: Router,\n    private oidcSecurityCheckSession: OidcSecurityCheckSession,\n    private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\n    private oidcSecurityUserService: OidcSecurityUserService,\n    private oidcSecurityCommon: OidcSecurityCommon,\n    private oidcSecurityValidation: OidcSecurityValidation,\n    private tokenHelperService: TokenHelperService,\n    private loggerService: LoggerService\n  ) {}\n\n  setupModule(\n    openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration,\n    authWellKnownEndpoints: AuthWellKnownEndpoints\n  ): void {\n    this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    this.authConfiguration.init(openIDImplicitFlowConfiguration);\n    this.stateValidationService.setupModule(authWellKnownEndpoints);\n    this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\n    this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\n\n    this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\n      this.loggerService.logDebug('onCheckSessionChanged');\n      this.checkSessionChanged = true;\n      this.onCheckSessionChanged.emit(\n        this.checkSessionChanged\n      );\n    });\n\n    this._userData.subscribe(() => {\n      this.onUserDataChanged();\n    });\n\n    const userData = this.oidcSecurityCommon.userData;\n    if (userData) {\n      this.setUserData(userData);\n    }\n\n    const isAuthorized = this.oidcSecurityCommon.isAuthorized;\n    if (isAuthorized) {\n      this.loggerService.logDebug('IsAuthorized setup module');\n      this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\n      if (this.oidcSecurityValidation.isTokenExpired(\n          this.oidcSecurityCommon.idToken,\n          this.authConfiguration.silent_renew_offset_in_seconds)\n      ) {\n        this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\n      } else {\n        this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\n        this.setIsAuthorized(isAuthorized);\n        this.runTokenValidation();\n      }\n    }\n\n    this.loggerService.logDebug(\n      'STS server: ' + this.authConfiguration.stsServer\n    );\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      this.moduleSetup = true;\n      this.onModuleSetup.emit();\n\n      if (this.authConfiguration.silent_renew) {\n        this.oidcSecuritySilentRenew.initRenew();\n      }\n\n      if (\n        this.authConfiguration.start_checksession &&\n        !this.oidcSecurityCheckSession.doesSessionExist()\n      ) {\n        this.oidcSecurityCheckSession.init().subscribe(() => {\n          this.oidcSecurityCheckSession.pollServerSession(\n            this.authConfiguration.client_id\n          );\n        });\n      }\n    } else {\n      this.moduleSetup = true;\n      this.onModuleSetup.emit();\n    }\n  }\n\n  getUserData(): Observable<any> {\n    return this._userData.asObservable();\n  }\n\n  getIsAuthorized(): Observable<boolean> {\n    return this._isAuthorized.asObservable();\n  }\n\n  getToken(): string {\n    if (!this._isAuthorizedValue) {\n      return '';\n    }\n\n    const token = this.oidcSecurityCommon.getAccessToken();\n    return decodeURIComponent(token);\n  }\n\n  getIdToken(): string {\n    if (!this._isAuthorizedValue) {\n      return '';\n    }\n\n    const token = this.oidcSecurityCommon.getIdToken();\n    return decodeURIComponent(token);\n  }\n\n  getPayloadFromIdToken(encode = false): any {\n    const token = this.getIdToken();\n    return this.tokenHelperService.getPayloadFromToken(token, encode);\n  }\n\n  setState(state: string): void {\n    this.oidcSecurityCommon.authStateControl = state;\n  }\n\n  getState(): string {\n    return this.oidcSecurityCommon.authStateControl;\n  }\n\n  setCustomRequestParameters(params: {\n    [key: string]: string | number | boolean;\n  }) {\n    this.oidcSecurityCommon.customRequestParams = params;\n  }\n\n  popup_cleanup() {\n\n    window.clearInterval(this._checkForPopupClosedTimer);\n    this._checkForPopupClosedTimer = null;\n    this._popup = null;\n\n  }\n\n  _checkForPopupClosed() {\n    try {\n      if (this._popup.location.href !== 'about:blank' && this._popup.location.href !== undefined) {\n        let a = this._popup.location.href.split('/');\n        a = a[(a.length - 1)];\n        if (a !== 'login') {\n          this._popup.close();\n          if (!this._popup || this._popup.closed) {\n            const hash = this._popup.location.hash.substr(1);\n            this.authorizedCallback(hash);\n            this.popup_cleanup();\n          }\n        } else {\n          if (!this._popup || this._popup.closed) {\n            this.popup_cleanup();\n          } else {\n            this._popupFor = 'afterRegistration';\n            this.authorize(this.authenticationScheme, this.loginMethod);\n          }\n        }\n      }\n    } catch (err) {\n      // do nothing\n    }\n  }\n\n  _checkForLogoutPopupClosed() {\n    try {\n      if (this._popup.location.href !== 'about:blank') {\n        this._popup.close();\n        if (!this._popup || this._popup.closed) {\n          this.popup_cleanup();\n        }\n      }\n    } catch (err) {\n\n    }\n  }\n\n  popup_login(url: string, title: string, w: number, h: number) {\n    let options: string;\n    this.CheckForPopupClosedInterval = 2000;\n\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : 0;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : 0;\n\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n\n    const left = ((width / 2) - (w / 2)) + dualScreenLeft;\n    const top = ((height / 2) - (h / 2)) + dualScreenTop;\n\n    options += 'toolbar=no,location=no,directories=no,status=no';\n    options += ',menubar=no,scrollbars=no,resizable=no,copyhistory=no';\n\n    options += ',width='  + w;\n    options += ',height=' + h;\n    options += ',top='  + top;\n    options += ',left='   + left;\n\n    this._popup = window.open(url, title, options);\n    this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), this.CheckForPopupClosedInterval);\n  }\n\n  authorize(authenticationScheme: string = 'local', loginMethod: string = 'redirect') {\n    this.authenticationScheme = authenticationScheme;\n    this.loginMethod = loginMethod;\n    if (this.authWellKnownEndpoints) {\n      this.authWellKnownEndpointsLoaded = true;\n    }\n\n    if (!this.authWellKnownEndpointsLoaded) {\n      this.loggerService.logError(\n        'Well known endpoints must be loaded before user can login!'\n      );\n      return;\n    }\n\n    if (\n      !this.oidcSecurityValidation.config_validate_response_type(\n        this.authConfiguration.response_type\n      )\n    ) {\n      // invalid response_type\n      return;\n    }\n\n    this.resetAuthorizationData(false);\n\n    this.loggerService.logDebug('BEGIN Authorize, no auth data');\n\n    let state = this.oidcSecurityCommon.authStateControl;\n    if (!state) {\n      state = Date.now() + '' + Math.random();\n      this.oidcSecurityCommon.authStateControl = state;\n    }\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    this.oidcSecurityCommon.authNonce = nonce;\n    this.loggerService.logDebug(\n      'AuthorizedController created. local state: ' +\n        this.oidcSecurityCommon.authStateControl\n    );\n\n    let url = this.createAuthorizeUrl(\n      nonce,\n      state,\n      this.authWellKnownEndpoints.authorization_endpoint\n    );\n    url = url + '&authenticationScheme=' + authenticationScheme;\n\n    if (loginMethod === 'popup') {\n      if (this._popupFor === 'afterRegistration') {\n        this._popup.location.href = url;\n      } else {\n        this.popup_login(url, 'QPONS\\' AUTHORIZATION PAGE', 800, 800);\n      }\n    } else {\n      window.location.href = url;\n    }\n  }\n\n  authorizedCallback(hash?: string) {\n    this.setIsLoading(true);\n    const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n    const isRenewProcess = silentRenew === 'running';\n\n    this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n    this.resetAuthorizationData(isRenewProcess);\n\n    hash = hash || window.location.hash.substr(1);\n\n    const result: any = hash\n      .split('&')\n      .reduce(function(resultData: any, item: string) {\n        const parts = item.split('=');\n        resultData[parts[0]] = parts[1];\n        return resultData;\n      }, {});\n\n    this.oidcSecurityCommon.authResult = result;\n    this.loggerService.logDebug(result);\n    this.loggerService.logDebug(\n      'authorizedCallback created, begin token validation'\n    );\n\n    this.getSigningKeys().subscribe((jwtKeys: any) => {\n      const validationResult = this.getValidatedStateResult(\n        result,\n        jwtKeys\n      );\n\n      if (validationResult.authResponseIsValid) {\n        this.setAuthorizationData(\n          validationResult.access_token,\n          validationResult.id_token\n        );\n        this.oidcSecurityCommon.silentRenewRunning = '';\n\n        if (this.authConfiguration.auto_userinfo) {\n          this.getUserinfo(\n            isRenewProcess,\n            result,\n            validationResult.id_token,\n            validationResult.decoded_id_token\n          ).subscribe((response: any) => {\n            this.setIsLoading(false);\n            if (response) {\n              this.onAuthorizationResult.emit(AuthorizationResult.authorized);\n              if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                this.router.navigate([\n                  this.authConfiguration.post_login_route\n                ]);\n              }\n            } else {\n              this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n              if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                this.router.navigate([\n                  this.authConfiguration.unauthorized_route\n                ]);\n              }\n            }\n          });\n        } else {\n          this.setIsLoading(false);\n          if (!isRenewProcess) {\n            // userData is set to the id_token decoded, auto get user data set to false\n            this.oidcSecurityUserService.setUserData(\n              validationResult.decoded_id_token\n            );\n            this.setUserData(\n              this.oidcSecurityUserService.getUserData()\n            );\n            this.runTokenValidation();\n          }\n\n          this.onAuthorizationResult.emit(AuthorizationResult.authorized);\n          if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n            this.router.navigate([\n              this.authConfiguration.post_login_route\n            ]);\n          }\n        }\n      } else {\n        this.setIsLoading(false);\n        // something went wrong\n        this.loggerService.logWarning(\n          'authorizedCallback, token(s) validation failed, resetting'\n        );\n        this.loggerService.logWarning(window.location.hash);\n        this.resetAuthorizationData(false);\n        this.oidcSecurityCommon.silentRenewRunning = '';\n\n        this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\n        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n          this.router.navigate([\n            this.authConfiguration.unauthorized_route\n          ]);\n        }\n      }\n    });\n  }\n\n  getUserinfo(\n    isRenewProcess = false,\n    result?: any,\n    id_token?: any,\n    decoded_id_token?: any\n  ): Observable<boolean> {\n    result = result ? result : this.oidcSecurityCommon.authResult;\n    id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\n    decoded_id_token = decoded_id_token\n      ? decoded_id_token\n      : this.tokenHelperService.getPayloadFromToken(id_token, false);\n\n    console.log(this.authConfiguration);\n\n    return new Observable<boolean>((observer: any) => {\n      // flow id_token token\n      if (this.authConfiguration.response_type === 'id_token token') {\n        if (isRenewProcess) {\n          this.oidcSecurityCommon.sessionState = result.session_state;\n          observer.next(true);\n          observer.complete();\n        } else {\n          this.oidcSecurityUserService\n            .initUserData()\n            .subscribe(() => {\n              this.loggerService.logDebug(\n                'authorizedCallback id_token token flow'\n              );\n\n              const userData = this.oidcSecurityUserService.getUserData();\n\n              if (\n                this.oidcSecurityValidation.validate_userdata_sub_id_token(\n                  decoded_id_token.sub,\n                  userData.sub\n                )\n              ) {\n                this.setUserData(userData);\n                this.loggerService.logDebug(\n                  this.oidcSecurityCommon.accessToken\n                );\n                this.loggerService.logDebug(\n                  this.oidcSecurityUserService.getUserData()\n                );\n\n                this.oidcSecurityCommon.sessionState =\n                  result.session_state;\n\n                this.runTokenValidation();\n                observer.next(true);\n              } else {\n                // something went wrong, userdata sub does not match that from id_token\n                this.loggerService.logWarning(\n                  'authorizedCallback, User data sub does not match sub in id_token'\n                );\n                this.loggerService.logDebug(\n                  'authorizedCallback, token(s) validation failed, resetting'\n                );\n                this.resetAuthorizationData(false);\n                observer.next(false);\n              }\n              observer.complete();\n            });\n        }\n      } else {\n        // flow id_token\n        this.loggerService.logDebug('authorizedCallback id_token flow');\n        this.loggerService.logDebug(\n          this.oidcSecurityCommon.accessToken\n        );\n\n        // userData is set to the id_token decoded. No access_token.\n        this.oidcSecurityUserService.setUserData(decoded_id_token);\n        this.setUserData(this.oidcSecurityUserService.getUserData());\n\n        this.oidcSecurityCommon.sessionState = result.session_state;\n\n        if (!isRenewProcess) {\n          this.runTokenValidation();\n        }\n\n        observer.next(true);\n        observer.complete();\n      }\n    });\n  }\n\n  logoff() {\n    // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\n    this.loggerService.logDebug('BEGIN Authorize, no auth data');\n\n    if (this.authWellKnownEndpoints.end_session_endpoint) {\n      const end_session_endpoint = this.authWellKnownEndpoints\n        .end_session_endpoint;\n      const id_token_hint = this.oidcSecurityCommon.idToken;\n      const url = this.createEndSessionUrl(\n        end_session_endpoint,\n        id_token_hint\n      );\n\n      this.resetAuthorizationData(false);\n\n      if (\n        this.authConfiguration.start_checksession &&\n        this.checkSessionChanged\n      ) {\n        this.loggerService.logDebug(\n          'only local login cleaned up, server session has changed'\n        );\n      } else {\n        window.location.href = url;\n      }\n    } else {\n      this.resetAuthorizationData(false);\n      this.loggerService.logDebug(\n        'only local login cleaned up, no end_session_endpoint'\n      );\n    }\n  }\n\n  refreshSession() {\n    this.loggerService.logDebug('BEGIN refresh session Authorize');\n\n    let state = this.oidcSecurityCommon.authStateControl;\n    if (state === '' || state === null) {\n      state = Date.now() + '' + Math.random();\n      this.oidcSecurityCommon.authStateControl = state;\n    }\n\n    const nonce = 'N' + Math.random() + '' + Date.now();\n    this.oidcSecurityCommon.authNonce = nonce;\n    this.loggerService.logDebug(\n      'RefreshSession created. adding myautostate: ' +\n        this.oidcSecurityCommon.authStateControl\n    );\n\n    const url = this.createAuthorizeUrl(\n      nonce,\n      state,\n      this.authWellKnownEndpoints.authorization_endpoint,\n      'none'\n    );\n\n    this.oidcSecurityCommon.silentRenewRunning = 'running';\n    this.oidcSecuritySilentRenew.startRenew(url);\n  }\n\n  handleError(error: any) {\n    this.loggerService.logError(error);\n    if (error.status === 403 || error.status === '403') {\n      if (this.authConfiguration.trigger_authorization_result_event) {\n        this.onAuthorizationResult.emit(\n          AuthorizationResult.unauthorized\n        );\n      } else {\n        this.router.navigate([this.authConfiguration.forbidden_route]);\n      }\n    } else if (error.status === 401 || error.status === '401') {\n      const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n\n      this.resetAuthorizationData(!!silentRenew);\n\n      if (this.authConfiguration.trigger_authorization_result_event) {\n        this.onAuthorizationResult.emit(\n          AuthorizationResult.unauthorized\n        );\n      } else {\n        this.router.navigate([\n          this.authConfiguration.unauthorized_route\n        ]);\n      }\n    }\n  }\n\n  private getValidatedStateResult(\n    result: any,\n    jwtKeys: JwtKeys\n  ): ValidateStateResult {\n    if (result.error) {\n      return new ValidateStateResult('', '', false, {});\n    }\n\n    return this.stateValidationService.validateState(result, jwtKeys);\n  }\n\n  private setUserData(userData: any): void {\n    this.oidcSecurityCommon.userData = userData;\n    this._userData.next(userData);\n  }\n\n  private setIsAuthorized(isAuthorized: boolean): void {\n    this._isAuthorizedValue = isAuthorized;\n    this._isAuthorized.next(isAuthorized);\n  }\n\n  private setAuthorizationData(access_token: any, id_token: any) {\n    if (this.oidcSecurityCommon.accessToken !== '') {\n      this.oidcSecurityCommon.accessToken = '';\n    }\n\n    this.loggerService.logDebug(access_token);\n    this.loggerService.logDebug(id_token);\n    this.loggerService.logDebug('storing to storage, getting the roles');\n    this.oidcSecurityCommon.accessToken = access_token;\n    this.oidcSecurityCommon.idToken = id_token;\n    this.setIsAuthorized(true);\n    this.oidcSecurityCommon.isAuthorized = true;\n  }\n\n  getIsLoading(): Observable<boolean> {\n    return this._isLoading.asObservable();\n  }\n\n  private setIsLoading(isAuthorized: boolean) {\n    this._isLoadingValue = isAuthorized;\n    this._isLoading.next(isAuthorized);\n  }\n\n  private createAuthorizeUrl(\n    nonce: string,\n    state: string,\n    authorization_endpoint: string,\n    prompt?: string\n  ): string {\n    const urlParts = authorization_endpoint.split('?');\n    const authorizationUrl = urlParts[0];\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder()\n    });\n    params = params.set('client_id', this.authConfiguration.client_id);\n    params = params.append(\n      'redirect_uri',\n      this.authConfiguration.redirect_url\n    );\n    params = params.append(\n      'response_type',\n      this.authConfiguration.response_type\n    );\n    params = params.append('scope', this.authConfiguration.scope);\n    params = params.append('nonce', nonce);\n    params = params.append('state', state);\n\n    if (prompt) {\n      params = params.append('prompt', prompt);\n    }\n\n    if (this.authConfiguration.hd_param) {\n      params = params.append('hd', this.authConfiguration.hd_param);\n    }\n\n    const customParams = Object.assign(\n      {},\n      this.oidcSecurityCommon.customRequestParams\n    );\n\n    Object.keys(customParams).forEach(key => {\n      params = params.append(key, customParams[key].toString());\n    });\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  private createEndSessionUrl(\n    end_session_endpoint: string,\n    id_token_hint: string\n  ) {\n    const urlParts = end_session_endpoint.split('?');\n\n    const authorizationEndsessionUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder()\n    });\n    params = params.set('id_token_hint', id_token_hint);\n    params = params.append(\n      'post_logout_redirect_uri',\n      this.authConfiguration.post_logout_redirect_uri\n    );\n\n    return `${authorizationEndsessionUrl}?${params}`;\n  }\n\n  private resetAuthorizationData(isRenewProcess: boolean) {\n    if (!isRenewProcess) {\n      if (this.authConfiguration.auto_userinfo) {\n        // Clear user data. Fixes #97.\n        this.setUserData('');\n      }\n      this.setIsAuthorized(false);\n      this.oidcSecurityCommon.resetStorageData(isRenewProcess);\n      this.checkSessionChanged = false;\n    }\n  }\n\n  private onUserDataChanged() {\n    this.loggerService.logDebug(\n      `onUserDataChanged: last = ${this.lastUserData}, new = ${\n        this._userData.value\n      }`\n    );\n\n    if (this.lastUserData && !this._userData.value) {\n      this.loggerService.logDebug('onUserDataChanged: Logout detected.');\n      // TODO should we have an action here\n    }\n    this.lastUserData = this._userData.value;\n  }\n\n  private getSigningKeys(): Observable<JwtKeys> {\n    this.loggerService.logDebug(\n      'jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri\n    );\n    return this.oidcDataService\n      .get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\n      .pipe(catchError(this.handleErrorGetSigningKeys));\n  }\n\n  private handleErrorGetSigningKeys(error: Response | any) {\n    let errMsg: string;\n    if (error instanceof Response) {\n      const body = error.json() || {};\n      const err = JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    console.error(errMsg);\n    return Observable.throw(errMsg);\n  }\n\n  private runTokenValidation() {\n    if (this.runTokenValidationRunning) {\n      return;\n    }\n    this.runTokenValidationRunning = true;\n\n    const source = timer(5000, 3000).pipe(\n      timeInterval(),\n      pluck('interval'),\n      take(10000)\n    );\n\n    source.subscribe(\n      () => {\n        if (this._userData.value && (this.oidcSecurityCommon.silentRenewRunning !== 'running') && this.getIdToken()) {\n          if (this.oidcSecurityValidation.isTokenExpired(\n              this.oidcSecurityCommon.idToken,\n              this.authConfiguration.silent_renew_offset_in_seconds\n            )\n          ) {\n            this.loggerService.logDebug(\n              'IsAuthorized: id_token isTokenExpired, start silent renew if active'\n            );\n\n            if (this.authConfiguration.silent_renew) {\n              this.refreshSession();\n            } else {\n              this.resetAuthorizationData(false);\n            }\n          }\n        }\n      },\n      (err: any) => {\n        this.loggerService.logError('Error: ' + err);\n      },\n      () => {\n        this.loggerService.logDebug('Completed');\n      }\n    );\n  }\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\n\n@Injectable()\nexport class OidcConfigService {\n    @Output() onConfigurationLoaded = new EventEmitter<boolean>();\n    clientConfiguration: any;\n    wellKnownEndpoints: any;\n\n    constructor() {}\n\n    async load(configUrl: string) {\n        const response = await fetch(configUrl);\n        this.clientConfiguration = await response.json()\n        await this.load_using_stsServer(this.clientConfiguration.stsServer);\n    }\n\n    async load_using_stsServer(stsServer: string) {\n        const response = await fetch(`${stsServer}/.well-known/openid-configuration`);\n        this.wellKnownEndpoints = await response.json()\n        this.onConfigurationLoaded.emit();\n    }\n\n    async load_using_custom_stsServer(stsServer: string) {\n        const response = await fetch(stsServer);\n        this.wellKnownEndpoints = await response.json()\n        this.onConfigurationLoaded.emit();\n    }\n}\n","export class AuthWellKnownEndpoints {\n\n    issuer: string;\n    jwks_uri: string;\n    authorization_endpoint: string;\n    token_endpoint: string;\n    userinfo_endpoint: string;\n    end_session_endpoint: string;\n    check_session_iframe: string;\n    revocation_endpoint: string;\n    introspection_endpoint: string;\n\n    public setWellKnownEndpoints(data: any) {\n        this.issuer = data.issuer;\n        this.jwks_uri = data.jwks_uri;\n        this.authorization_endpoint = data.authorization_endpoint;\n        this.token_endpoint = data.token_endpoint;\n        this.userinfo_endpoint = data.userinfo_endpoint;\n\n        if (data.end_session_endpoint) {\n            this.end_session_endpoint = data.end_session_endpoint;\n        }\n\n        if (data.check_session_iframe) {\n            this.check_session_iframe = data.check_session_iframe;\n        }\n\n        if (data.revocation_endpoint) {\n            this.revocation_endpoint = data.revocation_endpoint;\n        }\n\n        if (data.introspection_endpoint) {\n            this.introspection_endpoint = data.introspection_endpoint;\n        }\n    }\n}\n","/**\n * Provides a single interface for the angular-auth-oidc-client Module to be used in other modules\n * \n * @file index\n * @author Matthew Aaron Raymer <matthew.raymer@anomalistdesign.com>\n * @license UNLICENSED\n * @copyright Qpons 2017\n */\n\n/**\n * Dependencies\n * \n * @import\n */\nimport { ArrayHelperService } from './module/services/oidc-array-helper.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpModule, RequestOptions, Http, XHRBackend, BaseRequestOptions } from '@angular/http';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\nimport { OidcSecurityService } from './module/services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration, OpenIDImplicitFlowConfiguration } from './module/modules/auth.configuration';\nimport { OidcSecurityValidation } from './module/services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from './module/services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from './module/services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './module/services/oidc.security.user-service';\nimport { OidcSecurityCommon } from './module/services/oidc.security.common';\nimport {\n  OidcSecurityStorage,\n  BrowserStorage\n} from './module/services/oidc.security.storage';\nimport { StateValidationService } from './module/services/oidc-security-state-validation.service';\nimport { OidcDataService } from './module/services/oidc-data.service';\nimport { TokenHelperService } from './module/services/oidc-token-helper.service';\nimport { LoggerService } from './module/services/oidc.logger.service';\nimport { OidcConfigService } from './module/services/oidc.security.config.service';\nimport { AuthWellKnownEndpoints } from './module/models/auth.well-known-endpoints';\n\n/**\n * Dependencies\n * \n * @export\n */\nexport { ArrayHelperService } from './module/services/oidc-array-helper.service';\nexport { NgModule, ModuleWithProviders } from '@angular/core';\n\nexport { OidcSecurityService } from './module/services/oidc.security.service';\nexport { AuthConfiguration, DefaultConfiguration, OpenIDImplicitFlowConfiguration } from './module/modules/auth.configuration';\nexport { OidcSecurityValidation } from './module/services/oidc.security.validation';\nexport { OidcSecurityCheckSession } from './module/services/oidc.security.check-session';\nexport { OidcSecuritySilentRenew } from './module/services/oidc.security.silent-renew';\nexport { OidcSecurityUserService } from './module/services/oidc.security.user-service';\nexport { OidcSecurityCommon } from './module/services/oidc.security.common';\nexport {\n  OidcSecurityStorage,\n  BrowserStorage\n} from './module/services/oidc.security.storage';\nexport { StateValidationService } from './module/services/oidc-security-state-validation.service';\nexport { OidcDataService } from './module/services/oidc-data.service';\nexport { TokenHelperService } from './module/services/oidc-token-helper.service';\nexport { LoggerService } from './module/services/oidc.logger.service';\nexport { OidcConfigService } from './module/services/oidc.security.config.service';\nexport { AuthWellKnownEndpoints } from './module/models/auth.well-known-endpoints';\n\n/**\n * AAOC Module\n * \n * @export\n * @class AuthModule\n */\n@NgModule({\n  imports: [\n    HttpModule,\n    HttpClientModule\n  ],\n  exports: [],\n  declarations: []\n})\nexport class AuthModule {\n  static forRoot(token: Token = {}): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        OidcConfigService,\n        OidcSecurityService,\n        OidcSecurityValidation,\n        OidcSecurityCheckSession,\n        OidcSecuritySilentRenew,\n        OidcSecurityUserService,\n        OidcSecurityCommon,\n        AuthConfiguration,\n        TokenHelperService,\n        LoggerService,\n        DefaultConfiguration,\n        ArrayHelperService,\n        AuthWellKnownEndpoints,\n        OidcDataService,\n        StateValidationService,\n        {\n          provide: OidcSecurityStorage,\n          useClass: token.storage || BrowserStorage\n        }\n      ]\n    };\n  }\n}\n\n/**\n * Interface for Type<T>\n * \n * @export\n * @interface Type\n * @extends {Function}\n * @template T \n */\nexport interface Type<T> extends Function {\n  new (...args: any[]): T;\n}\n\n/**\n * Interface for Token\n * \n * @export\n * @interface Token\n */\nexport interface Token {\n  storage?: Type<any>;\n}\n"],"names":["tryCatchTarget","apply","this","arguments","e","errorObject_1","errors","reduce","errs","err","concat","UnsubscriptionError_1","fns","length","input","prev","fn","noop_1","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","standardEncoding","v","encodeURIComponent","replace","isArrayBuffer","value","ArrayBuffer","isBlob","Blob","isFormData","FormData","addBody","options","body","headers","observe","params","reportProgress","responseType","withCredentials","interceptingHandler","backend","interceptors","reduceRight","next","interceptor","HttpInterceptorHandler","state","subscriber","prevContext","context","closeContext","closed","openContext","closeAction","schedule","bufferTimeSpan","scheduler","add","dispatchBufferClose","bufferCreationInterval","arg","complete","error","o","len","isNaN","root_1","isFinite","numberIsFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","debouncedNext","MinimalSet","has","_values","push","indexOf","period","notifyNext","clearThrottle","windowTimeSpan","window","closeWindow","openWindow","windowCreationInterval","action","subscription","timeSpanState","dispatchWindowClose","remove","ArrayHelperService","arr1","arr2","i","Injectable","__window","__self","self","WorkerGlobalScope","_root","global","Error","x","Array","isArray","tryCatcher","_super","call","map","toString","join","name","stack","message","unsubscribe","_unsubscribe","Subscription","hasErrors","_parent","_parents","_subscriptions","index","isFunction_1","tryCatch_1","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","Symbol","exports","for","destinationOrNext","destination","Observer_1","Subscriber","syncErrorThrowable","SafeSubscriber","rxSubscriber_1","isStopped","_next","_error","_complete","Subscription_1","_parentSubscriber","observerOrNext","bind","_context","__tryOrSetError","__tryOrUnsub","syncErrorValue","syncErrorThrown","wrappedComplete","_this","nextOrObserver","Subscriber_1","$$observable","observable","getSymbolObservable","_i","pipeFromArray","subscribe","_subscribe","Observable","operator","source","sink","toSubscriber_1","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","operations","pipe_1","_isScalar","ScalarObservable","done","dispatch","Observable_1","EmptyObservable","array","ArrayObservable","isScheduler_1","pop","ScalarObservable_1","EmptyObservable_1","count","ArrayObservable_1","of","then","root","iterator","Set_1","Map_1","keys","getOwnPropertyNames","key","symbolIteratorPonyfill","outerValue","outerIndex","InnerSubscriber","notifyError","notifyComplete","outerSubscriber","result","InnerSubscriber_1","isArrayLike_1","isPromise_1","setTimeout","iterator_1","item","obs","TypeError","msg","OuterSubscriber","innerValue","innerIndex","innerSub","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","lift","MergeMapOperator","observer","MergeMapSubscriber","active","_tryNext","buffer","_innerSub","ish","subscribeToResult_1","hasCompleted","_notifyResultSelector","shift","OuterSubscriber_1","mergeMap_1","concatMap_1","predicate","thisArg","FilterOperator","FilterSubscriber","filter_1","MapOperator","MapSubscriber","map_1","setPrototypeOf","__proto__","p","hasOwnProperty","HttpHandler","HttpBackend","HttpHeaders","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","name_1","slice","toLowerCase","trim","maybeSetNormalizedName","get","set","values","init","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","base","undefined","toDelete_1","existing","filter","HttpUrlEncodingCodec","encodeKey","k","encodeValue","decodeKey","decodeURIComponent","decodeValue","HttpParams","updates","cloneFrom","encoder","fromString","fromObject","rawParams","codec","param","eqIdx","_a","val","list","paramParser","res","eKey","base_1","idx","HttpRequest","method","url","third","fourth","toUpperCase","mightHaveBody","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","AuthorizationResult","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","tslib_1.__extends","HttpResponse","HttpErrorResponse","HttpClient","handler","request","first","req","events$","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","decorators","ctorParameters","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","onError","addEventListener","appendChild","removeEventListener","Inject","args","DOCUMENT","XSSI_PREFIX","JsonpInterceptor","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","xhr","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","test","getResponseHeader","getResponseUrl","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","parseCookieValue","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","NgModule","useExisting","multi","HttpClientModule","imports","useFactory","deps","Optional","subject","SubjectSubscription","observers","subscriberIndex","Subject","SubjectSubscriber","AnonymousSubject","ObjectUnsubscribedError_1","copy","hasError","thrownError","SubjectSubscription_1","_value","BehaviorSubject","getValue","Subject_1","parseFloat","work","Action","delay","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","_execute","errored","errorValue","actions","Action_1","SchedulerAction","now","Scheduler","Date","AsyncScheduler","execute","Scheduler_1","AsyncScheduler_1","AsyncAction_1","dueTime","isNumeric_1","async_1","isDate_1","TimerObservable","initialDelay","durationSelector","AuditOperator","AuditSubscriber","hasValue","throttled","duration","innerSubscription","closingNotifier","BufferOperator","BufferSubscriber","bufferSize","startBufferEvery","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","BufferCountOperator","buffers","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","timespanOnly","timeSpanOnlyState","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferCreation","filledBufferContext","contexts","onBufferFull","Context","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","selector","CatchOperator","caught","CatchSubscriber","err2","_unsubscribeAndRecycle","none","CombineLatestOperator","CombineLatestSubscriber","observables","toRespond","unused","oldVal","_tryProject","promise","PromiseObservable","dispatchNext","dispatchError","obj","StringIterator","ArrayIterator","getIterator","IteratorObservable","return","str","charAt","arr","toLength","pow","arrayLike","ArrayLikeObservable","kind","Notification","do","throw","undefinedValueNotification","completeNotification","ObserveOnOperator","ObserveOnSubscriber","notification","ObserveOnMessage","scheduleMessage","Notification_1","createNext","createError","createComplete","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","CountOperator","CountSubscriber","_tryPredicate","DebounceOperator","DebounceSubscriber","emitValue","durationSubscription","DebounceTimeOperator","DebounceTimeSubscriber","clearDebounce","lastValue","debouncedSubscription","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","DelayOperator","DelaySubscriber","queue","time","delay_1","max","DelayMessage","_schedule","scheduleNotification","delayDurationSelector","DelayWhenOperator","DelayWhenSubscriber","removeSubscription","tryComplete","delayNotifier","tryDelay","completed","subscriptionIdx","delayNotifierSubscriptions","notifierSubscription","subscriptionDelay","SubscriptionDelayObservable","SubscriptionDelaySubscriber","subscribeToSource","sourceSubscribed","DeMaterializeOperator","DeMaterializeSubscriber","Set","minimalSetImpl","keySelector","flushes","DistinctOperator","DistinctSubscriber","clear","_useKeySelector","_finalizeNext","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","y","hasKey","Boolean","ArgumentOutOfRangeError_1","ElementAtOperator","ElementAtSubscriber","EveryOperator","EverySubscriber","everyValueMatch","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandOperator","ExpandSubscriber","subscribeToProjection","FinallyOperator","FinallySubscriber","yieldIndex","FindValueOperator","FindValueSubscriber","FirstOperator","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","_emitted","EmptyError_1","MapPolyfill","_keys","size","cb","MapPolyfill_1","FastMap","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","_group","groups","FastMap_1","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","attemptedToUnsubscribe","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsOperator","IgnoreElementsSubscriber","IsEmptyOperator","IsEmptySubscriber","LastOperator","LastSubscriber","MapToOperator","MapToSubscriber","MaterializeOperator","MaterializeSubscriber","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","TakeLastOperator","TakeLastSubscriber","ring","MergeMapToOperator","MergeMapToSubscriber","MergeScanOperator","MergeScanSubscriber","acc","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","subjectFactory","ConnectableObservable","getSubject","_subject","_isComplete","ConnectableSubscriber","refCount_1","MulticastOperator","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","PairwiseOperator","PairwiseSubscriber","hasPrev","properties","props","currentProp","plucker","AsyncSubject","hasNext","QueueAction","QueueAction_1","windowTime","_bufferSize","_windowTime","ReplaySubject","_getNow","_events","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","RaceOperator","RaceSubscriber","hasFirst","RepeatOperator","RepeatSubscriber","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetryOperator","RetrySubscriber","RetryWhenOperator","RetryWhenSubscriber","SampleOperator","sampleSubscriber","SampleSubscriber","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualCompareToSubscriber","_oneComplete","_b","emit","checkValues","a","areEqual","nextB","SingleOperator","SingleSubscriber","seenValue","singleValue","applySingleValue","SkipOperator","SkipSubscriber","_skipCount","SkipLastOperator","SkipLastSubscriber","_ring","skipCount","_count","currentIndex","oldValue","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","TakeOperator","TakeSubscriber","TakeUntilOperator","TakeUntilSubscriber","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","DoOperator","DoSubscriber","safeSubscriber","leading","trailing","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeOperator","ThrottleTimeSubscriber","TimeIntervalOperator","interval","TimeIntervalSubscriber","lastTime","span","TimeInterval","waitFor","absoluteTimeout","errorInstance","TimeoutOperator","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","prevWindow","newWindow","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","window_1","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromOperator","WithLatestFromSubscriber","found","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","shouldComplete","nextResult","isComplete","notifyInactive","checkIterators","ValidateStateResult","access_token","id_token","authResponseIsValid","decoded_id_token","DefaultConfiguration","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","defaultConfig","AuthConfiguration","openIDImplicitFlowConfiguration","stsServer","redirect_url","client_id","response_type","resource","scope","hd_param","post_logout_redirect_uri","start_checksession","silent_renew","silent_renew_offset_in_seconds","post_login_route","forbidden_route","unauthorized_route","auto_userinfo","auto_clean_state_after_authentication","trigger_authorization_result_event","log_console_warning_active","log_console_debug_active","max_id_token_iat_offset_allowed_in_seconds","storage","authConfiguration","hasStorage","BrowserStorage","getItem","setItem","oidcSecurityStorage","OidcSecurityCommon","retrieve","storage_auth_result","store","storage_access_token","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_auth_state_control","storage_session_state","storage_silent_renew_running","storage_custom_request_params","read","write","isRenewProcess","OidcSecurityStorage","TokenHelperService","dataIdToken","date","setUTCSeconds","exp","encode","encoded","urlBase64Decode","output","atob","LoggerService","console","warn","log","arrayHelperService","tokenHelperService","loggerService","OidcSecurityValidation","offsetSeconds","decoded","getPayloadFromToken","validate_id_token_exp_not_expired","tokenExpirationDate","getTokenExpirationDate","valueOf","validated","logWarning","max_offset_allowed_in_seconds","dateTime_iat_id_token","iat","logDebug","local_nonce","nonce","authWellKnownEndpoints_issuer","iss","aud","arraysEqual","local_state","id_token_sub","userdata_sub","jwtkeys","header_data","getHeaderFromToken","kid","alg","isValid","_e","_d","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","kty","use","_c","at_hash","testdata","generate_at_hash","testValue","hash","crypto","Util","hashString","first128bits","substr","hextob64u","oidcSecurityCommon","oidcSecurityValidation","StateValidationService","authWellKnownEndpoints","assign","jwtKeys","toReturn","validateStateFromHashCallback","authStateControl","validate_signature_id_token","validate_id_token_nonce","authNonce","validate_required_id_token","validate_id_token_iat_max_offset","validate_id_token_iss","issuer","validate_id_token_aud","handleSuccessfulValidation","validate_id_token_at_hash","EventEmitter","OidcSecurityCheckSession","existsparent","parentdoc","getElementById","exists","sessionIframe","style","display","check_session_iframe","iframeMessageEvent","messageHandler","onload","clientId","timer","pipe","timeInterval","pluck","take","session_state","sessionState","contentWindow","postMessage","logError","origin","onCheckSessionChanged","Output","OidcSecuritySilentRenew","httpClient","OidcDataService","oidcDataService","OidcSecurityUserService","getIdentityUserData","userData","getAccessToken","userinfo_endpoint","UriEncoder","platformId","stateValidationService","router","oidcSecurityCheckSession","oidcSecuritySilentRenew","oidcSecurityUserService","OidcSecurityService","setupModule","checkSessionChanged","_userData","onUserDataChanged","setUserData","isAuthorized","idToken","isTokenExpired","setIsAuthorized","runTokenValidation","isPlatformBrowser","moduleSetup","onModuleSetup","initRenew","doesSessionExist","pollServerSession","asObservable","_isAuthorized","_isAuthorizedValue","getIdToken","customRequestParams","_checkForPopupClosedTimer","_popup","location","href","close","authorizedCallback","popup_cleanup","_popupFor","authorize","authenticationScheme","loginMethod","title","w","h","CheckForPopupClosedInterval","dualScreenLeft","screenLeft","dualScreenTop","screenTop","width","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","height","_checkForPopupClosed","authWellKnownEndpointsLoaded","config_validate_response_type","resetAuthorizationData","random","createAuthorizeUrl","authorization_endpoint","popup_login","setIsLoading","silentRenewRunning","resultData","parts","authResult","getSigningKeys","validationResult","getValidatedStateResult","setAuthorizationData","getUserinfo","onAuthorizationResult","authorized","navigate","unauthorized","getUserData","initUserData","validate_userdata_sub_id_token","accessToken","end_session_endpoint","id_token_hint","createEndSessionUrl","startRenew","silentRenew","validateState","_isLoading","_isLoadingValue","prompt","urlParts","authorizationUrl","customParams","authorizationEndsessionUrl","resetStorageData","lastUserData","jwks_uri","catchError","handleErrorGetSigningKeys","errMsg","json","runTokenValidationRunning","refreshSession","Router","OidcConfigService","configUrl","fetch","clientConfiguration","load_using_stsServer","wellKnownEndpoints","onConfigurationLoaded","AuthWellKnownEndpoints","token_endpoint","revocation_endpoint","introspection_endpoint","AuthModule","HttpModule","declarations"],"mappings":"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"}